{
  "openapi": "3.0.2",
  "info": {
    "title": "Bridge API",
    "description": "APIs to move into, out of, and between any form of a dollar",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.bridge.xyz/v0",
      "description": "The base path for all resources"
    }
  ],
  "tags": [
    {
      "name": "Customers"
    },
    {
      "name": "External Accounts"
    },
    {
      "name": "Transfers"
    },
    {
      "name": "Prefunded Accounts"
    },
    {
      "name": "Balances"
    },
    {
      "name": "Liquidation Addresses"
    },
    {
      "name": "Developers"
    },
    {
      "name": "Plaid"
    },
    {
      "name": "Virtual Accounts"
    },
    {
      "name": "Static Memos"
    },
    {
      "name": "Cards"
    },
    {
      "name": "Webhooks"
    },
    {
      "name": "Lists"
    },
    {
      "name": "Crypto Return Policies"
    },
    {
      "name": "Rewards"
    },
    {
      "name": "Associated Persons (Beta)"
    }
  ],
  "paths": {
    "/wallets": {
      "get": {
        "summary": "Get all Bridge Wallets",
        "description": "List of Bridge Wallets",
        "tags": [
          "Bridge Wallets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/BridgeWalletStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/BridgeWalletEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Bridge Wallets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeWalletsList"
                },
                "examples": {
                  "SuccessfulBridgeWalletListResponse": {
                    "$ref": "#/components/examples/SuccessfulBridgeWalletListResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/wallets/total_balances": {
      "get": {
        "summary": "Get total balances of all Bridge Wallets",
        "tags": [
          "Bridge Wallets"
        ],
        "description": "Get the total balances of all Bridge Wallets",
        "responses": {
          "200": {
            "description": "Total balances of all Bridge Wallets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BridgeWalletTotalBalance"
                  }
                },
                "examples": {
                  "TotalBalancesFound": {
                    "$ref": "#/components/examples/SuccessfulTotalBalancesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/wallets/{bridgeWalletID}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/BridgeWalletIDParameter"
        },
        {
          "$ref": "#/components/parameters/LimitParameter"
        },
        {
          "$ref": "#/components/parameters/UpdatedAfterMsParameter"
        },
        {
          "$ref": "#/components/parameters/UpdatedBeforeMsParameter"
        }
      ],
      "get": {
        "summary": "Get transaction history for a Bridge Wallet",
        "tags": [
          "Bridge Wallets"
        ],
        "description": "Get the list of transactions involving this Bridge Wallet",
        "responses": {
          "200": {
            "description": "List of transactions for this Bridge Wallet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeWalletHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary": "Get all customers",
        "description": "Get the full list of all customers created on Bridge",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerEndingBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of customers (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Customers",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/Customer"
                      }
                    }
                  }
                },
                "examples": {
                  "CustomersFound": {
                    "summary": "A non-empty list of customers",
                    "value": {
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulCustomerResponse/value"
                        },
                        {
                          "$ref": "#/components/examples/SuccessfulCustomerResponse2/value"
                        }
                      ]
                    }
                  },
                  "NoCustomersFound": {
                    "summary": "An empty list of customers",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Create a customer",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "Customer object to be created.\n\nFor individual customers (soon to be businesses as well), no fields are strictly required by the API. For example, it is valid to create a customer without a first name, last name, or residential address, but this customer will not be granted endorsements required to transact on Bridge until the necessary information is provided, possibly via a PUT request.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateIndividualCustomerPayload"
                  },
                  {
                    "$ref": "#/components/schemas/CreateBusinessCustomerPayload"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "individual": "#/components/schemas/CreateIndividualCustomerPayload",
                    "business": "#/components/schemas/CreateBusinessCustomerPayload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "IndividualCustomerCreated": {
                    "summary": "Customer successfully created",
                    "$ref": "#/components/examples/SuccessfulCustomerResponse"
                  },
                  "BusinessCustomerCreated": {
                    "summary": "Customer successfully created",
                    "$ref": "#/components/examples/SuccessfulCustomerResponse2"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerIDParameter"
        }
      ],
      "get": {
        "summary": "Get a single customer object",
        "tags": [
          "Customers"
        ],
        "description": "Retrieve a customer object from the passed in customer ID",
        "responses": {
          "200": {
            "description": "Successful customer object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "SuccessfulCustomerResponse": {
                    "$ref": "#/components/examples/SuccessfulCustomerResponse"
                  },
                  "RejectedCustomerResponse": {
                    "$ref": "#/components/examples/RejectedCustomerResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "summary": "Update a single customer object",
        "tags": [
          "Customers"
        ],
        "requestBody": {
          "description": "Customer object to update with",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateIndividualCustomerPayload"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateBusinessCustomerPayload"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateBusinessCustomerPayload_Partial"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "individual": "#/components/schemas/UpdateIndividualCustomerPayload",
                    "business": "#/components/schemas/UpdateBusinessCustomerPayload",
                    "business_partial": "#/components/schemas/UpdateBusinessCustomerPayload_Partial"
                  }
                }
              }
            }
          }
        },
        "description": "Updates to be made to the specified customer.\n\nFor individual customers (soon to be businesses as well), no fields are strictly required by the API. It is generally valid to provide any subset of data in a PUT request. For business customers, associated persons cannot be updated via PUT, and should instead be managed using v0/associated_persons.\n",
        "responses": {
          "200": {
            "description": "Successful customer object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "SuccessfulCustomerResponse": {
                    "$ref": "#/components/examples/SuccessfulCustomerResponse"
                  },
                  "RejectedCustomerResponse": {
                    "$ref": "#/components/examples/RejectedCustomerResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a single customer object",
        "tags": [
          "Customers"
        ],
        "description": "Delete a customer object from the passed in customer ID",
        "responses": {
          "200": {
            "description": "Successfully deleted customer object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "DeletedCustomerResponse": {
                    "$ref": "#/components/examples/SuccessfulCustomerResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/external_accounts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerIDParameter"
        }
      ],
      "get": {
        "summary": "Get all External Accounts",
        "tags": [
          "External Accounts"
        ],
        "description": "Get all External Accounts for a passed in customer.",
        "responses": {
          "200": {
            "description": "List of External Accounts (the returned list is empty if no External Accounts exist)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ExternalAccount",
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/ExternalAccountResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "ExternalAccountsFound": {
                    "summary": "A non-empty list of External Accounts",
                    "value": {
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulExternalAccountResponse/value"
                        }
                      ]
                    }
                  },
                  "NoExternalAccountsFound": {
                    "summary": "An empty list of External Accounts",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Create a new External Account",
        "tags": [
          "External Accounts"
        ],
        "description": "_Note_: If adding US external accounts, we recommend reading through the US Beneficiary Address Validation doc ([link](https://apidocs.bridge.xyz/docs/us-beneficiary-address-validation)) to avoid issues related to incorrect addresses.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "New External Account object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id",
                  "type"
                ],
                "$ref": "#/components/schemas/ExternalAccount"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "External Account object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                },
                "examples": {
                  "SuccessfulExternalAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulExternalAccountResponse"
                  },
                  "SuccessfulIbanExternalAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulIbanExternalAccountResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/external_accounts/{externalAccountID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerIDParameter"
        },
        {
          "$ref": "#/components/parameters/ExternalAccountIDParameter"
        }
      ],
      "get": {
        "summary": "Retrieve an External Account object",
        "description": "Retrieve an External Account object (banks, debit cards etc) from the passed in customer ID and External Account ID",
        "tags": [
          "External Accounts"
        ],
        "responses": {
          "200": {
            "description": "Successful External Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                },
                "examples": {
                  "SuccessfulExternalAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulExternalAccountResponse"
                  },
                  "SuccessfulIbanExternalAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulIbanExternalAccountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "summary": "Update an External Account",
        "tags": [
          "External Accounts"
        ],
        "requestBody": {
          "description": "External Account details to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id",
                  "type"
                ],
                "$ref": "#/components/schemas/UpdateExternalAccountInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "External Account object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadExternalAccountUpdateError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a single External Account object",
        "tags": [
          "External Accounts"
        ],
        "description": "Delete an External Account object from the passed in External Account ID",
        "responses": {
          "200": {
            "description": "Successfully deleted External Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                },
                "examples": {
                  "DeletedExternalAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulExternalAccountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/associated_persons": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerIDParameter"
        }
      ],
      "get": {
        "summary": "Get associated persons for a business customer (Beta)",
        "tags": [
          "Customers"
        ],
        "description": "Get all associated persons for a business customer.",
        "responses": {
          "200": {
            "description": "List of associated persons (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AssociatedPersonsList",
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/AssociatedPersonResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "AssociatedPersonsFound": {
                    "summary": "A non-empty list of associated persons",
                    "value": {
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulAssociatedPersonResponse/value"
                        }
                      ]
                    }
                  },
                  "NoAssociatedPersonsFound": {
                    "summary": "An empty list of associated persons",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Create a new associated person for a business customer (Beta)",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "New associated person to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociatedPerson"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Associated person created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedPersonResponse"
                },
                "examples": {
                  "SuccessfulAssociatedPersonResponse": {
                    "$ref": "#/components/examples/SuccessfulAssociatedPersonResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/associated_persons/{associatedPersonID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerIDParameter"
        },
        {
          "$ref": "#/components/parameters/AssociatedPersonIDParameter"
        }
      ],
      "get": {
        "summary": "Get a single associated person (Beta)",
        "tags": [
          "Customers"
        ],
        "description": "Retrieve an associated person by ID",
        "responses": {
          "200": {
            "description": "Successful associated person response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedPersonResponse"
                },
                "examples": {
                  "SuccessfulAssociatedPersonResponse": {
                    "$ref": "#/components/examples/SuccessfulAssociatedPersonResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "summary": "Update a single associated person",
        "tags": [
          "Customers"
        ],
        "requestBody": {
          "description": "Associated person data to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociatedPerson"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated associated person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedPersonResponse"
                },
                "examples": {
                  "SuccessfulAssociatedPersonResponse": {
                    "$ref": "#/components/examples/SuccessfulAssociatedPersonResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a single associated person",
        "tags": [
          "Customers"
        ],
        "description": "Delete an associated person by ID",
        "responses": {
          "200": {
            "description": "Successfully deleted associated person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedPersonResponse"
                },
                "examples": {
                  "SuccessfulAssociatedPersonResponse": {
                    "$ref": "#/components/examples/SuccessfulAssociatedPersonResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/external_accounts/{externalAccountID}/reactivate": {
      "post": {
        "summary": "Reactivate an External Account",
        "description": "Reactivate a previously deactivated External Account",
        "tags": [
          "External Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/ExternalAccountIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Reactivated External Account object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadExternalAccountReactivateError"
          }
        }
      }
    },
    "/customers/{customerID}/tos_acceptance_link": {
      "get": {
        "summary": "Retrieve a hosted URL for ToS acceptance for an existing customer",
        "tags": [
          "Customers"
        ],
        "description": "The page at the returned URL will guide the user through the Bridge Terms of Service (ToS) acceptance flow. This can be used by existing customers to accept a new version of the ToS.",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Hosted URL for ToS acceptance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "A hosted URL for ToS acceptance"
                    }
                  }
                },
                "examples": {
                  "TosAcceptanceLink": {
                    "summary": "A sample ToS acceptance link",
                    "value": {
                      "url": "https://dashboard.bridge.xyz/accept-terms-of-service?email=sage%40blick-mayer.example&t=74ea7c13-2b52-5073-bd12-6879f92b88dd"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/kyc_link": {
      "get": {
        "summary": "Retrieve a hosted KYC Link for an existing customer",
        "tags": [
          "Customers"
        ],
        "description": "The page at the returned URL will guide the user through a Bridge KYC flow. This can be used by existing customers to provide additional KYC information required for certain features or services that Bridge offers.\n\nFor example, to enable an existing customer to use the `SEPA`/`Euro` services, they are required to provide `proof of address`. An additional parameter, `endorsement=sepa`, can be included to request a KYC link specifically for this purpose",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/EndorsementParameter"
          },
          {
            "$ref": "#/components/parameters/RedirectUriParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Hosted URL for KYC",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "A hosted KYC link"
                    }
                  }
                },
                "examples": {
                  "KycLink": {
                    "summary": "A sample KYC link",
                    "value": {
                      "url": "https://bridge.withpersona.com/verify?inquiry-template-id=itmpl_NtIXpb9AbEYCPxGo5iRbc9d2&reference-id=75d2f259-6810-4cde-a9b9-83eca42b0ebf"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/transfers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerIDParameter"
        },
        {
          "$ref": "#/components/parameters/LimitParameter"
        },
        {
          "$ref": "#/components/parameters/TransferStartingAfterParameter"
        },
        {
          "$ref": "#/components/parameters/TransferEndingBeforeParameter"
        },
        {
          "$ref": "#/components/parameters/TxHashParameter"
        },
        {
          "$ref": "#/components/parameters/UpdatedAfterMsParameter"
        },
        {
          "$ref": "#/components/parameters/UpdatedBeforeMsParameter"
        },
        {
          "$ref": "#/components/parameters/TransferStateParameter"
        }
      ],
      "get": {
        "summary": "Get all transfers",
        "tags": [
          "Customers"
        ],
        "description": "Get all active and completed transfers for a customer.",
        "responses": {
          "200": {
            "description": "List of transfers (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Transfers",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of transfers returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/TransferResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "TransfersFound": {
                    "summary": "A non-empty list of transfers",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulOfframpTransferResponse2/value"
                        },
                        {
                          "$ref": "#/components/examples/SuccessfulOfframpTransferResponse/value"
                        }
                      ]
                    }
                  },
                  "NoTransfersFound": {
                    "summary": "An empty list of transfers",
                    "value": {
                      "count": 0,
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/tos_links": {
      "post": {
        "summary": "Request a hosted URL for ToS acceptance for new customer creation",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "description": "The URL endpoint returned will guide the user through a Bridge TOS flow. Signing this acceptance flow is a requirement for creating customers.",
        "responses": {
          "201": {
            "description": "A Bridge hosted URL for users to complete terms of service signing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "A Bridge hosted URL for users to complete terms of service signing."
                    }
                  }
                },
                "examples": {
                  "TosUrl": {
                    "summary": "A sample Bridge hosted URL",
                    "value": {
                      "data": {
                        "url": "https://dashboard.bridge.xyz/accept-terms-of-service?session_token=4d5d8c45-9feb-422a-bb5e-0fd32e3b3c53&redirect_uri=https%3A%2F%2Fgoogle.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/plaid_link_requests": {
      "post": {
        "summary": "Generate a Plaid Link token for a customer",
        "tags": [
          "Plaid"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Plaid Link token generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaidLinkRequest"
                },
                "examples": {
                  "PlaidLinkRequestSuccessResponse": {
                    "$ref": "#/components/examples/PlaidLinkRequestSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/plaid_exchange_public_token/{link_token}": {
      "post": {
        "summary": "Exchange Plaid public token for an access token",
        "tags": [
          "Plaid"
        ],
        "parameters": [
          {
            "name": "link_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Plaid Link token"
          }
        ],
        "requestBody": {
          "description": "Plaid public token to be exchanged",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id",
                  "type"
                ],
                "$ref": "#/components/schemas/PlaidExchangePublicToken"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plaid public token exchanged",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Plaid public token exchanged",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message indicating the status of the request"
                    }
                  }
                },
                "examples": {
                  "PlaidExchangePublicTokenSuccessResponse": {
                    "$ref": "#/components/examples/PlaidExchangePublicTokenSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/transfers": {
      "get": {
        "summary": "Get all transfers",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/TransferStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/TransferEndingBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/TxHashParameter"
          },
          {
            "$ref": "#/components/parameters/UpdatedAfterMsParameter"
          },
          {
            "$ref": "#/components/parameters/UpdatedBeforeMsParameter"
          },
          {
            "$ref": "#/components/parameters/TemplateIDParameter"
          },
          {
            "$ref": "#/components/parameters/TransferStateParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of transfers (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Transfers",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of transfers returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/TransferResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "TransfersFound": {
                    "summary": "A non-empty list of transfers",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulOfframpTransferResponse2"
                        },
                        {
                          "$ref": "#/components/examples/SuccessfulOfframpTransferResponse"
                        }
                      ]
                    }
                  },
                  "NoTransfersFound": {
                    "summary": "An empty list of transfers",
                    "value": {
                      "count": 0,
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Create a transfer",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "Transfer object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transfer object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                },
                "examples": {
                  "SuccessfulOfframpTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulOfframpTransferResponse"
                  },
                  "SuccessfulOfframpWithMemoTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulOfframpWithMemoTransferResponse"
                  },
                  "SuccessfulWireOnrampTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulWireOnrampTransferResponse"
                  },
                  "SuccessfulAchOnrampTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulAchOnrampTransferResponse"
                  },
                  "SuccessfulSepaOnrampTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulSepaOnrampTransferResponse"
                  },
                  "SuccessfulSepaOfframpTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulSepaOfframpTransferResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "403": {
            "$ref": "#/components/responses/TransferAmlError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/transfers/{transferID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/TransferIDParameter"
        }
      ],
      "get": {
        "summary": "Get a transfer",
        "description": "Retrieve a transfer object from the passed in transfer ID",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Successful transfer object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                },
                "examples": {
                  "SuccessfulOfframpTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulOfframpTransferResponse"
                  },
                  "SuccessfulWireOnrampTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulWireOnrampTransferResponse"
                  },
                  "SuccessfulAchOnrampTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulAchOnrampTransferResponse"
                  },
                  "SuccessfulSepaOnrampTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulSepaOnrampTransferResponse"
                  },
                  "SuccessfulSepaOfframpTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulSepaOfframpTransferResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "summary": "Update a transfer",
        "description": "Update a transfer that was previously created. Must be in the awaiting_funds state.",
        "tags": [
          "Transfers"
        ],
        "requestBody": {
          "description": "Transfer object to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transfer object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                },
                "examples": {
                  "SuccessfulOfframpTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulOfframpTransferResponse"
                  },
                  "SuccessfulWireOnrampTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulWireOnrampTransferResponse"
                  },
                  "SuccessfulAchOnrampTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulAchOnrampTransferResponse"
                  },
                  "SuccessfulSepaOnrampTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulSepaOnrampTransferResponse"
                  },
                  "SuccessfulSepaOfframpTransferResponse": {
                    "$ref": "#/components/examples/SuccessfulSepaOfframpTransferResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "403": {
            "$ref": "#/components/responses/TransferAmlError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a transfer",
        "description": "Delete a transfer that was previously created. Must be in the awaiting_funds state.",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Successful deletion of transfer"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/transfers/static_templates": {
      "get": {
        "summary": "Get all static templates",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/TransferStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/TransferEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of static templates (the returned list is empty if none found). Static templates are transfers that are used as templates for other transfers and can be created using the static_templates feature flag.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Static Templates",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of static templates returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/TransferResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "TransfersFound": {
                    "summary": "A non-empty list of static templates",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulOfframpTransferResponse2"
                        },
                        {
                          "$ref": "#/components/examples/SuccessfulOfframpTransferResponse"
                        }
                      ]
                    }
                  },
                  "NoTransfersFound": {
                    "summary": "An empty list of static templates",
                    "value": {
                      "count": 0,
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/prefunded_accounts": {
      "get": {
        "summary": "Get a list of all Prefunded Account",
        "tags": [
          "Prefunded Accounts"
        ],
        "description": "Retrieve a all Prefunded Accounts",
        "responses": {
          "200": {
            "description": "List of prefunded accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Prefunded Accounts",
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/PrefundedAccount"
                      }
                    }
                  }
                },
                "examples": {
                  "PrefundedAccountsFound": {
                    "summary": "A non-empty list of prefunded accounts",
                    "value": {
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulPrefundedAccountResponse/value"
                        }
                      ]
                    }
                  },
                  "NoPrefundedAccountsFound": {
                    "summary": "An empty list of prefunded accounts",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/prefunded_accounts/{prefundedAccountID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/PrefundedAccountIDParameter"
        }
      ],
      "get": {
        "summary": "Get details for a specific Prefunded Account",
        "tags": [
          "Prefunded Accounts"
        ],
        "description": "Retrieve a Prefunded Account",
        "responses": {
          "200": {
            "description": "Successful Prefunded Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrefundedAccount"
                },
                "examples": {
                  "SuccessfulPrefundedAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulPrefundedAccountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/prefunded_accounts/{prefundedAccountID}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/PrefundedAccountIDParameter"
        },
        {
          "$ref": "#/components/parameters/LimitParameter"
        },
        {
          "$ref": "#/components/parameters/PrefundedAccountHistoryStartingAfterParameter"
        },
        {
          "$ref": "#/components/parameters/PrefundedAccountHistoryEndingBeforeParameter"
        }
      ],
      "get": {
        "summary": "Get funding history of a Prefunded Account",
        "tags": [
          "Prefunded Accounts"
        ],
        "description": "Retrieve the funding events and returns for a Prefunded Account",
        "responses": {
          "200": {
            "description": "Successful Prefunded Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrefundedAccountHistory"
                },
                "examples": {
                  "SuccessfulCustomerResponse": {
                    "$ref": "#/components/examples/SuccessfulPrefundedAccountHistoryResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/wallets": {
      "get": {
        "summary": "Get all Bridge Wallets for a customer",
        "description": "List of Bridge Wallets for the specified Customer ID",
        "tags": [
          "Bridge Wallets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/BridgeWalletStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/BridgeWalletEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Bridge Wallets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeWalletsList"
                },
                "examples": {
                  "SuccessfulBridgeWalletListResponse": {
                    "$ref": "#/components/examples/SuccessfulBridgeWalletListResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Create a Bridge Wallet",
        "tags": [
          "Bridge Wallets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "Bridge Wallet to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBridgeWallet"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bridge Wallet created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBridgeWalletResponse"
                },
                "examples": {
                  "SuccessfulLiquidationAddressCreateResponse": {
                    "$ref": "#/components/examples/SuccessfulBridgeWalletCreateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/wallets/{bridgeWalletID}": {
      "get": {
        "summary": "Get a Bridge Wallet",
        "description": "Retrieve a Bridge Wallet for the specified Bridge Wallet ID",
        "tags": [
          "Bridge Wallets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/BridgeWalletIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Bridge Wallet object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeWalletWithBalances"
                },
                "examples": {
                  "SuccessfulLiquidationAddressGetResponse": {
                    "$ref": "#/components/examples/SuccessfulBridgeWalletGetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/liquidation_addresses": {
      "post": {
        "summary": "Create a Liquidation Address",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "Liquidation Address object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLiquidationAddress"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Liquidation Address object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLiquidationAddressResponse"
                },
                "examples": {
                  "SuccessfulLiquidationAddressCreateResponse": {
                    "$ref": "#/components/examples/SuccessfulLiquidationAddressCreateResponse"
                  },
                  "SuccessfulSepaLiquidationAddressCreateResponse": {
                    "$ref": "#/components/examples/SuccessfulSepaLiquidationAddressCreateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "get": {
        "summary": "Get all Liquidation Addresses for a customer",
        "description": "Get Liquidation Addresses",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/LiquidationScheduleStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/LiquidationScheduleEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Liquidation Addresses (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Liquidation Addresses",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/LiquidationAddress"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/liquidation_addresses": {
      "get": {
        "summary": "Get all Liquidation Addresses",
        "description": "Get Liquidation Addresses",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/LiquidationScheduleStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/LiquidationScheduleEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Liquidation Addresses (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Liquidation Addresses",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/LiquidationAddress"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/liquidation_addresses/{liquidationAddressID}": {
      "get": {
        "summary": "Get a Liquidation Address",
        "description": "Retrieve a Liquidation Address for the specified Liquidation Address ID",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/LiquidationAddressIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Liquidation Address object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiquidationAddress"
                },
                "examples": {
                  "SuccessfulLiquidationAddressGetResponse": {
                    "$ref": "#/components/examples/SuccessfulLiquidationAddressGetResponse"
                  },
                  "SuccessfulSepaLiquidationAddressGetResponse": {
                    "$ref": "#/components/examples/SuccessfulSepaLiquidationAddressGetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "summary": "Update a Liquidation Address",
        "description": "Update a Liquidation Address for the specified liquidation address ID. Note that `external_account_id` and `custom_developer_fee_percent` can be updated independently and are not both required.",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/LiquidationAddressIDParameter"
          }
        ],
        "requestBody": {
          "description": "Liquidation Address details to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLiquidationAddress"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Liquidation Address object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiquidationAddress"
                },
                "examples": {
                  "SuccessfulLiquidationAddressUpdateResponse": {
                    "$ref": "#/components/examples/SuccessfulLiquidationAddressGetResponse"
                  },
                  "SuccessfulSepaLiquidationAddressUpdateResponse": {
                    "$ref": "#/components/examples/SuccessfulSepaLiquidationAddressGetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/liquidation_addresses/{liquidationAddressID}/drains": {
      "get": {
        "summary": "Get drain history of a Liquidation Address",
        "description": "Get drain history of a Liquidation Address",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/LiquidationAddressIDParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/DrainStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/DrainEndingBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/UpdatedAfterMsParameter"
          },
          {
            "$ref": "#/components/parameters/UpdatedBeforeMsParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of drains (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Drain"
                    }
                  }
                },
                "examples": {
                  "DrainsToCryptoFound": {
                    "$ref": "#/components/examples/SuccessfulLiquidationAddressDrainsToCryptoResponse"
                  },
                  "DrainsToFiatFound": {
                    "$ref": "#/components/examples/SuccessfulLiquidationAddressDrainsToFiatResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/liquidation_addresses/{liquidationAddressID}/balances": {
      "get": {
        "summary": "Get the balance of a Liquidation Address (deprecated)",
        "description": "Get the balance of a Liquidation Address. Note that most Liquidation Addresses no longer hold a balance. To check recent activity on a Liquidation Address, use the `/customers/{customerID}/liquidation_addresses/{liquidationAddressID}/drains` endpoint.",
        "deprecated": true,
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/LiquidationAddressIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the current balance of a Liquidation Address",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Balance"
                    }
                  }
                },
                "examples": {
                  "DrainsFound": {
                    "$ref": "#/components/examples/SuccessfulLiquidationAddressBalanceResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts": {
      "post": {
        "summary": "Create a Virtual Account",
        "description": "Create a Virtual Account or Virtual IBAN for the specified customer",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          }
        ],
        "requestBody": {
          "description": "Virtual Account object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVirtualAccount"
              },
              "examples": {
                "us": {
                  "summary": "Virtual Account",
                  "value": {
                    "developer_fee_percent": "0.1",
                    "source": {
                      "currency": "usd"
                    },
                    "destination": {
                      "currency": "usdc",
                      "payment_rail": "base",
                      "address": "0xdeadbeef"
                    }
                  }
                },
                "eu": {
                  "summary": "Virtual IBAN",
                  "value": {
                    "developer_fee_percent": "0.1",
                    "source": {
                      "currency": "eu"
                    },
                    "destination": {
                      "currency": "eurc",
                      "payment_rail": "solana",
                      "adddress": "DeAdBeEf"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Virtual Account object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountResponse"
                },
                "examples": {
                  "us": {
                    "summary": "Virtual Account",
                    "value": {
                      "id": "59waova4hbt1vhabj3jo7don6j1mj5peq8i8rhc5l1",
                      "status": "activated",
                      "developer_fee_percent": "0.1",
                      "source_deposit_instructions\"": {
                        "currency": "usd",
                        "payment_rails": [
                          "ach_push",
                          "wire"
                        ],
                        "bank_name": "Lead Bank",
                        "bank_address": "1801 Main St., Kansas City, MO 64108",
                        "bank_beneficiary_name\"": "Customer Name",
                        "bank_beneficiary_address\"": "1234 Main St., Kansas City, MO 64108",
                        "bank_account_number\"": "123456789",
                        "bank_routing_number\"": "87654321"
                      },
                      "destination": {
                        "currency": "usdc",
                        "payment_rail": "polygon",
                        "address": "0xdeadbeef"
                      }
                    }
                  },
                  "eu": {
                    "summary": "Virtual IBAN",
                    "value": {
                      "id": "59waova4hbt1vhabj3jo7don6j1mj5peq8i8rhc5l1",
                      "status": "activated",
                      "developer_fee_percent": "0.1",
                      "source_deposit_instructions\"": {
                        "currency": "eur",
                        "payment_rails": [
                          "sepa"
                        ],
                        "iban": "X6099",
                        "bic": "MODRIE22XXX",
                        "account_holder_name": "Bridge Building Sp.z.o.o.",
                        "bank_name": "Modulr Finance, Ireland Branch",
                        "bank_address": "Floor 6, 2 Grand Canal Square, Dublin, Ireland"
                      },
                      "destination": {
                        "currency": "eurc",
                        "payment_rail": "solana",
                        "address": "DeAdBeEf"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Virtual Accounts by Customer",
        "description": "List all Virtual Account objects for a customer",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/FiatInstructionsActivationStatusParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/VirtualAccountStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/VirtualAccountEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Virtual Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Virtual Accounts",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/VirtualAccountResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts/{virtualAccountID}": {
      "get": {
        "summary": "Get a Virtual Account",
        "description": "Retrieve the Virtual Account object from the passed ID",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/VirtualAccountIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Virtual Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Virtual Account",
        "description": "Update instructions for an existing Virtual Account",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/VirtualAccountIDParameter"
          }
        ],
        "requestBody": {
          "description": "The Virtual Account details to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVirtualAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Virtual Account object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts/{virtualAccountID}/deactivate": {
      "post": {
        "summary": "Deactivate a Virtual Account",
        "description": "Deactivate a Virtual Account to prevent it from acceping new incoming transactions",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/VirtualAccountIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivated Virtual Account object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/VirtualAccountResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "example": "deactivated"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts/{virtualAccountID}/reactivate": {
      "post": {
        "summary": "Reactivate a Virtual Account",
        "description": "Reactivate a previously deactivated Virtual Account",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/VirtualAccountIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Reactivated Virtual Account object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts/{virtualAccountID}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerIDParameter"
        },
        {
          "$ref": "#/components/parameters/VirtualAccountIDParameter"
        },
        {
          "$ref": "#/components/parameters/TxHashParameter"
        },
        {
          "$ref": "#/components/parameters/LimitParameter"
        },
        {
          "$ref": "#/components/parameters/EventStartingAfterParameter"
        },
        {
          "$ref": "#/components/parameters/EventEndingBeforeParameter"
        },
        {
          "$ref": "#/components/parameters/EventTypeParameter"
        }
      ],
      "get": {
        "summary": "Virtual Account Activity",
        "tags": [
          "Virtual Accounts"
        ],
        "description": "History of activity for a Virtual Account",
        "responses": {
          "200": {
            "description": "List of Virtual Account events",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Virtual Account history",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of events returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/VirtualAccountEvent"
                      }
                    }
                  }
                },
                "examples": {
                  "History": {
                    "summary": "A list of event history for the Virtual Account",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "$ref": "#/components/examples/VirtualAccountPaymentSubmmittedEventFromAchPush"
                        },
                        {
                          "$ref": "#/components/examples/VirtualAccountFundsReceivedEventFromAchPush"
                        },
                        {
                          "$ref": "#/components/examples/VirtualAccountPaymentProcessedEventFromSpei"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/static_memos": {
      "get": {
        "summary": "List Static Memos",
        "description": "List all Static Memo objects",
        "tags": [
          "Static Memos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FiatInstructionsActivationStatusParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/StaticMemoStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/StaticMemoEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Static Memos",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Static Memos",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/StaticMemoResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/static_memos": {
      "post": {
        "summary": "Create a Static Memo",
        "description": "Create a Static Memo for the specified customer",
        "tags": [
          "Static Memos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          }
        ],
        "requestBody": {
          "description": "Liquidation Address object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStaticMemo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Static Memo object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticMemoResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Static Memos for Customer",
        "description": "List all Static Memo objects for a customer",
        "tags": [
          "Static Memos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/FiatInstructionsActivationStatusParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/StaticMemoStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/StaticMemoEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Static Memos",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Static Memos",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/StaticMemoResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/static_memos/{staticMemoID}": {
      "get": {
        "summary": "Get a Static Memo",
        "description": "Retrieve the Static Memo object from the passed ID",
        "tags": [
          "Static Memos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/StaticMemoIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful static memo object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticMemoResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Static Memo",
        "description": "Update instructions for an existing Static Memo",
        "tags": [
          "Static Memos"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/StaticMemoIDParameter"
          }
        ],
        "requestBody": {
          "description": "The Static Memo details to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStaticMemo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Static Memo object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticMemoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/pin": {
      "post": {
        "summary": "Create Card PIN Update URL",
        "description": "Generates a URL that can be used to render a secure frame to update the PIN for a card account. The URL is single-use and time-limited.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "name": "cardAccountID",
            "in": "path",
            "required": true,
            "description": "The ID of the card account",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "URL to update the card PIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardPinUpdateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/ephemeral_keys": {
      "post": {
        "summary": "Generate an Ephemeral Key to Reveal Card Details",
        "description": "Generates a one-time ephemeral key that can be used to reveal card details. Please see the integration guide on [safely revealing card details](https://apidocs.bridge.xyz/docs/safely-reveal-card-details-to-customers) for more information.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "name": "cardAccountID",
            "in": "path",
            "required": true,
            "description": "The ID of the card account",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The client-side nonce that will be associated with the ephemeral key",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCardAccountEphemeralKeyInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ephemeral key to reveal card details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardAccountEphemeralKeyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/static_memos/{staticMemoID}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerIDParameter"
        },
        {
          "$ref": "#/components/parameters/StaticMemoIDParameter"
        },
        {
          "$ref": "#/components/parameters/TxHashParameter"
        },
        {
          "$ref": "#/components/parameters/LimitParameter"
        },
        {
          "$ref": "#/components/parameters/EventStartingAfterParameter"
        },
        {
          "$ref": "#/components/parameters/EventEndingBeforeParameter"
        },
        {
          "$ref": "#/components/parameters/EventTypeParameter"
        }
      ],
      "get": {
        "summary": "Static Memo Activity",
        "tags": [
          "Static Memos"
        ],
        "description": "History of activity for a Static Memo",
        "responses": {
          "200": {
            "description": "List of Static Memo events",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Static Memo history",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of events returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/StaticMemoEvent"
                      }
                    }
                  }
                },
                "examples": {
                  "History": {
                    "summary": "A list of event history for the Static Memo",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "$ref": "#/components/examples/StaticMemoPaymentSubmittedEventFromAchPush"
                        },
                        {
                          "$ref": "#/components/examples/StaticMemoFundsReceivedEventFromAchPush"
                        },
                        {
                          "$ref": "#/components/examples/StaticMemoPaymentSubmittedEventFromWire"
                        },
                        {
                          "$ref": "#/components/examples/StaticMemoFundsReceivedEventFromWire"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/batch_settlement_schedules": {
      "post": {
        "summary": "Create a Batch Settlement Schedule",
        "description": "Creates a Batch Settlement Schedule that can be used as the destination of a liquidation address.",
        "tags": [
          "Batch Settlements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBatchSettlementSchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Batch Settlement Schedule object created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Batch Settlement Schedule",
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/Id",
                      "description": "ID of the batch settlement schedule"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/virtual_accounts": {
      "get": {
        "summary": "List Virtual Accounts",
        "description": "List all Virtual Account objects",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FiatInstructionsActivationStatusParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/VirtualAccountStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/VirtualAccountEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Virtual Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Virtual Accounts",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/VirtualAccountResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/virtual_accounts/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/TxHashParameter"
        },
        {
          "$ref": "#/components/parameters/LimitParameter"
        },
        {
          "$ref": "#/components/parameters/EventStartingAfterParameter"
        },
        {
          "$ref": "#/components/parameters/EventEndingBeforeParameter"
        },
        {
          "$ref": "#/components/parameters/EventTypeParameter"
        },
        {
          "$ref": "#/components/parameters/UpdatedAfterMsParameter"
        },
        {
          "$ref": "#/components/parameters/UpdatedBeforeMsParameter"
        }
      ],
      "get": {
        "summary": "Virtual Account Activity Across All Customers",
        "tags": [
          "Virtual Accounts"
        ],
        "description": "History of activity across all customers and Virtual Accounts",
        "responses": {
          "200": {
            "description": "List of Virtual Account events",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Virtual Account history",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of events returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/VirtualAccountEvent"
                      }
                    }
                  }
                },
                "examples": {
                  "History": {
                    "summary": "A list of event history across all customers and Virtual Accounts",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "$ref": "#/components/examples/VirtualAccountPaymentSubmmittedEventFromAchPush"
                        },
                        {
                          "$ref": "#/components/examples/VirtualAccountFundsReceivedEventFromAchPush"
                        },
                        {
                          "$ref": "#/components/examples/VirtualAccountPaymentProcessedEventFromSpei"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/developer/fees": {
      "get": {
        "summary": "Get the configured fees",
        "description": "Get fees that have been configured for supported products.",
        "tags": [
          "Developers"
        ],
        "responses": {
          "200": {
            "description": "The configured fees for your developer account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperFees"
                },
                "examples": {
                  "SuccessfulResponse": {
                    "summary": "The fees configured for the account.",
                    "value": {
                      "$ref": "#/components/examples/SuccessfulDeveloperFeesShowResponse/value"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Update the configured fees",
        "description": "Update fees for supported products.",
        "tags": [
          "Developers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "The default fee percent that will be applied to all your Liquidation Addresses. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperFees"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The configured fees have been updated for your developer account.",
            "content": {
              "application/json": {
                "examples": {
                  "SuccessfulResponse": {
                    "summary": "The fees have been updated.",
                    "value": {
                      "$ref": "#/components/examples/SuccessfulDeveloperFeesUpdateResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/developer/fee_external_account": {
      "get": {
        "summary": "Get the configured fee External Account",
        "description": "Get the configured fee External Account.",
        "tags": [
          "Developers"
        ],
        "responses": {
          "200": {
            "description": "Get the configured fee External Account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                },
                "examples": {
                  "SuccessfulExternalAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulExternalAccountResponse"
                  },
                  "SuccessfulIbanExternalAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulIbanExternalAccountResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Configure a fee External Account",
        "description": "Configure a fee External Account.",
        "tags": [
          "Developers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "New External Account object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id",
                  "type"
                ],
                "$ref": "#/components/schemas/ExternalAccount"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "External Account object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponse"
                },
                "examples": {
                  "SuccessfulExternalAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulExternalAccountResponse"
                  },
                  "SuccessfulIbanExternalAccountResponse": {
                    "$ref": "#/components/examples/SuccessfulIbanExternalAccountResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/developer/cards/summary": {
      "get": {
        "summary": "Get a summary of your card program",
        "description": "Get a summary of your card program, optionally for a specific period.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CardProgramSummaryPeriodParameter"
          },
          {
            "$ref": "#/components/parameters/CardProgramSummaryPeriodKeyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The summary of a card program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardProgramSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/kyc_links": {
      "post": {
        "summary": "Generate the Links needs to complete KYC for an individual or business",
        "tags": [
          "KYC Links"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "Information about the customer to create KYC Links for",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKycLinks"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "KYC Links generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualKycLinkResponse"
                },
                "examples": {
                  "SuccessfulLiquidationAddressCreateResponse": {
                    "summary": "KYC Links generated",
                    "$ref": "#/components/examples/SuccessfulKycLinkCreateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "get": {
        "summary": "Get all KYC links.",
        "description": "Retrieve the full list of kyc links.",
        "tags": [
          "KYC Links"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/KycLinksCustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/KycLinksEmailParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerEndingBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful KYC links status response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Kyc Links",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/IndividualKycLinkResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "KycLinksGetResponse": {
                    "summary": "KYC link status for multiple customers",
                    "$ref": "#/components/examples/KycLinksGetResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/kyc_links/{kycLinkID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/KycLinkIDParameter"
        }
      ],
      "get": {
        "summary": "Check the status of a KYC link",
        "description": "Retrieve the status of a KYC request from the passed in KYC link id",
        "tags": [
          "KYC Links"
        ],
        "responses": {
          "200": {
            "description": "Successful KYC link status response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndividualKycLinkResponse"
                },
                "examples": {
                  "ApprovedKYCLinkGetResponse": {
                    "summary": "KYC link status for an approved customer",
                    "$ref": "#/components/examples/ApprovedKycLinkGetResponse"
                  },
                  "RejectedKYCLinkGetResponse": {
                    "summary": "KYC link status for a rejected customer",
                    "$ref": "#/components/examples/RejectedKycLinkGetResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/static_memos/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/TxHashParameter"
        },
        {
          "$ref": "#/components/parameters/LimitParameter"
        },
        {
          "$ref": "#/components/parameters/EventStartingAfterParameter"
        },
        {
          "$ref": "#/components/parameters/EventEndingBeforeParameter"
        },
        {
          "$ref": "#/components/parameters/EventTypeParameter"
        }
      ],
      "get": {
        "summary": "Static Memo Activity Across All Customers",
        "tags": [
          "Static Memos"
        ],
        "description": "History of activity across all customers and Virtual Accounts",
        "responses": {
          "200": {
            "description": "List of Static Memo events",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Static Memo history",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of events returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/StaticMemoEvent"
                      }
                    }
                  }
                },
                "examples": {
                  "History": {
                    "summary": "A list of event history across all customers and Virtual Accounts",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "$ref": "#/components/examples/StaticMemoPaymentSubmittedEventFromAchPush"
                        },
                        {
                          "$ref": "#/components/examples/StaticMemoFundsReceivedEventFromAchPush"
                        },
                        {
                          "$ref": "#/components/examples/StaticMemoPaymentSubmittedEventFromWire"
                        },
                        {
                          "$ref": "#/components/examples/StaticMemoFundsReceivedEventFromWire"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "summary": "Get all webhook endpoints",
        "description": "Get the full list of active and disabled webhook endpoints configured on Bridge",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "List of webhook endpoints (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhooks",
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/Webhook"
                      }
                    }
                  }
                },
                "examples": {
                  "WebhooksFound": {
                    "summary": "A non-empty list of webhook endpoints",
                    "value": {
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulWebhookResponse"
                        },
                        {
                          "$ref": "#/components/examples/SuccessfulWebhookResponse2"
                        }
                      ]
                    }
                  },
                  "NoWebhooksFound": {
                    "summary": "An empty list of webhook endpoints",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Create a webhook endpoint",
        "description": "Create a new webhook endpoint to receive events from Bridge. Webhook endpoints begin in a disabled state and can be enabled with a PUT request. A maximum of 5 webhooks can be active or disabled at one time. Webhook endpoints can be created in Sandbox, but no webhook events will be sent.",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "Information about the webhook endpoint to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhook"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook endpoint created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                },
                "examples": {
                  "SuccessfulWebhookCreateResponse": {
                    "summary": "Webhook created",
                    "$ref": "#/components/examples/SuccessfulWebhookCreateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/webhooks/{webhookID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WebhookIDParameter"
        }
      ],
      "put": {
        "summary": "Update a webhook",
        "description": "Update the specified webhook object",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "description": "Updated webhook endpoint object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutWebhookPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful webhook object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                },
                "examples": {
                  "SuccessfulWebhookResponse": {
                    "$ref": "#/components/examples/SuccessfulWebhookUpdateResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a webhook",
        "tags": [
          "Webhooks"
        ],
        "description": "Delete the specified webhook object. This webhook will no longer be accessible via API.",
        "responses": {
          "200": {
            "description": "Successfully deleted webhook response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                },
                "examples": {
                  "DeletedCustomerResponse": {
                    "$ref": "#/components/examples/SuccessfulWebhookDeleteResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/webhooks/{webhookID}/events": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WebhookIDParameter"
        }
      ],
      "get": {
        "summary": "List upcoming events",
        "description": "List the next 10 events that will be delivered to the specified webhook.",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "List of events (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook Events",
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/WebhookEvent"
                      }
                    }
                  }
                },
                "examples": {
                  "WebhookEventsFound": {
                    "summary": "A non-empty list of webhook events",
                    "value": {
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulWebhookEventsResponse"
                        }
                      ]
                    }
                  },
                  "NoWebhooksFound": {
                    "summary": "An empty list of webhook events",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/webhooks/{webhookID}/logs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WebhookIDParameter"
        }
      ],
      "get": {
        "summary": "View logs",
        "description": "Display the most recent logs for deliveries to the specified webhook.",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Recent delivery looks for the webhook (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Delivery Logs",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of logs returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/WebhookEventDeliveryLog"
                      }
                    }
                  }
                },
                "examples": {
                  "WebhookEventsFound": {
                    "summary": "A non-empty list of webhook events",
                    "value": {
                      "count": 1,
                      "data": [
                        {
                          "$ref": "#/components/examples/SuccessfulWebhookLogsResponse/value"
                        }
                      ]
                    }
                  },
                  "NoWebhookEventsFound": {
                    "summary": "An empty list of webhook events",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/webhooks/{webhookID}/send": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WebhookIDParameter"
        },
        {
          "$ref": "#/components/parameters/IdempotencyKeyParameter"
        }
      ],
      "post": {
        "summary": "Send event",
        "description": "Send an event to the specified webhook endpoint. This will not effect other events in the delivery queue. This operation is possible for both active and disabled webhook endpoints.",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "description": "Specify the event to send to your endpoint.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendWebhookPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook Event Sent",
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message indicating the status of the request"
                    }
                  }
                },
                "examples": {
                  "WebhookEventSendSuccessResponse": {
                    "$ref": "#/components/examples/WebhookEventSendSuccessResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/associated_persons/{associatedPersonID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AssociatedPersonIDParameter"
        }
      ],
      "get": {
        "summary": "Get a single associated person (Beta)",
        "tags": [
          "Associated Persons (Beta)"
        ],
        "description": "Retrieve an associated person by ID",
        "responses": {
          "200": {
            "description": "Successful associated person response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedPersonResponse"
                },
                "examples": {
                  "SuccessfulAssociatedPersonResponse": {
                    "$ref": "#/components/examples/SuccessfulAssociatedPersonResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "summary": "Update a single associated person",
        "tags": [
          "Associated Persons (Beta)"
        ],
        "requestBody": {
          "description": "Associated person data to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociatedPerson"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated associated person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedPersonResponse"
                },
                "examples": {
                  "SuccessfulAssociatedPersonResponse": {
                    "$ref": "#/components/examples/SuccessfulAssociatedPersonResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a single associated person",
        "tags": [
          "Associated Persons (Beta)"
        ],
        "description": "Delete an associated person by ID",
        "responses": {
          "200": {
            "description": "Successfully deleted associated person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedPersonResponse"
                },
                "examples": {
                  "SuccessfulAssociatedPersonResponse": {
                    "$ref": "#/components/examples/SuccessfulAssociatedPersonResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/exchange_rates": {
      "get": {
        "summary": "Get current exchange rate between two currencies.",
        "description": "Returns the current exchange rate from the \"from\" currency to the \"to\" currency. The exchange rate is updated roughly every 30s. Note that as of this writing, Bridge does not offer a \"quote\" by which a user can lock in a rate for a given amount of time. This is provided only as a courtesy to estimate what you are likely to get in a subsequent transfer request that involves currency exchange.\nAs of December 2024, we support: - USD - EUR - USD - MXN - BTC - USD - ETH - USD - SOL - USD\n",
        "tags": [
          "Exchange Rates"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "required": true,
            "description": "The currency code to convert from.",
            "example": "usd",
            "schema": {
              "type": "string",
              "enum": [
                "usd",
                "eur",
                "btc",
                "eth",
                "sol"
              ]
            }
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "description": "The currency code to convert to.",
            "example": "eur",
            "schema": {
              "type": "string",
              "enum": [
                "usd",
                "eur",
                "btc",
                "eth",
                "sol",
                "mxn"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The exchange rate information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "midmarket_rate": {
                      "type": "string",
                      "example": "0.93425",
                      "description": "The midmarket exchange rate."
                    },
                    "buy_rate": {
                      "type": "string",
                      "example": "0.9389",
                      "description": "The rate for buying the target currency, including Bridge's fee."
                    },
                    "sell_rate": {
                      "type": "string",
                      "example": "0.9296",
                      "description": "The rate for selling the target currency, including Bridge's fee."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lists/occupation_codes": {
      "get": {
        "summary": "Get occupation codes",
        "description": "Provide this list of occupation codes to your users as possible answers to the Source of Funds section in the KYC flow. The returned list will resemble the list of occupation codes found [here](https://apidocs.bridge.xyz/page/sof-eu-most-recent-occupation-list).\n",
        "tags": [
          "Lists"
        ],
        "responses": {
          "200": {
            "description": "The list of occupations that can be used during the KYC flow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "display_name": {
                        "type": "string",
                        "example": "Accountant and auditor",
                        "description": "Human readable name that customers can select."
                      },
                      "code": {
                        "type": "string",
                        "example": "132011",
                        "description": "The corresponding code that should be sent to the Bridge API representing the customers selection."
                      }
                    }
                  }
                },
                "examples": {
                  "OccupationCodesSuccessResponse": {
                    "$ref": "#/components/examples/OccupationCodesSuccessResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lists/countries": {
      "get": {
        "summary": "Get countries",
        "description": "Returns a list of countries and subdivisions recognized by Bridge. Inclusion in this list does not guarantee Bridge product support for any country or subdivision.",
        "tags": [
          "Lists"
        ],
        "responses": {
          "200": {
            "description": "List of supported countries",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Countries",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "The total number of countries recognized by Bridge",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "description": "The list of countries recognized by Bridge",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/Country"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/crypto_return_policies": {
      "get": {
        "summary": "Get all crypto return policies",
        "tags": [
          "Crypto Return Policies"
        ],
        "description": "Retrieve all crypto return policies for the authenticated developer",
        "responses": {
          "200": {
            "description": "List of crypto return policies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CryptoReturnPolicy"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Create a new crypto return policy",
        "tags": [
          "Crypto Return Policies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          }
        ],
        "requestBody": {
          "description": "Crypto return policy object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCryptoReturnPoliciesInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Crypto return policy created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CryptoReturnPolicy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/crypto_return_policies/{policyID}": {
      "parameters": [
        {
          "name": "policyID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "summary": "Update an existing crypto return policy",
        "tags": [
          "Crypto Return Policies"
        ],
        "requestBody": {
          "description": "Crypto return policy object to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCryptoReturnPoliciesInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Crypto return policy updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CryptoReturnPolicy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a single crypto return policy object",
        "tags": [
          "Crypto Return Policies"
        ],
        "description": "Delete a crypto return policy object from the passed in crypto return policy ID",
        "responses": {
          "200": {
            "description": "Successfully deleted crypto return policy object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CryptoReturnPolicy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerIDParameter"
        },
        {
          "$ref": "#/components/parameters/CardAccountIDParameter"
        }
      ],
      "get": {
        "summary": "Retrieve a card account",
        "tags": [
          "Cards"
        ],
        "description": "Retrieve the card account with the specified ID",
        "responses": {
          "200": {
            "description": "The retrieved card account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts": {
      "get": {
        "summary": "Get all card accounts",
        "tags": [
          "Cards"
        ],
        "description": "Retrieve all card accounts for a customer. Currently, only one account is supported. An empty array will be returned if no card has been provisioned",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all card accounts owned by the customer",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array of all card accounts",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of card accounts returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/CardAccount"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "summary": "Provision a card account",
        "description": "Provision a card account. Currently, only one account can be provisioned per customer",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          }
        ],
        "requestBody": {
          "description": "The card account to be provisioned",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCardAccountsInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The successfully created card account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardAccount"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/freeze": {
      "post": {
        "summary": "Place a freeze on the card account",
        "description": "Place a freeze on the card account",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          }
        ],
        "requestBody": {
          "description": "The freeze to be placed on the card account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCardFreezeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully placed freeze",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CardFreeze"
                    }
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The processing status of the freeze request",
                      "readOnly": true,
                      "enum": [
                        "freeze_created",
                        "freeze_replaced"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/unfreeze": {
      "post": {
        "summary": "Unfreeze the card account",
        "description": "Remove the freeze on the card account placed by the specified initiator",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          }
        ],
        "requestBody": {
          "description": "A request to unfreeze the card account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCardUnfreezeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully removed freeze",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardUnfreezeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/create_mobile_wallet_provisioning_request": {
      "post": {
        "summary": "Create a mobile wallet push provisioning request",
        "description": "Create a request to push-provision a virtual card to a mobile wallet. This endpoint is part of a multiple-step integration that must be completed with each mobile wallet partner",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          }
        ],
        "requestBody": {
          "description": "A mobile wallet push provisioning request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCardPushProvisioningInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A successful push provisioning response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardPushProvisioningResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/authorizations": {
      "get": {
        "summary": "Retrieve pending card authorizations",
        "description": "Retrieve pending card authorizations.\nNote: this endpoint is not paginated",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAuthorizationLimitParameter"
          },
          {
            "$ref": "#/components/parameters/StartingTimeParameter"
          },
          {
            "$ref": "#/components/parameters/EndingTimeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Pending card authorizations",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of pending card authorizations",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of card authorizations returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/CardAuthorization"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/transactions": {
      "get": {
        "summary": "Retrieve card transactions",
        "description": "Retrieve completed card transactions and card-related crypto transaction activities",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardTransactionLimitParameter"
          },
          {
            "$ref": "#/components/parameters/StartingTimeParameter"
          },
          {
            "$ref": "#/components/parameters/EndingTimeParameter"
          },
          {
            "$ref": "#/components/parameters/PageSizeParameter"
          },
          {
            "$ref": "#/components/parameters/PageNumberParameter"
          },
          {
            "$ref": "#/components/parameters/CardTransactionStatusParameter"
          },
          {
            "$ref": "#/components/parameters/CardTransactionPaginationTokenParameter"
          },
          {
            "$ref": "#/components/parameters/CardTransactionCategoryFamilyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Card transactions",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of card transactions",
                  "type": "object",
                  "required": [
                    "page",
                    "count",
                    "total_pages",
                    "total_count",
                    "data"
                  ],
                  "properties": {
                    "page": {
                      "type": "integer",
                      "description": "The current page number, starting at 1. Note that this will be returned only for navigating posted transactions."
                    },
                    "pagination_token": {
                      "type": "string",
                      "description": "The pagination token to be used to retrieve the next page of transactions. If not provided, use the `page` parameter to navigate by page number."
                    },
                    "count": {
                      "type": "integer",
                      "description": "The number of transactions returned"
                    },
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages"
                    },
                    "total_count": {
                      "type": "integer",
                      "description": "The total number of transactions"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/CardTransaction"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/transactions/{transactionID}": {
      "get": {
        "summary": "Retrieve a card transaction",
        "description": "Retrieve a card transaction with the specified ID",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardTransactionIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Card transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTransaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/auth_controls": {
      "get": {
        "summary": "Retrieve authorization controls",
        "description": "Retrieve the applicable spend limits for the given card account",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The authorization controls",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Authorization controls",
                  "type": "object",
                  "required": [
                    "customer_id",
                    "card_account_id",
                    "spending_limits"
                  ],
                  "properties": {
                    "customer_id": {
                      "type": "string",
                      "description": "The ID of the customer"
                    },
                    "card_account_id": {
                      "type": "string",
                      "description": "The ID of the card account"
                    },
                    "spending_limits": {
                      "type": "array",
                      "description": "The various spending limits for the card account for the current time period",
                      "items": {
                        "$ref": "#/components/schemas/CardSpendingLimit"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/deposit_addresses": {
      "post": {
        "summary": "Provision an additional top-up deposit address for the card account",
        "description": "Provision an additional deposit address for the card account, to allow topping up the card from multiple chains. This is only applicable to Bridge-custodied top-up card accounts. These additional deposit addresses will also be shown in the `additional_funding_instructions` field when fetching the card account details afterwards.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          }
        ],
        "requestBody": {
          "description": "The chain to provision the new deposit address on.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCardAccountDepositAddressInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Details of the successfully created deposit address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardAccountFundingInstructions"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/withdrawals": {
      "post": {
        "summary": "Create a funds withdrawal request",
        "description": "Request a funds withdrawal from the card account, applicable to top-up accounts only",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IdempotencyKeyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          }
        ],
        "requestBody": {
          "description": "The withdrawal request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardWithdrawal"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The successfully created card funds withdrawal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardWithdrawal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "get": {
        "summary": "Retrieve the withdrawal history of funds",
        "description": "Retrieve the withdrawal history of funds, applicable to top-up accounts only",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/WithdrawalStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/WithdrawalEndingBeforeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The withdrawal history",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List of withdrawals",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of withdrawals returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/CardWithdrawal"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/withdrawals/{cardWithdrawalID}": {
      "get": {
        "summary": "Retrieve a card withdrawal",
        "description": "Retrieve a card withdrawal with the specified ID, applicable to top-up accounts only",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardWithdrawalIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved withdrawal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardWithdrawal"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/customers/{customerID}/card_accounts/{cardAccountID}/statements/{period}.pdf": {
      "post": {
        "summary": "Generate a card account statement",
        "description": "Generate a card account statement for the specified period",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardAccountIDParameter"
          },
          {
            "$ref": "#/components/parameters/CardStatementPeriodParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The HTTP response that includes a PDF file as an attachment, with the `Content-Type` set to `application/pdf` and the `Content-Disposition` header configured to indicate it is a statement PDF attachment",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "description": "Indicates the content is an attachment with a statement PDF file",
                "schema": {
                  "type": "string",
                  "example": "inline; filename=\"statement_202412.pdf\"; filename*=UTF-8''statement_202412.pdf"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/liquidation_addresses/drains": {
      "get": {
        "summary": "Liquidation Address Activity Across All Customers",
        "description": "History of activity across all customers and Liquidation Addresses",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/DrainStartingAfterParameter"
          },
          {
            "$ref": "#/components/parameters/DrainEndingBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/UpdatedAfterMsParameter"
          },
          {
            "$ref": "#/components/parameters/UpdatedBeforeMsParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of drains for all liquidation addresses (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Liquidation Address history",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of events returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/Drain"
                      }
                    }
                  }
                },
                "examples": {
                  "DrainsToCryptoFound": {
                    "$ref": "#/components/examples/SuccessfulLiquidationAddressDrainsToCryptoResponse"
                  },
                  "DrainsToFiatFound": {
                    "$ref": "#/components/examples/SuccessfulLiquidationAddressDrainsToFiatResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/rewards/rates": {
      "get": {
        "summary": "Get the current reward rates",
        "description": "Get the current reward rates",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RewardRateSinceParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The current reward rates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardRate"
                },
                "examples": {
                  "ActiveRewardRate": {
                    "$ref": "#/components/examples/ActiveRewardRate"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/rewards/{currency}": {
      "get": {
        "summary": "Get a summary of all rewards for a given stablecoin",
        "description": "Get a summary of all rewards for a given stablecoin",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RewardCurrencyParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The summary of all rewards for a given stablecoin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperRewardSummary"
                },
                "examples": {
                  "RewardSummary": {
                    "$ref": "#/components/examples/DeveloperRewardSummary"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/rewards/{currency}/customer/{customerID}": {
      "get": {
        "summary": "Get a summary of a customer's rewards",
        "description": "Get a summary of a customer's rewards",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RewardCurrencyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The summary of a customer's rewards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerRewardSummary"
                },
                "examples": {
                  "CustomerRewardSummary": {
                    "$ref": "#/components/examples/CustomerRewardSummary"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/rewards/{currency}/customer/{customerID}/history": {
      "get": {
        "summary": "Get a history of a customer's rewards",
        "description": "Get a history of a customer's rewards",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RewardCurrencyParameter"
          },
          {
            "$ref": "#/components/parameters/CustomerIDParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The history of a customer's rewards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerRewardHistory"
                },
                "examples": {
                  "CustomerRewardHistory": {
                    "$ref": "#/components/examples/CustomerRewardHistory"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    }
  },
  "components": {
    "examples": {
      "SuccessfulAssociatedPersonResponse": {
        "summary": "An associated person object",
        "value": {
          "id": "associated_person_1234567890",
          "email": "associated_person@business.co",
          "first_name": "John",
          "last_name": "Smith",
          "has_ownership": true,
          "has_control": true,
          "is_signer": true,
          "title": "Chief Executive Officer",
          "relationship_established_at": "2025-05-27T17:55:33.308Z",
          "created_at": "2025-05-27T17:55:33.308Z",
          "updated_at": "2025-05-27T17:55:33.308Z"
        }
      },
      "SuccessfulCustomerResponse": {
        "summary": "An individual customer object",
        "value": {
          "id": "cust_ind",
          "first_name": "John",
          "last_name": "Doe",
          "email": "johndoe@johndoe.com",
          "status": "active",
          "type": "individual",
          "has_accepted_terms_of_service": true,
          "address": {
            "street_line_1": "123 Washington St",
            "street_line_2": "Apt 2F",
            "city": "New York",
            "postal_code": "10001",
            "state": "NY",
            "country": "USA"
          },
          "rejection_reasons": [],
          "requirements_due": [
            "external_account"
          ],
          "future_requirements_due": [
            "id_verification"
          ],
          "endorsements": [
            {
              "name": "base",
              "status": "approved"
            },
            {
              "name": "sepa",
              "status": "incomplete",
              "additional_requirements": [
                "kyc_with_proof_of_address",
                "tos_v2_acceptance"
              ]
            }
          ],
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulCustomerResponse2": {
        "summary": "A business customer object",
        "value": {
          "id": "cust_biz",
          "first_name": "Biz Corp",
          "last_name": "_",
          "status": "active",
          "type": "individual",
          "email": "harperstern@harperstern.com",
          "has_accepted_terms_of_service": true,
          "address": {
            "street_line_1": "1 5th avenue",
            "city": "New York",
            "state": "NY",
            "postal_code": "10010",
            "country": "USA"
          },
          "rejection_reasons": [],
          "requirements_due": [
            "external_account"
          ],
          "future_requirements_due": [
            "id_verification"
          ],
          "endorsements": [
            {
              "name": "base",
              "status": "approved"
            },
            {
              "name": "sepa",
              "status": "approved"
            }
          ],
          "beneficial_owners": [
            {
              "id": "bo_1",
              "email": "bo_1@bizcorp.com"
            },
            {
              "id": "bo_2",
              "email": "bo_2@bizcorp.com"
            }
          ],
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "RejectedCustomerResponse": {
        "summary": "A rejected customer object",
        "value": {
          "id": "cust_1",
          "first_name": "John",
          "last_name": "Doe",
          "email": "johndoe@johndoe.com",
          "status": "rejected",
          "type": "individual",
          "has_accepted_terms_of_service": true,
          "address": {
            "street_line_1": "123 Washington St",
            "street_line_2": "Apt 2F",
            "city": "New York",
            "postal_code": "10001",
            "state": "NY",
            "country": "USA"
          },
          "requirements_due": [
            "external_account"
          ],
          "rejection_reasons": [
            {
              "developer_reason": "Missing required ID details.",
              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
              "created_at": "2020-01-02T00:00:00.000Z"
            },
            {
              "developer_reason": "Blurry face portrait.",
              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
              "created_at": "2020-01-02T00:00:00.000Z"
            }
          ],
          "future_requirements_due": [
            "id_verification"
          ],
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulOfframpTransferResponse": {
        "summary": "A successful offramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "awaiting_funds",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "destination": {
            "payment_rail": "ach",
            "currency": "usd",
            "external_account_id": "ext_123"
          },
          "source_deposit_instructions": {
            "payment_rail": "ethereum",
            "amount": "75.0",
            "currency": "usdc",
            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "75.0",
            "gas_fe": "0.0",
            "final_amount": "75.0",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulOfframpWithMemoTransferResponse": {
        "summary": "A successful offramp transfer object for a blockchain that requires a memo (e.g. Tron, Stellar)",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "awaiting_funds",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "tron",
            "currency": "usdt",
            "from_address": "TFCVwYhQxMXTeFGmWb45uMk1qsJ4DRMPVS"
          },
          "destination": {
            "payment_rail": "ach",
            "currency": "usd",
            "external_account_id": "ext_123"
          },
          "source_deposit_instructions": {
            "payment_rail": "tron",
            "amount": "75.0",
            "currency": "usdc",
            "from_address": "TFCVwYhQxMXTeFGmWb45uMk1qsJ4DRMPVS",
            "to_address": "TUEB3vjcMx7mPvc8DmeDLevZU3wEnkZ1zs",
            "blockchain_memo": "BRGEXAMPLEMEMO"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "75.0",
            "gas_fe": "0.0",
            "final_amount": "75.0",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulSepaOfframpTransferResponse": {
        "summary": "A successful SEPA offramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "awaiting_funds",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "destination": {
            "payment_rail": "sepa",
            "currency": "eur",
            "external_account_id": "ext_123",
            "sepa_reference": "SEPA reference"
          },
          "source_deposit_instructions": {
            "payment_rail": "ethereum",
            "amount": "75.0",
            "currency": "usdc",
            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "75.0",
            "gas_fe": "0.0",
            "final_amount": "68.27",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulOfframpTransferResponse2": {
        "summary": "A successful offramp transfer object",
        "value": {
          "id": "transfer_456",
          "client_reference_id": "client_transfer_id_456",
          "state": "funds_received",
          "on_behalf_of": "cust_123",
          "amount": "500.25",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "ach",
            "currency": "usd",
            "external_account_id": "ext_123"
          },
          "destination": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "to_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "receipt": {
            "initial_amount": "500.25",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "500.25",
            "gas_fee": "0.0",
            "final_amount": "500.25",
            "destination_tx_hash": "0xdeadbeef",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-02T00:00:00.000Z",
          "updated_at": "2020-01-03T00:00:00.000Z"
        }
      },
      "SuccessfulWireOnrampTransferResponse": {
        "summary": "A successful wire onramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "pending",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "wire",
            "currency": "usd",
            "external_account_id": null,
            "bank_beneficiary_name": "Sender name, if available",
            "bank_beneficiary_address": "Sender address, if available",
            "bank_routing_number": "Sender routing, if available",
            "bank_name": "Sender bank, if available",
            "imad": "IMAD of incoming wire, if available",
            "omad": "OMAD of incoming wire, if available (deprecated)"
          },
          "destination": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "source_deposit_instructions": {
            "payment_rail": "wire",
            "amount": "75.0",
            "currency": "usd",
            "deposit_message": "BVI7depositmessage",
            "bank_name": "Bank name",
            "bank_address": "Bank address",
            "bank_routing_number": "123456789",
            "bank_account_number": "1234567890",
            "bank_beneficiary_name": "Bank beneficiary",
            "bank_beneficiary_address": "Bank beneficiary address"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "75.0",
            "gas_fee": "0.0",
            "final_amount": "75.0",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulAchOnrampTransferResponse": {
        "summary": "A successful ACH onramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "pending",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "ach_push",
            "currency": "usd",
            "external_account_id": null,
            "description": "ACH description, if available"
          },
          "destination": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "source_deposit_instructions": {
            "payment_rail": "ach_push",
            "amount": "75.0",
            "currency": "usd",
            "deposit_message": "BVI7depositmessage",
            "bank_name": "Bank name",
            "bank_address": "Bank address",
            "bank_routing_number": "123456789",
            "bank_account_number": "1234567890",
            "bank_beneficiary_name": "Bank beneficiary",
            "bank_beneficiary_address": "Bank beneficiary address"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "75.0",
            "gas_fee": "0.0",
            "final_amount": "75.0",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulSepaOnrampTransferResponse": {
        "summary": "A successful SEPA onramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "pending",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "sepa",
            "currency": "eur",
            "external_account_id": null
          },
          "destination": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "source_deposit_instructions": {
            "payment_rail": "sepa",
            "amount": "75.0",
            "currency": "eur",
            "deposit_message": "BRG7depositmessage",
            "bank_name": "Bank name",
            "bank_address": "Bank address",
            "iban": "123456789",
            "bic": "1234567890",
            "account_holder_name": "Bank account holder name"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "gas_fee": "0.0",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulExternalAccountResponse": {
        "summary": "A successful External Account object",
        "value": {
          "id": "ea_123",
          "account_type": "us",
          "currency": "usd",
          "customer_id": "cust_123",
          "account_owner_name": "John Doe",
          "bank_name": "Wells Fargo",
          "last_4": "1111",
          "active": true,
          "beneficiary_address_valid": true,
          "account": {
            "last_4": "1111",
            "routing_number": "121000248",
            "checking_or_savings": "checking"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulIbanExternalAccountResponse": {
        "summary": "A successful iban External Account object",
        "value": {
          "id": "ea_123",
          "customer_id": "cust_123",
          "account_type": "iban",
          "currency": "eur",
          "account_owner_name": "John Doe",
          "bank_name": "AAC CAPITAL PARTNERS LIMITED",
          "active": true,
          "iban": {
            "last_4": "5981",
            "bic": "BARBGB2LLEI",
            "country": "NLD"
          },
          "account_owner_type": "individual",
          "first_name": "John",
          "last_name": "Doe",
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulPrefundedAccountResponse": {
        "summary": "A successful Prefunded Account object",
        "value": {
          "id": "f15972de-4cdd-460c-9da3-34f7321bfa3f",
          "currency": "usd",
          "available_balance": "134.12",
          "name": "my_account",
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulPrefundedAccountHistoryResponse": {
        "summary": "A successful Prefunded Account history",
        "value": {
          "count": 1,
          "data": [
            {
              "id": "abced012-4cdd-460c-9da3-34f7321bfa3f",
              "amount": "500.00",
              "available_balance": "1300.31",
              "currency": "usd",
              "name": "my_account",
              "type": "funding",
              "created_at": "2020-01-01T00:00:00.000Z"
            }
          ]
        }
      },
      "VirtualAccountPaymentSubmmittedEventFromAchPush": {
        "value": {
          "id": "va_event_456",
          "customer_id": "cust_alice",
          "virtual_account_id": "va_123",
          "type": "payment_submitted",
          "amount": "120.0",
          "currency": "usd",
          "developer_fee_amount": "1.25",
          "exchange_fee_amount": "2.2",
          "subtotal_amount": "120.0",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2024-01-01T00:00:00.000Z",
          "destination_tx_hash": "0xdeadbeef",
          "source": {
            "payment_rail": "ach_push",
            "description": "ACH description",
            "sender_name": "The name of the business or individual who initiated the ACH",
            "sender_bank_routing_number": "The routing number of the entity that initiated this ACH transaction",
            "trace_number": "The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions"
          }
        }
      },
      "VirtualAccountFundsReceivedEventFromAchPush": {
        "value": {
          "id": "va_event_123",
          "customer_id": "cust_alice",
          "virtual_account_id": "va_123",
          "type": "funds_received",
          "amount": "123.45",
          "currency": "usd",
          "developer_fee_amount": "0.0",
          "exchange_fee_amount": "0.0",
          "subtotal_amount": "123.45",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2024-01-01T00:00:00.000Z",
          "source": {
            "payment_rail": "ach_push",
            "description": "ACH description",
            "sender_name": "The name of the business or individual who initiated the ACH",
            "sender_bank_routing_number": "The routing number of the entity that initiated this ACH transaction",
            "trace_number": "The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions"
          }
        }
      },
      "VirtualAccountPaymentProcessedEventFromSpei": {
        "value": {
          "id": "va_event_789",
          "customer_id": "cust_alice",
          "virtual_account_id": "va_456",
          "type": "payment_processed",
          "amount": "123.45",
          "currency": "usdc",
          "developer_fee_amount": "0.0",
          "exchange_fee_amount": "0.0",
          "subtotal_amount": "123.45",
          "gas_fee": "0.0",
          "deposit_id": "deposit_789",
          "created_at": "2025-06-01T00:00:00.000Z",
          "source": {
            "payment_rail": "spei",
            "description": "Receiving CLABE | clave de rastreo | SPEI reference",
            "tracking_number": "The unique tracking number or clave de rastreo for this SPEI transaction",
            "sender_name": "The name of the business or individual who initiated the SPEI credit",
            "reference": "The reference or concepto de pago for this SPEI transaction"
          }
        }
      },
      "StaticMemoPaymentSubmittedEventFromAchPush": {
        "value": {
          "id": "sm_event_456",
          "customer_id": "cust_alice",
          "virtual_account_id": "sm_123",
          "type": "payment_submitted",
          "amount": "120.0",
          "currency": "usd",
          "developer_fee_amount": "1.25",
          "exchange_fee_amount": "2.2",
          "subtotal_amount": "120.0",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2020-01-01T00:00:00.000Z",
          "destination_tx_hash": "0xdeadbeef",
          "source_deposit_instructions": {
            "deposit_message": "BVI7depositmessage"
          },
          "source": {
            "payment_rail": "ach_push",
            "description": "ACH description, if available"
          }
        }
      },
      "StaticMemoFundsReceivedEventFromAchPush": {
        "value": {
          "id": "sm_event_123",
          "customer_id": "cust_alice",
          "virtual_account_id": "sm_123",
          "type": "funds_received",
          "amount": "123.45",
          "currency": "usd",
          "developer_fee_amount": "0.0",
          "exchange_fee_amount": "0.0",
          "subtotal_amount": "123.45",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2020-01-01T00:00:00.000Z",
          "source_deposit_instructions": {
            "deposit_message": "BVI7depositmessage"
          },
          "source": {
            "payment_rail": "ach_push",
            "description": "ACH description, if available"
          }
        }
      },
      "StaticMemoPaymentSubmittedEventFromWire": {
        "value": {
          "id": "sm_event_457",
          "customer_id": "cust_alice",
          "virtual_account_id": "sm_123",
          "type": "payment_submitted",
          "amount": "120.0",
          "currency": "usd",
          "developer_fee_amount": "1.25",
          "exchange_fee_amount": "2.2",
          "subtotal_amount": "120.0",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2020-01-01T00:00:00.000Z",
          "destination_tx_hash": "0xdeadbeef",
          "source_deposit_instructions": {
            "deposit_message": "BVI7depositmessage"
          },
          "source": {
            "payment_rail": "wire",
            "bank_beneficiary_name": "Bank beneficiary",
            "bank_beneficiary_address": "Bank beneficiary address",
            "originator_name": "Originator Name",
            "originator_address": "Originator Address",
            "bank_routing_number": "1234567890",
            "bank_name": "Bank name",
            "imad": "IMAD of incoming wire, if available",
            "omad": "OMAD of incoming wire, if available (deprecated)"
          }
        }
      },
      "StaticMemoFundsReceivedEventFromWire": {
        "value": {
          "id": "sm_event_124",
          "customer_id": "cust_alice",
          "virtual_account_id": "sm_123",
          "type": "funds_received",
          "amount": "123.45",
          "currency": "usd",
          "developer_fee_amount": "0.0",
          "exchange_fee_amount": "0.0",
          "subtotal_amount": "123.45",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2020-01-01T00:00:00.000Z",
          "source_deposit_instructions": {
            "deposit_message": "BVI7depositmessage"
          },
          "source": {
            "payment_rail": "wire",
            "bank_beneficiary_name": "Bank beneficiary",
            "bank_beneficiary_address": "Bank beneficiary address",
            "originator_name": "Originator Name",
            "originator_address": "Originator Address",
            "bank_routing_number": "1234567890",
            "bank_name": "Bank name",
            "imad": "IMAD of incoming wire, if available",
            "omad": "OMAD of incoming wire, if available (deprecated)"
          }
        }
      },
      "CryptoPayinResponse": {
        "summary": "A successful payin",
        "value": {
          "id": "payin_456",
          "customer_id": "cust_123",
          "payment_rail": "ethereum",
          "currency": "usdc",
          "amount": "100.88",
          "state": "completed",
          "transaction_hash": "0xc13d7905be5c989378a945487cd2a1193627ae606009e28e296d48ddaec66162",
          "to_address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c"
        }
      },
      "WirePayinResponse": {
        "summary": "A successful payin",
        "value": {
          "id": "payin_456",
          "customer_id": "cust_123",
          "payment_rail": "wire",
          "currency": "usd",
          "amount": "400.25",
          "state": "completed"
        }
      },
      "WirePayoutResponse": {
        "summary": "A successful payout",
        "value": {
          "id": "payout_789",
          "customer_id": "cust_123",
          "payment_rail": "wire",
          "currency": "usd",
          "amount": "9999.99",
          "external_account_id": "ea_123",
          "state": "completed"
        }
      },
      "PlaidLinkRequestSuccessResponse": {
        "summary": "Successful Plaid Link token creation",
        "value": {
          "link_token": "plaid_link_token_123",
          "link_token_expires_at": "2023-03-23T03:22:34.086Z",
          "callback_url": "https://api.bridge.xyz/v0/plaid_exchange_public_token/plaid_link_token_123"
        }
      },
      "SuccessfulKycLinkCreateResponse": {
        "summary": "Successful KYC link creation",
        "value": {
          "id": "kyc_link_123",
          "full_name": "John Doe",
          "email": "johndoe@johndoe.com",
          "type": "individual",
          "kyc_link": "www.kyclink.com/blah",
          "tos_link": "www.toslink.com/blah",
          "kyc_status": "not_started",
          "tos_status": "pending",
          "customer_id": "cust_123"
        }
      },
      "ApprovedKycLinkGetResponse": {
        "summary": "Approved KYC link",
        "value": {
          "id": "kyc_link_123",
          "full_name": "John Doe",
          "email": "johndoe@johndoe.com",
          "type": "individual",
          "kyc_link": "www.kyclink.com/blah",
          "tos_link": "www.toslink.com/blah",
          "kyc_status": "approved",
          "rejection_reasons": [],
          "tos_status": "approved",
          "customer_id": "cust_123"
        }
      },
      "RejectedKycLinkGetResponse": {
        "summary": "Rejected KYC link",
        "value": {
          "id": "kyc_link_123",
          "full_name": "John Doe",
          "email": "johndoe@johndoe.com",
          "type": "individual",
          "kyc_link": "www.kyclink.com/blah",
          "tos_link": "www.toslink.com/blah",
          "kyc_status": "rejected",
          "rejection_reasons": [
            {
              "developer_reason": "Missing required ID details.",
              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
              "created_at": "2020-01-02T00:00:00.000Z"
            },
            {
              "developer_reason": "Blurry face portrait.",
              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
              "created_at": "2020-01-02T00:00:00.000Z"
            }
          ],
          "tos_status": "approved",
          "customer_id": "cust_123"
        }
      },
      "KycLinksGetResponse": {
        "summary": "A list of KYC links",
        "value": {
          "count": 2,
          "data": [
            {
              "id": "kyc_link_123",
              "full_name": "John Doe",
              "email": "johndoe@johndoe.com",
              "type": "individual",
              "kyc_link": "www.kyclink.com/blah",
              "tos_link": "www.toslink.com/blah",
              "kyc_status": "approved",
              "rejection_reasons": [],
              "tos_status": "approved",
              "customer_id": "cust_123"
            },
            {
              "id": "kyc_link_456",
              "full_name": "Jane Doe",
              "email": "janedoe@janedoe.com",
              "type": "individual",
              "kyc_link": "www.kyclink.com/blah",
              "tos_link": "www.toslink.com/blah",
              "kyc_status": "rejected",
              "rejection_reasons": [
                {
                  "developer_reason": "Missing required ID details.",
                  "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                  "created_at": "2020-01-02T00:00:00.000Z"
                },
                {
                  "developer_reason": "Blurry face portrait.",
                  "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                  "created_at": "2020-01-02T00:00:00.000Z"
                }
              ],
              "tos_status": "approved",
              "customer_id": "cust_456"
            }
          ]
        }
      },
      "SuccessfulBridgeWalletCreateResponse": {
        "summary": "A successful Bridge Wallet creation response",
        "value": {
          "id": "bw_123",
          "chain": "solana",
          "address": "9kV3ZMehKVyxfHKCcaDLye3P9HHw2MP4jtQa2gKBUmCs",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z"
        }
      },
      "SuccessfulBridgeWalletGetResponse": {
        "summary": "A successful get response for a Bridge Wallet",
        "value": {
          "id": "bw_123",
          "chain": "solana",
          "address": "9kV3ZMehKVyxfHKCcaDLye3P9HHw2MP4jtQa2gKBUmCs",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z",
          "balances": [
            {
              "balance": "100.25",
              "currency": "usdb",
              "chain": "solana",
              "contract_address": "ENL66PGy8d8j5KNqLtCcg4uidDUac5ibt45wbjH9REzB"
            }
          ]
        }
      },
      "SuccessfulBridgeWalletListResponse": {
        "summary": "A successful get response for a list of Bridge Wallets",
        "value": {
          "count": 1,
          "data": [
            {
              "id": "bw_123",
              "chain": "solana",
              "address": "9kV3ZMehKVyxfHKCcaDLye3P9HHw2MP4jtQa2gKBUmCs",
              "created_at": "2023-11-22T21:31:30.515Z",
              "updated_at": "2023-11-22T21:31:30.515Z"
            }
          ]
        }
      },
      "SuccessfulLiquidationAddressCreateResponse": {
        "summary": "A successful Liquidation Address creation response",
        "value": {
          "id": "la_123",
          "chain": "ethereum",
          "customer_id": "cust_123",
          "external_account_id": "ext_123",
          "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
          "currency": "usdc",
          "state": "active",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z"
        }
      },
      "SuccessfulSepaLiquidationAddressCreateResponse": {
        "summary": "A creation response using SEPA as the destination rail",
        "value": {
          "id": "la_123",
          "chain": "ethereum",
          "customer_id": "cust_123",
          "external_account_id": "ext_123",
          "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
          "currency": "usdc",
          "destination_sepa_reference": "SEPA reference",
          "destination_payment_rail": "sepa",
          "destination_currency": "eur",
          "state": "active",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z"
        }
      },
      "SuccessfulLiquidationAddressGetResponse": {
        "summary": "A successful get response for a Liquidation Address",
        "value": {
          "id": "la_123",
          "chain": "ethereum",
          "customer_id": "cust_123",
          "external_account_id": "ext_123",
          "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
          "currency": "usdc",
          "destination_payment_rail": "wire",
          "destination_currency": "usd",
          "destination_wire_message": "a wire message",
          "state": "active",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z"
        }
      },
      "SuccessfulSepaLiquidationAddressGetResponse": {
        "summary": "A successful get response for a SEPA Liquidation Address",
        "value": {
          "id": "la_123",
          "chain": "ethereum",
          "customer_id": "cust_123",
          "external_account_id": "ext_123",
          "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
          "currency": "usdc",
          "destination_payment_rail": "sepa",
          "destination_currency": "eur",
          "destination_sepa_reference": "a SEPA reference",
          "state": "active",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z"
        }
      },
      "SuccessfulGetAllLiquidationAddressResponse": {
        "summary": "A successful get request for a list of Liquidation Addresses",
        "value": {
          "count": 1,
          "data": {
            "type": "array",
            "minItems": 0,
            "items": {
              "id": "la_123",
              "chain": "ethereum",
              "customer_id": "cust_123",
              "external_account_id": "ext_123",
              "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
              "currency": "usdc",
              "state": "active",
              "created_at": "2023-11-22T21:31:30.515Z",
              "updated_at": "2023-11-22T21:31:30.515Z"
            }
          }
        }
      },
      "PlaidExchangePublicTokenSuccessResponse": {
        "summary": "Successful Plaid public token exchange",
        "value": {
          "message": "Successfully exchanged public token for access token"
        }
      },
      "SuccessfulLiquidationAddressDrainsToCryptoResponse": {
        "summary": "A successful get request for a Liquidation Address's drain to crypto",
        "value": {
          "count": 1,
          "data": [
            {
              "id": "la_123",
              "amount": "100.25",
              "customer_id": "cust_123",
              "liquidation_address_id": "la_456",
              "currency": "usdc",
              "state": "funds_received",
              "created_at": "2020-01-01T00:00:00.000Z",
              "updated_at": "2020-01-01T00:00:00.000Z",
              "deposit_tx_hash": "0xc13d7905be5c989378a945487cd2a1193627ae606009e28e296d48ddaec66162",
              "destination": {
                "payment_rail": "ethereum",
                "currency": "usdt",
                "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
              },
              "destination_tx_hash": "0xdeadbeef",
              "receipt": {
                "initial_amount": "100.25",
                "developer_fee": "0.2",
                "subtotal_amount": "100.05",
                "exchange_rate": "1.000000",
                "converted_amount": "100.05",
                "outgoing_amount": "100.05",
                "destination_currency": "usd",
                "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
              }
            }
          ]
        }
      },
      "SuccessfulLiquidationAddressDrainsToFiatResponse": {
        "summary": "A successful get request for a Liquidation Address's drain to fiat",
        "value": {
          "count": 1,
          "data": [
            {
              "id": "la_123",
              "amount": "100.25",
              "customer_id": "cust_123",
              "liquidation_address_id": "la_456",
              "currency": "usdc",
              "state": "funds_received",
              "created_at": "2020-01-01T00:00:00.000Z",
              "updated_at": "2020-01-01T00:00:00.000Z",
              "deposit_tx_hash": "0xc13d7905be5c989378a945487cd2a1193627ae606009e28e296d48ddaec66162",
              "destination": {
                "payment_rail": "wire",
                "currency": "usd",
                "external_account_id": "ext_acct_789",
                "wire_message": "a wire message",
                "imad": "123456"
              },
              "receipt": {
                "initial_amount": "100.25",
                "developer_fee": "0.2",
                "subtotal_amount": "100.05",
                "exchange_rate": "1.000000",
                "converted_amount": "100.05",
                "outgoing_amount": "100.05",
                "destination_currency": "usd",
                "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
              }
            }
          ]
        }
      },
      "SuccessfulLiquidationAddressBalanceResponse": {
        "summary": "A successful get request for a Liquidation Address's balance",
        "value": {
          "active_balance": "0",
          "pending_balance": "100.25"
        }
      },
      "SuccessfulDeveloperFeesShowResponse": {
        "summary": "A successful get request for configured fees.",
        "value": {
          "default_liquidation_address_fee_percent": "1.3"
        }
      },
      "SuccessfulDeveloperFeesUpdateResponse": {
        "summary": "A successful post request for updating fees."
      },
      "SuccessfulTotalBalancesResponse": {
        "summary": "A successful get request for total balances",
        "value": [
          {
            "balance": "100.25",
            "currency": "usdb",
            "chain": "solana",
            "contract_address": "ENL66PGy8d8j5KNqLtCcg4uidDUac5ibt45wbjH9REzB"
          }
        ]
      },
      "SuccessfulWebhookResponse": {
        "summary": "A successful webhook endpoint object.",
        "value": {
          "id": "wep_123",
          "url": "https://my_endpoint.xyz/hooks",
          "status": "active",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFAKEhFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
        }
      },
      "SuccessfulWebhookResponse2": {
        "summary": "A successful webhook endpoint object.",
        "value": {
          "id": "wep_456",
          "url": "https://my_endpoint.xyz/hooks",
          "status": "active",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFAKEc27UdTQxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cxG4a5w0BAQEXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
        }
      },
      "SuccessfulWebhookCreateResponse": {
        "summary": "Successful webhook endpoint creation",
        "value": {
          "id": "wep_123",
          "url": "https://my_endpoint.xyz/hooks",
          "status": "disabled",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFJJ3hFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n",
          "event_categories": [
            "customer",
            "liquidation_address",
            "virtual_account",
            "virtual_account.activity",
            "card_account",
            "card_transaction",
            "card_withdrawal",
            "posted_card_account_transaction"
          ]
        }
      },
      "SuccessfulWebhookUpdateResponse": {
        "summary": "Successful webhook endpoint update",
        "value": {
          "id": "wep_123",
          "url": "https://my_updated_endpoint.xyz/hooks",
          "status": "active",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFJJ3hFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n",
          "event_categories": [
            "customer",
            "liquidation_address",
            "virtual_account",
            "virtual_account.activity",
            "card_account",
            "card_transaction",
            "card_withdrawal",
            "posted_card_account_transaction"
          ]
        }
      },
      "SuccessfulWebhookDeleteResponse": {
        "summary": "Successful webhook endpoint delete",
        "value": {
          "id": "wep_123",
          "url": "https://my_deleted_endpoint.xyz/hooks",
          "status": "deleted",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFJJ3hFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
        }
      },
      "SuccessfulWebhookEventsResponse": {
        "summary": "A list of events for the webhook endpoint",
        "value": {
          "data": {
            "type": "array",
            "minItems": 0,
            "items": [
              {
                "api_version": "v0",
                "event_id": "wh_tmneA3b1rTv1q4gkvmPU53n",
                "event_developer_id": "2d127766-02fa-44b0-9fc8-a67665dbf109",
                "event_sequence": 1,
                "event_category": "transfer",
                "event_type": "transfer.deleted",
                "event_object_id": "cc598628-29ab-448e-851f-7aaffb1a1171",
                "event_object_status": null,
                "event_object": {
                  "id": "cc598628-29ab-448e-851f-7aaffb1a1171",
                  "state": "awaiting_funds",
                  "amount": "50.0",
                  "source": {
                    "currency": "usdc",
                    "from_address": "0xd48f4e51c2fcd1c8489eb1a64588b29b76ad0a3f",
                    "payment_rail": "ethereum"
                  },
                  "receipt": {
                    "gas_fee": "0.0",
                    "exchange_fee": "0.0",
                    "final_amount": "50.0",
                    "developer_fee": "0.0",
                    "initial_amount": "50.0",
                    "subtotal_amount": "50.0",
                    "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                  },
                  "currency": "usd",
                  "created_at": "2024-05-02T17:48:19.366Z",
                  "updated_at": "2024-05-02T17:48:19.366Z",
                  "destination": {
                    "currency": "usd",
                    "payment_rail": "ach",
                    "external_account_id": "24fd61e9-80b6-464a-b5ee-9f7a521cb1f0"
                  },
                  "on_behalf_of": "474c32b3-f3d6-43e3-92ce-a7d4e07fa0a4",
                  "developer_fee": "0.0",
                  "source_deposit_instructions": {
                    "amount": "50.0",
                    "currency": "usdc",
                    "to_address": null,
                    "from_address": "0xd48f4e51c2fcd1c8489eb1a64588b29b76ad0a3f",
                    "payment_rail": "ethereum"
                  }
                },
                "event_object_changes": {
                  "state": [
                    "pending",
                    "canceled"
                  ],
                  "updated_at": [
                    "2024-05-02T15:14:02.842Z",
                    "2024-05-02T15:15:07.163Z"
                  ]
                },
                "event_created_at": "2024-05-02T17:48:19.465Z"
              }
            ]
          }
        }
      },
      "SuccessfulWebhookLogsResponse": {
        "summary": "A list of delivery logs for the webhook endpoint",
        "value": {
          "data": {
            "type": "array",
            "minItems": 0,
            "items": [
              {
                "status": 200,
                "event_id": "wh_event_id_123",
                "response_body": "{\"message\":\"OK\"}",
                "created_at": "2024-01-01T00:00:00.000Z"
              },
              {
                "status": 200,
                "event_id": "wh_event_id_456",
                "response_body": "{\"message\":\"OK\"}",
                "created_at": "2024-01-01T00:00:00.000Z"
              }
            ]
          }
        }
      },
      "WebhookEventSendSuccessResponse": {
        "summary": "Successful webhook event send",
        "value": {
          "message": "Successfully sent the webhook event. This does not guarantee immediate delivery to the endpoint."
        }
      },
      "OccupationCodesSuccessResponse": {
        "summary": "The list of occupations that can be used during the KYC flow.",
        "value": [
          {
            "display_name": "Accountant and auditor",
            "code": "132011"
          },
          {
            "display_name": "Actor",
            "code": "272011"
          },
          {
            "display_name": "Acupuncturist",
            "code": "291291"
          },
          {
            "display_name": "Administrative services manager",
            "code": "113012"
          },
          {
            "display_name": "Other",
            "code": "other"
          }
        ]
      },
      "ActiveRewardRate": {
        "summary": "The current reward rate for a given stablecoin",
        "value": {
          "rate": "0.035",
          "effective_at": "2025-01-01T00:00:00.000Z",
          "expires_at": null
        }
      },
      "CustomerRewardSummary": {
        "summary": "A summary of a customer's rewards",
        "value": {
          "developer_id": "2d127766-02fa-44b0-9fc8-a67665dbf109",
          "customer_id": "02513e85-b0f9-4d79-8320-348ce9efaa11",
          "currency": "xusd",
          "balance": "10000.00",
          "rewards": "23.9725",
          "updated_at": "2025-01-01T00:00:00.000Z"
        }
      },
      "DeveloperRewardSummary": {
        "summary": "A summary of all rewards for a given stablecoin",
        "value": {
          "developer_id": "2d127766-02fa-44b0-9fc8-a67665dbf109",
          "currency": "xusd",
          "balance": "10000.00",
          "rewards": "23.9725",
          "updated_at": "2025-01-01T00:00:00.000Z"
        }
      },
      "CustomerRewardHistory": {
        "summary": "A history of a customer's rewards",
        "value": {
          "customer_id": "02513e85-b0f9-4d79-8320-348ce9efaa11",
          "rewards": [
            {
              "balance": "10000.00",
              "amount": "0.958904",
              "currency": "xusd",
              "date": "2025-01-02"
            },
            {
              "balance": "10100.00",
              "amount": "0.968493",
              "currency": "xusd",
              "date": "2025-01-01"
            }
          ]
        }
      }
    },
    "schemas": {
      "BridgeWalletBalance": {
        "description": "The balance of a Bridge Wallet for a given currency",
        "type": "object",
        "required": [
          "balance",
          "currency",
          "chain"
        ],
        "properties": {
          "balance": {
            "type": "string",
            "description": "The balance in the given currency. ex. \"10.95\"",
            "readOnly": true
          },
          "currency": {
            "description": "The currency of the balance",
            "$ref": "#/components/schemas/Currency",
            "readOnly": true
          },
          "chain": {
            "description": "The chain of the balance",
            "$ref": "#/components/schemas/BridgeWalletChain",
            "readOnly": true
          },
          "contract_address": {
            "description": "The contract address of the currency, or null if it is a native currency",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "BridgeWalletTotalBalance": {
        "description": "The total balance across all Bridge wallets for a given currency",
        "type": "object",
        "required": [
          "balance",
          "currency",
          "chain"
        ],
        "properties": {
          "balance": {
            "type": "string",
            "description": "The total balance of wallets in the given currency  ex. \"10.95\"",
            "readOnly": true
          },
          "currency": {
            "description": "The currency of the total balance",
            "$ref": "#/components/schemas/Currency",
            "readOnly": true
          },
          "chain": {
            "description": "The chain of the total balance",
            "$ref": "#/components/schemas/BridgeWalletChain",
            "readOnly": true
          },
          "contract_address": {
            "description": "The contract address of the currency, or null if it is a native currency",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "BridgeWallet": {
        "required": [
          "chain"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateBridgeWallet"
          },
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Id",
                "readOnly": true
              },
              "chain": {
                "description": "The chain of the Bridge Wallet",
                "$ref": "#/components/schemas/BridgeWalletChain",
                "readOnly": true
              },
              "address": {
                "description": "The blockchain address of the Bridge Wallet",
                "type": "string",
                "readOnly": true
              },
              "created_at": {
                "readOnly": true,
                "type": "string",
                "description": "Time of creation of the Bridge Wallet",
                "format": "date-time"
              },
              "updated_at": {
                "readOnly": true,
                "type": "string",
                "description": "Time of most recent update of the Bridge Wallet",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "BridgeWalletWithBalances": {
        "required": [
          "chain"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateBridgeWallet"
          },
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Id",
                "readOnly": true
              },
              "chain": {
                "description": "The chain of the Bridge Wallet",
                "$ref": "#/components/schemas/BridgeWalletChain",
                "readOnly": true
              },
              "address": {
                "description": "The blockchain address of the Bridge Wallet",
                "type": "string",
                "readOnly": true
              },
              "created_at": {
                "readOnly": true,
                "type": "string",
                "description": "Time of creation of the Bridge Wallet",
                "format": "date-time"
              },
              "updated_at": {
                "readOnly": true,
                "type": "string",
                "description": "Time of most recent update of the Bridge Wallet",
                "format": "date-time"
              },
              "balances": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BridgeWalletBalance"
                },
                "readOnly": true
              }
            }
          }
        ]
      },
      "BridgeWalletsList": {
        "type": "object",
        "required": [
          "count",
          "data"
        ],
        "properties": {
          "count": {
            "description": "total number of items in data",
            "type": "integer"
          },
          "data": {
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/BridgeWallet"
            }
          }
        }
      },
      "BridgeWalletHistory": {
        "type": "object",
        "required": [
          "count",
          "data"
        ],
        "properties": {
          "count": {
            "description": "total number of items in data",
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "amount": {
                  "description": "Amount of the transaction, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                  "type": "string"
                },
                "developer_fee": {
                  "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account. This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\\n\\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                  "type": "string"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "customer_id": {
                  "$ref": "#/components/schemas/Id"
                },
                "source": {
                  "type": "object",
                  "properties": {
                    "payment_rail": {
                      "$ref": "#/components/schemas/PaymentRail"
                    },
                    "currency": {
                      "$ref": "#/components/schemas/Currency"
                    }
                  }
                },
                "destination": {
                  "type": "object",
                  "properties": {
                    "payment_rail": {
                      "$ref": "#/components/schemas/PaymentRail"
                    },
                    "currency": {
                      "$ref": "#/components/schemas/Currency"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Id": {
        "description": "A UUID that uniquely identifies a resource",
        "type": "string",
        "pattern": "[a-z0-9]*",
        "minLength": 1,
        "maxLength": 42
      },
      "client_reference_id": {
        "description": "A client-provided reference ID that uniquely identifies a resource in the client's system",
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "DepositId": {
        "description": "A UUID that uniquely identifies a deposit",
        "type": "string",
        "pattern": "[a-z0-9]*",
        "minLength": 1,
        "maxLength": 42
      },
      "Omad": {
        "description": "(Wire only) The OMAD of a wire transfer, if available",
        "type": "string",
        "pattern": "[a-z0-9]*",
        "minLength": 1,
        "maxLength": 40,
        "deprecated": true
      },
      "Imad": {
        "description": "(Wire only) The IMAD of a wire transfer, if available",
        "type": "string",
        "pattern": "[a-z0-9]*",
        "minLength": 1,
        "maxLength": 40
      },
      "Uetr": {
        "description": "The UETR of this SEPA transaction, for tracing purposes.",
        "type": "string",
        "readOnly": true,
        "minLength": 36,
        "maxLength": 36
      },
      "TraceNumber": {
        "description": "The trace number of an ACH transfer",
        "type": "string",
        "pattern": "[0-9]",
        "minLength": 15,
        "maxLength": 15
      },
      "TrackingNumber": {
        "description": "The clave de rastreo or tracking number of a SPEI transaction",
        "type": "string",
        "pattern": "[A-Za-z0-9]",
        "minLength": 1,
        "maxLength": 30
      },
      "WireMessage": {
        "description": "A message to be sent with a wire transfer. It can have up to 140 characters.",
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "SepaReference": {
        "description": "A reference message to be sent with a SEPA transaction. We recommend you set a unique value to help you and your customers track payments end to end. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`). If not populated, the default value is \"payout\".",
        "type": "string",
        "minLength": 6,
        "maxLength": 140
      },
      "SwiftReference": {
        "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
        "type": "string",
        "minLength": 1,
        "maxLength": 190
      },
      "SpeiReference": {
        "description": "A payment reference message or remittance information to be included in a SPEI transaction. The allowed characters are alphanumeric `a-z`, `A-Z`, `0-9`, and space",
        "type": "string",
        "minLength": 1,
        "maxLength": 40
      },
      "SwiftCharges": {
        "description": "Use `our` for all charges to be borne by the sender, and `sha` for them to be shared between the sender and receiver.",
        "type": "string",
        "enum": [
          "our",
          "sha"
        ]
      },
      "AchReference": {
        "description": "A reference message to be sent with an ACH transaction. It can be at most 10 characters, A-Z, a-z, 0-9, and spaces.",
        "type": "string",
        "minLength": 1,
        "maxLength": 10
      },
      "Customer": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
          },
          "status": {
            "type": "string",
            "$ref": "#/components/schemas/CustomerStatus"
          },
          "capabilities": {
            "type": "object",
            "properties": {
              "payin_crypto": {
                "type": "string",
                "$ref": "#/components/schemas/CustomerCapabilityState"
              },
              "payout_crypto": {
                "type": "string",
                "$ref": "#/components/schemas/CustomerCapabilityState"
              },
              "payin_fiat": {
                "type": "string",
                "$ref": "#/components/schemas/CustomerCapabilityState"
              },
              "payout_fiat": {
                "type": "string",
                "$ref": "#/components/schemas/CustomerCapabilityState"
              }
            }
          },
          "future_requirements_due": {
            "readOnly": true,
            "description": "Information about requirements that may be needed in the future for the customer (eg. enhanced KYC checks for high volume transactions etc.). Please consult our KYC guide on how to resolve each requirement.",
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "enum": [
                "id_verification"
              ]
            }
          },
          "requirements_due": {
            "readOnly": true,
            "description": "KYC requirements still needed to be completed. Please consult our KYC guide on how to resolve each requirement.",
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "enum": [
                "external_account",
                "id_verification"
              ]
            }
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the customer",
            "format": "date-time"
          },
          "updated_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of last update of the customer",
            "format": "date-time"
          },
          "rejection_reasons": {
            "readOnly": true,
            "description": "Reasons why a customer KYC was rejected",
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/RejectionReason"
            }
          },
          "has_accepted_terms_of_service": {
            "readOnly": true,
            "description": "Whether the customer has accepted the terms of service.",
            "type": "boolean"
          },
          "endorsements": {
            "readOnly": true,
            "description": "A summary of whether the customer has received approvals to complete onboarding or use certain products/services offered by Bridge.",
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/Endorsement"
            }
          }
        }
      },
      "Endorsement": {
        "required": [
          "name",
          "status"
        ],
        "properties": {
          "name": {
            "description": "The endorsement type.",
            "type": "string",
            "enum": [
              "base",
              "sepa",
              "spei",
              "cards"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "incomplete",
              "approved",
              "revoked"
            ]
          },
          "additional_requirements": {
            "description": "Additional requirements that need to be completed for obtaining the approval for the endorsement. \n\n1. `kyc_approval` and `tos_acceptance` are required for the `base` endorsement. \n2. `kyc_with_proof_of_address` and `tos_v2_acceptance` are required for `sepa`. If `tos_v2_acceptance` is not completed, a ToS acceptance link can be retrieved for the current customer from the endpoint `/v0/customers/{customerID}/tos_acceptance_link`. To fulfill the `kyc_with_proof_of_address` requirement, a KYC link can be specifically requested for the current customer via the endpoint `/v0/customers/{customerID}/kyc_link`, with `endorsement=sepa` included in the query string",
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/EndorsementRequirementEnum"
            }
          },
          "requirements": {
            "description": "This object aims to replace the `additional_requirements` attribute as it gives a more comprehensive view into what items are already `complete` or `pending` and which are `missing` or have `issues`.\n",
            "type": "object",
            "required": [
              "complete",
              "pending",
              "missing",
              "issues"
            ],
            "properties": {
              "complete": {
                "type": "array",
                "description": "an array of requirements that have already been completed for this endorsement.",
                "minItems": 0,
                "items": {
                  "type": "string"
                }
              },
              "pending": {
                "type": "array",
                "description": "an array of requirements that are pending review for this endorsement.",
                "minItems": 0,
                "items": {
                  "type": "string"
                }
              },
              "missing": {
                "type": "object",
                "description": "an object that will specify an indepth breakdown of what items are missing for this endorsement."
              },
              "issues": {
                "type": "array",
                "description": "An array of issues preventing this endorsement from being approved. Values in this array can be either a string such as `endorsement_not_available_in_customers_region` or an object that correlates the issue to a particular field such as `{ id_front_photo: \"id_expired\" }`\n",
                "minItems": 0,
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "EndorsementRequirementEnum": {
        "type": "string",
        "enum": [
          "kyc_approval",
          "tos_acceptance",
          "kyc_with_proof_of_address",
          "tos_v2_acceptance"
        ]
      },
      "Address": {
        "required": [
          "street_line_1",
          "country",
          "city"
        ],
        "properties": {
          "street_line_1": {
            "type": "string",
            "minLength": 4
          },
          "street_line_2": {
            "type": "string",
            "minLength": 1
          },
          "city": {
            "type": "string",
            "minLength": 1
          },
          "state": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied for US addresses.",
            "minLength": 1,
            "maxLength": 3
          },
          "postal_code": {
            "type": "string",
            "description": "Must be supplied for countries that use postal codes.",
            "minLength": 1
          },
          "country": {
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          }
        }
      },
      "ExternalAccountAddress": {
        "required": [
          "street_line_1",
          "country",
          "city"
        ],
        "properties": {
          "street_line_1": {
            "type": "string",
            "minLength": 4,
            "maxLength": 35
          },
          "street_line_2": {
            "type": "string",
            "maxLength": 35
          },
          "city": {
            "type": "string",
            "minLength": 1
          },
          "state": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied for US addresses.",
            "minLength": 1,
            "maxLength": 3
          },
          "postal_code": {
            "type": "string",
            "description": "Must be supplied for countries that use postal codes.",
            "minLength": 1
          },
          "country": {
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          }
        }
      },
      "Address2025WinterRefresh": {
        "required": [
          "street_line_1",
          "country",
          "city"
        ],
        "properties": {
          "street_line_1": {
            "type": "string",
            "minLength": 4
          },
          "street_line_2": {
            "type": "string",
            "minLength": 1
          },
          "city": {
            "type": "string",
            "minLength": 1
          },
          "subdivision": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied for US addresses.",
            "minLength": 1,
            "maxLength": 3
          },
          "postal_code": {
            "type": "string",
            "description": "Must be supplied for countries that use postal codes.",
            "minLength": 1
          },
          "country": {
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          }
        }
      },
      "Country": {
        "required": [
          "name",
          "alpha3",
          "subdivisions"
        ],
        "properties": {
          "name": {
            "description": "The name of the country",
            "type": "string",
            "minLength": 1
          },
          "alpha3": {
            "description": "The three-letter alpha-3 country code as defined in the ISO 3166-1 spec, used in Bridge APIs",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "postal_code_format": {
            "description": "A [Ruby-formatted regular expression](https://ruby-doc.org/3.4.2/Regexp.html) that matches valid postal codes for the country, or null if the country does not use postal codes.",
            "type": "string",
            "minLength": 1
          },
          "subdivisions": {
            "description": "A list of subdivisions for the country",
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/Subdivision"
            }
          }
        }
      },
      "Subdivision": {
        "required": [
          "name",
          "code"
        ],
        "properties": {
          "name": {
            "description": "The name of the subdivision",
            "type": "string",
            "minLength": 1
          },
          "code": {
            "description": "The subdivision code, which can be used in place of the name when interacting with Bridge via API",
            "type": "string",
            "minLength": 2
          }
        }
      },
      "IbanBankAccount": {
        "required": [
          "account_number",
          "country",
          "last_4"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
            "minLength": 1,
            "writeOnly": true
          },
          "bic": {
            "type": "string",
            "description": "The Bank Identifier Code (BIC) that will be used to send the funds",
            "minLength": 1
          },
          "country": {
            "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "last_4": {
            "description": "Last 4 digits of the bank account number",
            "minLength": 1,
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ClabeBankAccount": {
        "required": [
          "account_number",
          "last_4"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The CLABE account number of the bank account",
            "minLength": 18,
            "maxLength": 18,
            "writeOnly": true
          },
          "last_4": {
            "description": "Last 4 digits of the CLABE",
            "minLength": 4,
            "maxLength": 4,
            "type": "string",
            "readOnly": true
          }
        }
      },
      "UsBankAccount": {
        "required": [
          "account_number",
          "routing_number",
          "last_4"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The bank account number",
            "minLength": 1,
            "writeOnly": true
          },
          "routing_number": {
            "type": "string",
            "description": "The bank routing number",
            "minLength": 9,
            "maxLength": 9
          },
          "last_4": {
            "description": "Last 4 digits of the bank account number",
            "minLength": 1,
            "type": "string",
            "readOnly": true
          },
          "checking_or_savings": {
            "$ref": "#/components/schemas/CheckingOrSavingsType"
          }
        }
      },
      "UsBankAccountUpdate": {
        "properties": {
          "checking_or_savings": {
            "$ref": "#/components/schemas/CheckingOrSavingsType"
          },
          "routing_number": {
            "$ref": "#/components/schemas/ExternalAccount/properties/routing_number"
          }
        }
      },
      "SwiftBankAccount": {
        "required": [
          "account",
          "address",
          "category",
          "purpose_of_funds",
          "short_business_description"
        ],
        "properties": {
          "account": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IbanBankAccount"
              },
              {
                "$ref": "#/components/schemas/UnknownBankAccount"
              }
            ]
          },
          "address": {
            "description": "The bank address",
            "$ref": "#/components/schemas/Address"
          },
          "category": {
            "description": "The context of business operations. Can be `client`, `parent_company`, `subsidiary`, or `supplier`",
            "$ref": "#/components/schemas/SwiftCategory"
          },
          "purpose_of_funds": {
            "description": "The nature of the transactions this account will participate in. Can be `intra_group_transfer`, `invoice_for_goods_and_services`",
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/SwiftPurposeOfFunds"
            }
          },
          "short_business_description": {
            "description": "How the business uses the funds",
            "type": "string"
          }
        }
      },
      "UnknownBankAccount": {
        "required": [
          "account_number",
          "bic"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The number of the bank account",
            "minLength": 1,
            "writeOnly": true
          },
          "bic": {
            "type": "string",
            "description": "The Bank Identifier Code (BIC) of the bank account",
            "minLength": 1
          },
          "last_4": {
            "description": "Last 4 digits of the bank account number",
            "minLength": 1,
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SwiftCategory": {
        "type": "string",
        "description": "The category of the Swift account. Can be `client`, `parent_company`, `subsidiary`, or `supplier`"
      },
      "SwiftPurposeOfFunds": {
        "type": "string",
        "description": "The purpose of funds for the Swift account. Can be `intra_group_transfer`, `invoice_for_goods_and_services`"
      },
      "CreateIndividualCustomerPayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateIndividualCustomerPayload"
          },
          {
            "title": "Individual Customer"
          },
          {
            "required": [
              "type"
            ]
          }
        ]
      },
      "UpdateIndividualCustomerPayload": {
        "title": "Individual Customer",
        "properties": {
          "type": {
            "description": "Type of the customer (individual vs. business).",
            "type": "string",
            "minLength": 1,
            "enum": [
              "individual"
            ]
          },
          "first_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 1024,
            "description": "The first name of the individual."
          },
          "middle_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The middle name of the individual."
          },
          "last_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 1024,
            "description": "The last name of the individual."
          },
          "transliterated_first_name": {
            "type": "string",
            "description": "Required when the `first_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 256
          },
          "transliterated_middle_name": {
            "type": "string",
            "description": "Required when the `middle_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 256
          },
          "transliterated_last_name": {
            "type": "string",
            "description": "Required when the `last_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 256
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The individuals primary email address"
          },
          "phone": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The individuals primary phone number in format \"+12223334444\""
          },
          "residential_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh",
            "description": "The residential address of the individual. This must be a physical address, not a PO Box."
          },
          "transliterated_residential_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh",
            "description": "Required when any part of the `residential_address` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~"
          },
          "birth_date": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd. Must be at least 18 years old.",
            "minLength": 10,
            "maxLength": 10
          },
          "signed_agreement_id": {
            "writeOnly": true,
            "type": "string",
            "description": "The ID of the signed agreement that the customer completed. You can get a signed agreement id for a _new_ customer by following this guide [here](https://apidocs.bridge.xyz/docs/terms-of-service#tos-acceptance-for-a-new-customer).\n",
            "minLength": 1,
            "maxLength": 1024
          },
          "endorsements": {
            "writeOnly": true,
            "type": "array",
            "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`.\n\n_`proof_of_address` document is required for `sepa` to be approved_\n",
            "items": {
              "enum": [
                "base",
                "sepa",
                "spei"
              ]
            }
          },
          "account_purpose": {
            "type": "string",
            "description": "What is the primary purpose of the customer's account?\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/individuals)_\n",
            "enum": [
              "charitable_donations",
              "ecommerce_retail_payments",
              "investment_purposes",
              "operating_a_company",
              "other",
              "payments_to_friends_or_family_abroad",
              "personal_or_living_expenses",
              "protect_wealth",
              "purchase_goods_and_services",
              "receive_payment_for_freelancing",
              "receive_salary"
            ]
          },
          "account_purpose_other": {
            "type": "string",
            "description": "A supplemental description of the `account_purpose`.\n\n_Required if the `account_purpose` is `other`._\n"
          },
          "employment_status": {
            "type": "string",
            "description": "What is the customer's current employment status?\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/individuals)_\n",
            "enum": [
              "employed",
              "homemaker",
              "retired",
              "self_employed",
              "student",
              "unemployed"
            ]
          },
          "expected_monthly_payments_usd": {
            "type": "string",
            "description": "What is the expected monthly volume of payments the customer will be sending or receiving?\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/individuals)_\n",
            "enum": [
              "0_4999",
              "5000_9999",
              "10000_49999",
              "50000_plus"
            ]
          },
          "acting_as_intermediary": {
            "type": "boolean",
            "description": "Is the customer acting as an intermediary for a third party?\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/individuals)_\n"
          },
          "most_recent_occupation": {
            "type": "string",
            "description": "What is the customer's most recent occupation? Specify the relevant alphanumeric occupation code. See the [list of occupations](https://apidocs.bridge.xyz/page/sof-eu-most-recent-occupation-list) for the complete list of valid occupations and codes. _Required for Restricted countries._\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/individuals)_\n"
          },
          "source_of_funds": {
            "type": "string",
            "description": "The individuals source of funds, e.g. government_benefits, investments_loans, salary, etc.\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/individuals)_\n",
            "enum": [
              "company_funds",
              "ecommerce_reseller",
              "gambling_proceeds",
              "gifts",
              "government_benefits",
              "inheritance",
              "investments_loans",
              "pension_retirement",
              "salary",
              "sale_of_assets_real_estate",
              "savings",
              "someone_elses_funds"
            ]
          },
          "nationality": {
            "type": "string",
            "description": "The ISO 3166-1 (three-character) country code representing the nationality of the customer.",
            "writeOnly": true
          },
          "verified_selfie_at": {
            "type": "string",
            "description": "The timestamp for when individual's selfie was successfully verified.",
            "writeOnly": true
          },
          "completed_customer_safety_check_at": {
            "type": "string",
            "description": "The timestamp for when individual successfully passed customer safety check.",
            "writeOnly": true
          },
          "identifying_information": {
            "$ref": "#/components/schemas/IdentifyingInformation"
          },
          "documents": {
            "$ref": "#/components/schemas/IndividualDocuments"
          }
        }
      },
      "IdentifyingInformation": {
        "writeOnly": true,
        "type": "array",
        "title": "Identification Information",
        "items": {
          "type": "object",
          "required": [
            "issuing_country",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The `type` provided determines whether you are submitting a tax identification number or some form of government-issued ID.\n\nReference these lists for tax identification numbers by country: [Individuals](https://apidocs.bridge.xyz/docs/individual-tax-identification-numbers-by-country), [Businesses](https://apidocs.bridge.xyz/docs/business-tax-identification-numbers-by-country)\n\nHere is the list of acceptable government issued id documents: `drivers_license`, `matriculate_id`, `military_id`, `permanent_residency_id`, `state_or_provincial_id`, `visa`, `national_id`, `passport`\n\nAll customers must provide at least one Tax Identification Number for their issuing country. If a country cannot be found, please select `other` and ensure the `description` field is provided.\n\nNon-U.S. `individual` customers and associated persons must include a combination of at least one Tax Identification Number and at least one photo id document such as a `passport` (with `image_front`) or a government-issued `drivers_license`.\n",
              "enum": [
                "drivers_license",
                "matriculate_id",
                "military_id",
                "national_id",
                "passport",
                "permanent_residency_id",
                "state_or_provincial_id",
                "visa",
                "abn",
                "acn",
                "ahv",
                "ak",
                "aom",
                "arbn",
                "avs",
                "bc",
                "bce",
                "bin",
                "bir",
                "bp",
                "brn",
                "bsn",
                "bvn",
                "cc",
                "cdi",
                "cedula_juridica",
                "cf",
                "cif",
                "cin",
                "cipc",
                "cn",
                "cnp",
                "cnpj",
                "cpf",
                "cpr",
                "crc",
                "crib",
                "crn",
                "cro",
                "cui",
                "cuil",
                "curp",
                "cuit",
                "cvr",
                "edrpou",
                "ein",
                "embg",
                "emirates_id",
                "en",
                "fin",
                "fn",
                "gstin",
                "gui",
                "hetu",
                "hkid",
                "hn",
                "ic",
                "ico",
                "id",
                "id_broj",
                "idno",
                "idnp",
                "idnr",
                "if",
                "iin",
                "ik",
                "inn",
                "ird",
                "itin",
                "itr",
                "iva",
                "jmbg",
                "kbo",
                "kvk",
                "matricule",
                "mf",
                "mn",
                "ms",
                "mst",
                "nic",
                "nicn",
                "nie",
                "nif",
                "nin",
                "nino",
                "nip",
                "nipc",
                "nipt",
                "nit",
                "npwp",
                "nric",
                "nrn",
                "nrt",
                "ntn",
                "nuit",
                "nzbn",
                "oib",
                "org",
                "other",
                "pan",
                "partita_iva",
                "pesel",
                "pib",
                "pin",
                "pk",
                "ppsn",
                "qid",
                "rc",
                "regon",
                "rfc",
                "ricn",
                "rif",
                "rn",
                "rnc",
                "rnokpp",
                "rp",
                "rrn",
                "rtn",
                "ruc",
                "rut",
                "si",
                "sin",
                "siren",
                "siret",
                "spi",
                "ssm",
                "ssn",
                "steuer_id",
                "strn",
                "tckn",
                "tfn",
                "tin",
                "tpin",
                "trn",
                "ucn",
                "uen",
                "uic",
                "uid",
                "usc",
                "ust_idnr",
                "utr",
                "vat",
                "vkn",
                "voen",
                "y_tunnus"
              ]
            },
            "issuing_country": {
              "type": "string",
              "description": "The ISO 3166-1 (three-character) country code that issued the provided document."
            },
            "number": {
              "type": "string",
              "description": "The unique identifier of the document. Required if this document is being used as a tax identification number (e.g., you are providing a passport or national_id with no other identification)."
            },
            "description": {
              "type": "string",
              "description": "A description describing the provided document. This field is required when `other` is selected."
            },
            "expiration": {
              "type": "string",
              "description": "The expiration date of the given document in yyyy-mm-dd format."
            },
            "image_front": {
              "type": "string",
              "description": "This field is optionally accepted for tax_id types, but required for government_id types. Base64 encoded image* of the front side of the provided document, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents], with a minimum size of 200px x 200px \\n\\n*Maximum File Size: 15MB\\n\\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n\n_Note: When combined with an `image_back`, the combined size of both images must not exceed 24MB._\n"
            },
            "image_back": {
              "type": "string",
              "description": "Base64 encoded image* of the back side of the provided document, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents], with a minimum size of 200px x 200px \\n\\n*Maximum File Size: 15MB\\n\\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n\n_Note: When combined with an `image_front`, the combined size of both images must not exceed 24MB._\n"
            }
          }
        }
      },
      "IndividualDocuments": {
        "writeOnly": true,
        "type": "array",
        "title": "Documents",
        "description": "Please click \"ADD OBJECT\" for more information.",
        "items": {
          "type": "object",
          "required": [
            "purposes",
            "file"
          ],
          "properties": {
            "purposes": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "proof_of_account_purpose",
                  "proof_of_address",
                  "proof_of_individual_name_change",
                  "proof_of_relationship",
                  "proof_of_source_of_funds",
                  "proof_of_source_of_wealth",
                  "proof_of_tax_identification",
                  "other"
                ]
              },
              "description": "A list of purposes that the given document serves. Click \"ADD STRING\" to see common document purposes for individuals, or view the full list of possible values [here](https://apidocs.bridge.xyz/docs/supported-documents)."
            },
            "file": {
              "type": "string",
              "description": "Base64 encoded image* of the provided document, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents], with a minimum size of 200px x 200px \n\n*Maximum File Size: 24MB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif"
            },
            "description": {
              "type": "string",
              "description": "A description describing the provided document. This field is required when `other` is provided as one of the purposes."
            }
          }
        }
      },
      "BusinessDocuments": {
        "writeOnly": true,
        "type": "array",
        "title": "Documents",
        "description": "Please click \"ADD OBJECT\" for more information.",
        "items": {
          "type": "object",
          "required": [
            "purposes",
            "file"
          ],
          "properties": {
            "purposes": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "aml_comfort_letter",
                  "business_formation",
                  "directors_registry",
                  "e_signature_certificate",
                  "evidence_of_good_standing",
                  "flow_of_funds",
                  "formation_document",
                  "marketing_materials",
                  "ownership_chart",
                  "ownership_information",
                  "proof_of_account_purpose",
                  "proof_of_address",
                  "proof_of_entity_name_change",
                  "proof_of_nature_of_business",
                  "proof_of_signatory_authority",
                  "proof_of_source_of_funds",
                  "proof_of_source_of_wealth",
                  "proof_of_tax_identification",
                  "shareholder_register",
                  "other"
                ]
              },
              "description": "A list of purposes that the given document serves. Click \"ADD STRING\" to see common document purposes for businesses, or view the full list of possible values [here](https://apidocs.bridge.xyz/docs/supported-documents).\n\n`business_formation` and `ownership_information` documents are required for businesses.\n"
            },
            "file": {
              "type": "string",
              "description": "Base64 encoded image of the provided document, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents], with a minimum size of 200px x 200px \n\n*Maximum File Size: 24MB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif"
            },
            "description": {
              "type": "string",
              "description": "A description describing the provided document. This field is required when `other` is provided as one of the purposes."
            }
          }
        }
      },
      "CreateBusinessCustomerPayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateBusinessCustomerPayload"
          },
          {
            "title": "Business Customer"
          }
        ]
      },
      "UpdateBusinessCustomerPayload": {
        "title": "Business Customer",
        "required": [
          "type",
          "business_legal_name",
          "business_trade_name",
          "business_description",
          "email",
          "business_type",
          "business_industry",
          "registered_address",
          "physical_address",
          "signed_agreement_id",
          "is_dao",
          "associated_persons",
          "identifying_information",
          "documents",
          "has_material_intermediary_ownership",
          "account_purpose",
          "source_of_funds"
        ],
        "properties": {
          "type": {
            "description": "Type of the customer (individual vs. business)",
            "type": "string",
            "minLength": 1,
            "enum": [
              "business"
            ]
          },
          "business_legal_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The official registered name of the business as documented with government authorities."
          },
          "transliterated_business_legal_name": {
            "type": "string",
            "description": "Required if `business_legal_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 1024
          },
          "business_trade_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The trading name or DBA (Doing Business As) name under which the business operates publicly."
          },
          "transliterated_business_trade_name": {
            "type": "string",
            "description": "Required if `business_trade` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 1024
          },
          "business_description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "A brief summary of the business"
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The business's primary email address"
          },
          "business_type": {
            "description": "How the business is legally registered",
            "type": "string",
            "minLength": 1,
            "enum": [
              "cooperative",
              "corporation",
              "llc",
              "other",
              "partnership",
              "sole_prop",
              "trust"
            ]
          },
          "primary_website": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The business's primary website/web presence. A document with purpose 'proof_of_nature_of_business' is required if this is not provided"
          },
          "other_websites": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minLength": 1,
            "maxLength": 1024,
            "description": "The business's other websites and social media handles"
          },
          "registered_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh",
            "description": "The official registered address of the business."
          },
          "transliterated_registered_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh",
            "description": "Required if any part of the `registered_address` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~"
          },
          "physical_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh",
            "description": "The physical address for the primary place of business. This must be a physical address and cannot be a PO Box."
          },
          "transliterated_physical_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh",
            "description": "Required if any part of the `physical_address` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~"
          },
          "signed_agreement_id": {
            "writeOnly": true,
            "type": "string",
            "description": "The ID of the signed agreement that the customer completed. You can get a signed agreement id for a _new_ customer by following [this guide](https://apidocs.bridge.xyz/docs/terms-of-service#tos-acceptance-for-a-new-customer).\n",
            "minLength": 1,
            "maxLength": 1024
          },
          "is_dao": {
            "type": "boolean",
            "description": "Whether the business is a DAO (Decentralized Autonomous Organization)"
          },
          "compliance_screening_explanation": {
            "type": "string",
            "description": "Required if `conducts_money_services` is true. A detailed description of the business's compliance and anti-money laundering controls and practices.",
            "minLength": 1,
            "maxLength": 1024
          },
          "associated_persons": {
            "type": "array",
            "description": "List of notable people associated with the business such as UBOs.",
            "items": {
              "$ref": "#/components/schemas/AssociatedPerson"
            }
          },
          "endorsements": {
            "writeOnly": true,
            "type": "array",
            "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`.\n",
            "items": {
              "enum": [
                "base",
                "sepa",
                "spei"
              ]
            }
          },
          "business_industry": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The industry in which this business operates. Click [here](https://apidocs.bridge.xyz/page/business-industry-list-updated-2022-naics-codes) for the complete list of valid industries and codes."
          },
          "publicly_traded_listings": {
            "writeOnly": true,
            "type": "array",
            "description": "A list of public exchanges that the company is traded on if applicable.",
            "items": {
              "type": "object",
              "required": [
                "market_identifier_code",
                "stock_number",
                "ticker"
              ],
              "properties": {
                "market_identifier_code": {
                  "type": "string",
                  "description": "The 4-digit Market Identifier Code (MIC) (ISO 10383) for the venue where the business is publicly listed and traded."
                },
                "stock_number": {
                  "type": "string",
                  "description": "The 12-digit International Securities Identification Number (ISIN) of the company without dashes (-)."
                },
                "ticker": {
                  "type": "string",
                  "description": "The ticker for the business's publicly traded listing."
                }
              }
            }
          },
          "ownership_threshold": {
            "type": "integer",
            "description": "The applicable beneficial ownership threshold for the submitted `associated_persons` information. Valid values are between 5 to 25. Default value is 25."
          },
          "has_material_intermediary_ownership": {
            "type": "boolean",
            "description": "The business has at least one intermediate legal entity owner with 25% or more ownership"
          },
          "estimated_annual_revenue_usd": {
            "type": "string",
            "description": "Estimated annual revenue in USD\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n",
            "enum": [
              "0_99999",
              "100000_999999",
              "1000000_9999999",
              "10000000_49999999",
              "50000000_24999999",
              "250000000_plus"
            ]
          },
          "expected_monthly_payments_usd": {
            "type": "integer",
            "description": "Expected monthly payments in USD\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n"
          },
          "operates_in_prohibited_countries": {
            "type": "boolean",
            "description": "Does the business operate in any prohibited countries?\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n"
          },
          "account_purpose": {
            "type": "string",
            "description": "What is the primary purpose of the business account?",
            "enum": [
              "charitable_donations",
              "ecommerce_retail_payments",
              "investment_purposes",
              "other",
              "payments_to_friends_or_family_abroad",
              "payroll",
              "personal_or_living_expenses",
              "protect_wealth",
              "purchase_goods_and_services",
              "receive_payments_for_goods_and_services",
              "tax_optimization",
              "third_party_money_transmission",
              "treasury_management"
            ]
          },
          "account_purpose_other": {
            "type": "string",
            "description": "Required if the primary purpose is 'other'."
          },
          "high_risk_activities_explanation": {
            "type": "string",
            "description": "An explanation of the high risk activities that the business performs. \n\n_Required if `high_risk_activities` contains entries other than `none_of_the_above`_\n"
          },
          "high_risk_activities": {
            "type": "array",
            "description": "List of high-risk activities the business is involved in.\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n",
            "items": {
              "type": "string",
              "enum": [
                "adult_entertainment",
                "gambling",
                "hold_client_funds",
                "investment_services",
                "lending_banking",
                "marijuana_or_related_services",
                "money_services",
                "nicotine_tobacco_or_related_services",
                "operate_foreign_exchange_virtual_currencies_brokerage_otc",
                "pharmaceuticals",
                "precious_metals_precious_stones_jewelry",
                "safe_deposit_box_rentals",
                "third_party_payment_processing",
                "weapons_firearms_and_explosives",
                "none_of_the_above"
              ]
            }
          },
          "source_of_funds": {
            "type": "string",
            "description": "The source of funds for the business, e.g. profits, income, venture capital, etc.",
            "enum": [
              "business_loans",
              "grants",
              "inter_company_funds",
              "investment_proceeds",
              "legal_settlement",
              "owners_capital",
              "pension_retirement",
              "sale_of_assets",
              "sales_of_goods_and_services",
              "tax_refund",
              "third_party_funds",
              "treasury_reserves"
            ]
          },
          "source_of_funds_description": {
            "type": "string",
            "description": "Description of the source of funds for the business' account.\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n"
          },
          "conducts_money_services": {
            "type": "boolean",
            "description": "The business offers money services, investment products, and/or other financial services.\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n"
          },
          "conducts_money_services_using_bridge": {
            "type": "boolean",
            "description": "The business plans to conduct money services, investment products, and/or other financial services using its Bridge account. A document with purpose 'flow_of_funds' is required if this is true.\n\n_Required if `conducts_money_services` is true_\n"
          },
          "conducts_money_services_description": {
            "type": "string",
            "description": "Description of the money services offered by the business.\n\n_Required if `conducts_money_services` is true_\n"
          },
          "identifying_information": {
            "$ref": "#/components/schemas/IdentifyingInformation"
          },
          "documents": {
            "$ref": "#/components/schemas/BusinessDocuments"
          },
          "regulated_activity": {
            "type": "object",
            "required": [
              "regulated_activities_description",
              "primary_regulatory_authority_country",
              "primary_regulatory_authority_name",
              "license_number"
            ],
            "properties": {
              "regulated_activities_description": {
                "type": "string",
                "description": "A detailed description of the regulated activities the business is licensed to conduct."
              },
              "primary_regulatory_authority_country": {
                "type": "string",
                "description": "The ISO 3166-1 (three-character) country code."
              },
              "primary_regulatory_authority_name": {
                "type": "string",
                "description": "The name of the primary regulatory authority that oversees the business's regulated activities."
              },
              "license_number": {
                "type": "string",
                "description": "The license number or registration number assigned by the business's primary regulator."
              }
            }
          }
        }
      },
      "UpdateBusinessCustomerPayload_Partial": {
        "title": "Business Customer - Partial Update",
        "properties": {
          "endorsements": {
            "writeOnly": true,
            "type": "array",
            "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`.\n",
            "items": {
              "enum": [
                "base",
                "sepa",
                "spei"
              ]
            }
          },
          "registered_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh"
          },
          "physical_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh"
          },
          "account_purpose": {
            "type": "string",
            "description": "What is the primary purpose of the business account?",
            "enum": [
              "charitable_donations",
              "ecommerce_retail_payments",
              "investment_purposes",
              "other",
              "payments_to_friends_or_family_abroad",
              "payroll",
              "personal_or_living_expenses",
              "protect_wealth",
              "purchase_goods_and_services",
              "receive_payments_for_goods_and_services",
              "tax_optimization",
              "third_party_money_transmission",
              "treasury_management"
            ]
          },
          "account_purpose_other": {
            "type": "string",
            "description": "A supplemental description of the `account_purpose`.\n\n_Required if the primary purpose is 'other'_\n"
          },
          "expected_monthly_payments_usd": {
            "type": "string",
            "description": "Expected monthly volume of payments the customer will be sending or receiving.\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n",
            "enum": [
              "0_4999",
              "5000_9999",
              "10000_49999",
              "50000_plus"
            ]
          },
          "estimated_annual_revenue_usd": {
            "type": "string",
            "description": "Estimated annual revenue in USD\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n",
            "enum": [
              "0_99999",
              "100000_999999",
              "1000000_9999999",
              "10000000_49999999",
              "50000000_24999999",
              "250000000_plus"
            ]
          },
          "acting_as_intermediary": {
            "type": "boolean",
            "description": "Is the customer acting as an intermediary for a third party?\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n"
          },
          "source_of_funds": {
            "type": "string",
            "description": "The source of funds for the business, e.g. profits, income, venture capital, etc.",
            "enum": [
              "business_loans",
              "grants",
              "inter_company_funds",
              "investment_proceeds",
              "legal_settlement",
              "owners_capital",
              "pension_retirement",
              "sale_of_assets",
              "sales_of_goods_and_services",
              "tax_refund",
              "third_party_funds",
              "treasury_reserves"
            ]
          },
          "source_of_funds_description": {
            "type": "string",
            "description": "Description of the source of funds for the business' account.\n"
          },
          "conducts_money_services": {
            "type": "boolean",
            "description": "The business offers money services, investment products, and/or other financial services.\n"
          },
          "conducts_money_services_using_bridge": {
            "type": "boolean",
            "description": "The business plans to conduct money services, investment products, and/or other financial services using its Bridge account. A document with purpose 'flow_of_funds' is required if this is true.\n\n_Required if `conducts_money_services` is true_\n"
          },
          "conducts_money_services_description": {
            "type": "string",
            "description": "Description of the money services offered by the business.\n\n_Required if `conducts_money_services` is true_\n"
          },
          "compliance_screening_explanation": {
            "type": "string",
            "description": "A detailed description of the business's compliance and anti-money laundering controls and practices.\n\n_Required if `conducts_money_services` is true_\n",
            "minLength": 1,
            "maxLength": 1024
          },
          "operates_in_prohibited_countries": {
            "type": "boolean",
            "description": "Does the business operate in any prohibited countries?\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n"
          },
          "high_risk_activities": {
            "type": "array",
            "description": "List of high-risk activities the business is involved in.\n\n_Required for high risk customers. More information found [here](https://apidocs.bridge.xyz/docs/business-accounts)_\n",
            "items": {
              "type": "string",
              "enum": [
                "adult_entertainment",
                "gambling",
                "hold_client_funds",
                "investment_services",
                "lending_banking",
                "marijuana_or_related_services",
                "money_services",
                "nicotine_tobacco_or_related_services",
                "operate_foreign_exchange_virtual_currencies_brokerage_otc",
                "pharmaceuticals",
                "precious_metals_precious_stones_jewelry",
                "safe_deposit_box_rentals",
                "third_party_payment_processing",
                "weapons_firearms_and_explosives",
                "none_of_the_above"
              ]
            }
          },
          "high_risk_activities_explanation": {
            "type": "string",
            "description": "An explanation of the high risk activities that the business performs.\n\n_Required if `high_risk_activities` contains entries other than `none_of_the_above`_\n"
          },
          "documents": {
            "$ref": "#/components/schemas/BusinessDocuments"
          }
        }
      },
      "AssociatedPersonResponse": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the associated person"
          },
          "email": {
            "type": "string",
            "description": "The email address of the associated person"
          },
          "first_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 1024,
            "description": "The first name of the associated person"
          },
          "last_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 1024,
            "description": "The last name of the associated person"
          },
          "has_ownership": {
            "type": "boolean",
            "description": "True if this person has at least 25% ownership of the business."
          },
          "has_control": {
            "type": "boolean",
            "description": "True if this is the control person of the company, having significant responsibility to control, manage or influence the activities of the business entity."
          },
          "is_signer": {
            "type": "boolean",
            "description": "True if this person is able to authorize transactions on behalf of the business."
          },
          "title": {
            "type": "string",
            "description": "The title of this associated person at the company, e.g. CEO, CFO, etc."
          },
          "attested_ownership_structure_at": {
            "type": "string",
            "description": "When this individual attested to the correctness of the ownership structure provided to Bridge. If provided by at least one control person, ownership documents for the business are not required."
          },
          "relationship_established_at": {
            "type": "string",
            "description": "When the associated person relationship was established in format yyyy-mm-dd."
          },
          "created_at": {
            "type": "integer",
            "description": "Created timestamp in milliseconds since Unix epoch"
          },
          "updated_at": {
            "type": "integer",
            "description": "Last updated timestamp in milliseconds since Unix epoch"
          }
        }
      },
      "AssociatedPerson": {
        "required": [
          "first_name",
          "last_name",
          "email",
          "residential_address",
          "identifying_information",
          "birth_date",
          "has_ownership",
          "has_control",
          "is_signer",
          "relationship_established_at"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The first name of the associated person"
          },
          "middle_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The middle name of the associated person"
          },
          "last_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 1024,
            "description": "The last name of the associated person"
          },
          "transliterated_first_name": {
            "type": "string",
            "description": "Required when the `first_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 256
          },
          "transliterated_middle_name": {
            "type": "string",
            "description": "Required when the `middle_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 256
          },
          "transliterated_last_name": {
            "type": "string",
            "description": "Required when the `last_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 256
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "description": "The persons primary email address"
          },
          "phone": {
            "description": "The persons phone in format \"+12223334444\"",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
          },
          "residential_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh",
            "description": "The residential address of the associated person. This must be a physical address and cannot be a PO Box."
          },
          "transliterated_residential_address": {
            "writeOnly": true,
            "$ref": "#/components/schemas/Address2025WinterRefresh",
            "description": "Required when any part of the `residential_address` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~"
          },
          "birth_date": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd. Must be at least 18 years old.",
            "minLength": 10,
            "maxLength": 10
          },
          "has_ownership": {
            "type": "boolean",
            "description": "True if this person has at least 25% ownership of the business."
          },
          "has_control": {
            "type": "boolean",
            "description": "True if this is the control person of the company, having significant responsibility to control, manage or influence the activities of the business entity. At least one control person must be specified. "
          },
          "is_signer": {
            "type": "boolean",
            "description": "True if this person is able to authorize transactions on behalf of the business. At least one signer must be specified."
          },
          "is_director": {
            "type": "boolean",
            "description": "True if this person is an appointed director of the company."
          },
          "title": {
            "type": "string",
            "description": "The title of this beneficial owner at the company, e.g. CEO, CFO, etc. Required if has_control is true.",
            "minLength": 1,
            "maxLength": 1024
          },
          "ownership_percentage": {
            "type": "integer",
            "description": "Ultimate ownership percentage of the business.",
            "writeOnly": true
          },
          "attested_ownership_structure_at": {
            "type": "string",
            "description": "The date or timestamp when this individual attested to the correctness of the ownership structure provided to Bridge. If provided by at least one control person, ownership documents for the business are not required.",
            "writeOnly": true
          },
          "relationship_established_at": {
            "type": "string",
            "description": "The date or timestamp when the beneficial owner relationship was established in format yyyy-mm-dd."
          },
          "verified_selfie_at": {
            "type": "string",
            "description": "The date or timestamp for when individual's selfie was successfully verified.",
            "writeOnly": true
          },
          "completed_customer_safety_check_at": {
            "type": "string",
            "description": "The date or timestamp for when individual successfully passed customer safety check.",
            "writeOnly": true
          },
          "identifying_information": {
            "$ref": "#/components/schemas/IdentifyingInformation"
          },
          "documents": {
            "$ref": "#/components/schemas/IndividualDocuments"
          }
        }
      },
      "Payin": {
        "required": [
          "customer_id",
          "payment_rail",
          "currency",
          "amount",
          "state"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "customer_id": {
            "$ref": "#/components/schemas/Id"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/PaymentRail"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "amount": {
            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc.",
            "type": "string"
          },
          "state": {
            "description": "current state of the payin (more info to come!)",
            "type": "string",
            "readOnly": true
          },
          "transaction_hash": {
            "description": "The hash of the depositing transaction, for crypto payins",
            "type": "string",
            "readOnly": true
          },
          "to_address": {
            "description": "The destination address of the transaction, for crypto payins",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "FakePayin": {
        "required": [
          "customer_id",
          "payment_rail",
          "currency",
          "amount",
          "state"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "customer_id": {
            "$ref": "#/components/schemas/Id"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/PaymentRail"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "amount": {
            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string"
          },
          "state": {
            "description": "current state of the payin (more info to come!)",
            "type": "string",
            "readOnly": true
          },
          "transaction_hash": {
            "description": "The hash of the depositing transaction, for crypto payins only",
            "type": "string"
          },
          "to_address": {
            "description": "The destination address of the transaction, for crypto payins only",
            "type": "string"
          }
        }
      },
      "Payout": {
        "required": [
          "customer_id",
          "payment_rail",
          "currency",
          "amount",
          "external_account_id",
          "state"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "customer_id": {
            "$ref": "#/components/schemas/Id"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/PaymentRail"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "amount": {
            "description": "Amount of the payout, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string"
          },
          "external_account_id": {
            "$ref": "#/components/schemas/Id"
          },
          "state": {
            "description": "current state of the payout (more info to come!)",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TransferRequest": {
        "required": [
          "amount",
          "on_behalf_of",
          "source",
          "destination"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "client_reference_id": {
            "$ref": "#/components/schemas/client_reference_id"
          },
          "amount": {
            "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          },
          "on_behalf_of": {
            "description": "The id of the Bridge customer that you are moving funds on behalf of.",
            "type": "string"
          },
          "developer_fee": {
            "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          },
          "developer_fee_percent": {
            "description": "The fee percent, expressed as a decimal string from `0.0` to `100.0`, represents the percentage of the transfer you wish to reserve for your own account.\n\nThis field must be set instead of `developer_fee` when using [Flexible Amounts](https://apidocs.bridge.xyz/v1/docs/developer-fees#transfers-with-flexible-amounts).",
            "type": "string"
          },
          "source": {
            "description": "The source of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferSource"
              },
              {
                "properties": {
                  "from_address": {
                    "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer.",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "destination": {
            "description": "The destination of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferDestination"
              },
              {
                "properties": {
                  "to_address": {
                    "description": "The crypto wallet address that the customer wishes to ultimately receive funds at, in order to complete this transfer",
                    "type": "string"
                  },
                  "wire_message": {
                    "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire. This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard.",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "features": {
            "description": "Features that should be enabled for this transfer. See [Transfer Features](https://apidocs.bridge.xyz/docs/transfers-1#transfer-features) for more details.",
            "type": "object",
            "properties": {
              "flexible_amount": {
                "type": "boolean"
              },
              "static_template": {
                "type": "boolean"
              },
              "allow_any_from_address": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "TransferUpdateRequest": {
        "properties": {
          "amount": {
            "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          },
          "developer_fee": {
            "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          }
        }
      },
      "TransferResponse": {
        "required": [
          "id",
          "amount",
          "developer_fee",
          "currency",
          "on_behalf_of",
          "source",
          "destination",
          "state",
          "receipt",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "client_reference_id": {
            "$ref": "#/components/schemas/client_reference_id"
          },
          "amount": {
            "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          },
          "currency": {
            "description": "Fiat currency for the transfer amount and developer fee. It's the source currency if that is a fiat currency or the fiat currency to which the source currency is pegged.",
            "$ref": "#/components/schemas/EuroInclusiveFiatCurrency"
          },
          "on_behalf_of": {
            "description": "The id of the Bridge customer that you are moving funds on behalf of.",
            "type": "string"
          },
          "developer_fee": {
            "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account. This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          },
          "source": {
            "description": "The source of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferSource"
              },
              {
                "properties": {
                  "currency": {
                    "description": "The source currency",
                    "$ref": "#/components/schemas/EuroInclusiveCurrency"
                  },
                  "payment_rail": {
                    "description": "The source payment rail",
                    "$ref": "#/components/schemas/BridgeWalletSepaSwiftInclusivePaymentRail"
                  },
                  "from_address": {
                    "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "destination": {
            "description": "The destination of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferDestination"
              },
              {
                "properties": {
                  "currency": {
                    "description": "The destination currency",
                    "$ref": "#/components/schemas/EuroInclusiveCurrency"
                  },
                  "payment_rail": {
                    "description": "The destination payment rail",
                    "$ref": "#/components/schemas/SepaSwiftInclusivePaymentRail"
                  },
                  "to_address": {
                    "description": "The crypto wallet address that the customer wishes to ultimately receive funds at, in order to complete this transfer",
                    "type": "string"
                  },
                  "wire_message": {
                    "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire.  This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard.",
                    "type": "string"
                  },
                  "blockchain_memo": {
                    "description": "A message to be sent with a crypto transaction, only allowed when the payment rail is Stellar.",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "state": {
            "description": "Status of the transfer. See [Transfer States](https://apidocs.bridge.xyz/docs/transfers-1#transfer-states) for more details.",
            "readOnly": true,
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "source_deposit_instructions": {
            "readOnly": true,
            "description": "Some transfers require a deposit to be made by the customer before Bridge can start the process.  Instructions for how to kick off the transfer will be included here.  The deposit must match these instructions exactly, or the transfer will fail.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DepositInstructions"
              },
              {
                "properties": {
                  "currency": {
                    "description": "The source currency",
                    "$ref": "#/components/schemas/EuroInclusiveCurrency"
                  },
                  "payment_rail": {
                    "description": "The source payment rail",
                    "$ref": "#/components/schemas/SepaSwiftInclusivePaymentRail"
                  },
                  "amount": {
                    "description": "Amount of the deposit, expressed as a decimal string. It's denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                    "type": "string"
                  },
                  "deposit_message": {
                    "description": "The message that the customer MUST include in their `wire memo/message`, `ach push description`, or `sepa reference`.",
                    "type": "string"
                  },
                  "blockchain_memo": {
                    "description": "If present, the message that the customer MUST include in their on chain transfer. Only used for memo-based blockchains such as Stellar and Tron",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "receipt": {
            "description": "Receipt information of a transfer",
            "$ref": "#/components/schemas/Receipt"
          },
          "return_details": {
            "readOnly": true,
            "description": "Return information, if the transfer has been returned.",
            "$ref": "#/components/schemas/TransferReturnDetails"
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the transfer",
            "format": "date-time"
          },
          "updated_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of update of the transfer",
            "format": "date-time"
          }
        }
      },
      "TransferReturnDetails": {
        "properties": {
          "reason": {
            "description": "The reason for the return, as given by the returning financial institution.",
            "type": "string"
          },
          "refund_reference_id": {
            "description": "A unique identifier (such as transaction hash) for the refund transaction.",
            "type": "string"
          }
        }
      },
      "Receipt": {
        "required": [
          "initial_amount",
          "developer_fee",
          "exchange_fee",
          "subtotal_amount"
        ],
        "properties": {
          "initial_amount": {
            "description": "The initial amount of the transfer, represented as a decimal string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see the top-level `currency` field for more info)",
            "type": "string"
          },
          "developer_fee": {
            "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the transfer's fiat currency (see the top-level `currency` field for more info).",
            "type": "string"
          },
          "exchange_fee": {
            "description": "The fee, expressed as a decimal string, represents the amount Bridge charges for facilitating the transfer.  This is the final amount to take out of what is ultimately received by your customer, not a percentage.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
            "type": "string"
          },
          "subtotal_amount": {
            "description": "The initial amount of the transfer less fixed fees (including the developer_fee and exchange_fee). Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
            "type": "string"
          },
          "remaining_prefunded_balance": {
            "description": "For Prefunded Accounts, this value will represent the remaining account balance after the transfer.",
            "type": "string"
          },
          "gas_fee": {
            "description": "The fee, expressed as a decimal string. It's deducted from the withdrawn amount to pay for gas.  Only nonzero to crypto withdrawals that cost gas (e.g. USDT or DAI), and only known when the transaction is confirmed on-chain.  Will be missing if not yet known.\n\nIt's denominated in the fiat currency to which the destination currency is pegged.",
            "type": "string"
          },
          "final_amount": {
            "description": "The final amount of the transfer, expressed as a decimal string, equal to the subtotal_amount minus any gas fees.  If the gas fee is not known, this field will be missing.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the destination currency if that is a fiat currency or the fiat currency to which the destination currency is pegged.",
            "type": "string"
          },
          "source_tx_hash": {
            "description": "The hash of the on-chain deposit to the source address, where applicable"
          },
          "destination_tx_hash": {
            "description": "The hash of the on-chain transfer to the destination address, where applicable"
          },
          "exchange_rate": {
            "description": "The effective exchange rate can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee. This rate includes a currency conversion spread and is subject to a rounding precision loss during the calculation. Currently it's populated for SEPA onramp/offramp transfers only."
          },
          "url": {
            "description": "The URL of a user-facing copy of the receipt.",
            "type": "string"
          }
        }
      },
      "DrainReceipt": {
        "required": [
          "initial_amount",
          "developer_fee",
          "exchange_rate",
          "subtotal_amount",
          "converted_amount",
          "outgoing_amount",
          "destination_currency"
        ],
        "properties": {
          "initial_amount": {
            "description": "The initial amount of the drain, denominated in the fiat currency to which the currency of the Liquidation Address is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.000000000000000001\" etc.",
            "type": "string"
          },
          "developer_fee": {
            "description": "The developer fee, denominated in the fiat currency to which the currency of the Liquidation Address is pegged. This fee is a specific amount deducted from the initial total before conversion, rather than a percentage.",
            "type": "string"
          },
          "subtotal_amount": {
            "description": "The initial amount of the drain less the `developer_fee`, denominated in the fiat currency to which the Liquidation Address currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.000000000000000001\" etc.",
            "type": "string"
          },
          "gas_fee": {
            "description": "The fee that is deducted from the withdrawn amount to pay for gas.  Only included for crypto withdrawals that cost gas (e.g. USDT or DAI). It's denominated in the fiat currency to which the destination currency is pegged.",
            "type": "string"
          },
          "converted_amount": {
            "description": "The converted amount of the drain. It's denominated in the destination currency or its pegged fiat currency.",
            "type": "string"
          },
          "exchange_rate": {
            "description": "The effective exchange rate that can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee."
          },
          "outgoing_amount": {
            "description": "The final amount of the drain, equal to the `converted_amount` minus any gas fees. It's denominated in the destination currency or its pegged fiat currency.",
            "type": "string"
          },
          "destination_currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "The currency of the fund sent to the customer."
          },
          "url": {
            "description": "The URL of a user-facing copy of the receipt.",
            "type": "string"
          }
        }
      },
      "PutWebhookPayload": {
        "properties": {
          "url": {
            "description": "The new HTTPS URL that Bridge will send events to.",
            "type": "string",
            "minLength": 1
          },
          "status": {
            "description": "The new status of the webhook endpoint.  If set to \"active\", the webhook will be enabled and will send requests to the new URL.  If set to \"disabled\", the webhook will be disabled and will not send requests to the URL.",
            "type": "string",
            "enum": [
              "active",
              "disabled"
            ]
          },
          "event_categories": {
            "type": "array",
            "description": "The list of event categories that the webhook endpoint will receive. Note that if modified, the webhook endpoint will receive events for new categories only from the current point onwards.",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/WebhookEventCategory"
            }
          }
        }
      },
      "SendWebhookPayload": {
        "properties": {
          "event_id": {
            "description": "The ID of the event that will be delivered to your endpoint",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "TransferSource": {
        "required": [
          "currency",
          "payment_rail"
        ],
        "properties": {
          "currency": {
            "description": "When `eur` is specified as the source currency:\n  1. the source rail must be `sepa`;\n  2. only `usdc` or `eurc` are supported as the destination currency",
            "$ref": "#/components/schemas/EuroInclusiveCurrency"
          },
          "payment_rail": {
            "description": "When `sepa` is specified as the source rail:\n  1. the source currency must be `eur`;\n  2. only `usdc` or `eurc` are supported as the destination currency",
            "$ref": "#/components/schemas/BridgeWalletSepaSwiftInclusivePaymentRail"
          },
          "payment_scheme": {
            "description": "(SEPA only) The payment scheme used for this transaction, such as SEPA Credit Transfer or SEPA Instant",
            "$ref": "#/components/schemas/PaymentScheme"
          },
          "external_account_id": {
            "$ref": "#/components/schemas/Id"
          },
          "omad": {
            "$ref": "#/components/schemas/Omad",
            "readOnly": true
          },
          "imad": {
            "$ref": "#/components/schemas/Imad",
            "readOnly": true
          },
          "bank_beneficiary_name": {
            "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "bank_beneficiary_address": {
            "description": "(Wire only) The address of the beneficiary of the bank account that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "bank_routing_number": {
            "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "bank_name": {
            "description": "(Wire only) The name of the bank that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "originator_name": {
            "description": "(Wire only) The originator name of this wire",
            "type": "string",
            "readOnly": true
          },
          "originator_address": {
            "description": "(Wire only) The originator address of this wire",
            "type": "string",
            "readOnly": true
          },
          "wire_message": {
            "description": "(Wire only) The memo for this wire",
            "type": "string",
            "readOnly": true
          },
          "bridge_wallet_id": {
            "description": "(Bridge Wallet only) The ID of the Bridge Wallet to draw funds from",
            "$ref": "#/components/schemas/Id"
          },
          "sender_name": {
            "description": "(ACH only) The name of the business or individual who initiated the transaction",
            "type": "string",
            "readOnly": true
          },
          "sender_bank_routing_number": {
            "description": "(ACH only) The routing number of the entity that initiated this ACH transaction",
            "type": "string",
            "readOnly": true
          },
          "description": {
            "description": "(ACH only) The description of the deposit that the customer sent",
            "type": "string",
            "readOnly": true
          },
          "tracking_number": {
            "$ref": "#/components/schemas/TrackingNumber",
            "readOnly": true
          }
        }
      },
      "TransferDestination": {
        "required": [
          "currency",
          "payment_rail"
        ],
        "properties": {
          "currency": {
            "description": "When `eur` is specified as the destination currency, the destination rail must be `sepa`.",
            "$ref": "#/components/schemas/EuroInclusiveCurrency"
          },
          "payment_rail": {
            "description": "When `sepa` is specified as the destination payment rail, the destination currency must be `eur`; when `swift` is specified as the destination payment rail, the destination currency must be `usd`.",
            "$ref": "#/components/schemas/SepaSwiftInclusiveOfframpPaymentRail"
          },
          "external_account_id": {
            "description": "External bank account Bridge should send the funds to. The currency associated with the External Account must match the destination currency.",
            "$ref": "#/components/schemas/Id"
          },
          "bridge_wallet_id": {
            "description": "The Bridge Wallet to which Bridge will send the funds. The chain associated with the Bridge Wallet must match the destination payment rail.",
            "$ref": "#/components/schemas/Id"
          },
          "omad": {
            "$ref": "#/components/schemas/Omad",
            "readOnly": true
          },
          "imad": {
            "$ref": "#/components/schemas/Imad",
            "readOnly": true
          },
          "trace_number": {
            "$ref": "#/components/schemas/TraceNumber",
            "readOnly": true
          },
          "wire_message": {
            "$ref": "#/components/schemas/WireMessage"
          },
          "sepa_reference": {
            "$ref": "#/components/schemas/SepaReference"
          },
          "swift_reference": {
            "$ref": "#/components/schemas/SwiftReference"
          },
          "spei_reference": {
            "$ref": "#/components/schemas/SpeiReference"
          },
          "swift_charges": {
            "description": "Which party will bear the charges for the SWIFT transaction. When left blank, `sha` will be used as the default.",
            "$ref": "#/components/schemas/SwiftCharges"
          },
          "ach_reference": {
            "$ref": "#/components/schemas/AchReference"
          },
          "uetr": {
            "$ref": "#/components/schemas/Uetr"
          },
          "blockchain_memo": {
            "type": "string",
            "description": "The memo to include when sending funds on chain. Only allowed for blockchains that support memos such as Stellar"
          },
          "deposit_id": {
            "$ref": "#/components/schemas/DepositId"
          },
          "tracking_number": {
            "$ref": "#/components/schemas/TrackingNumber",
            "readOnly": true
          }
        }
      },
      "DrainDestination": {
        "required": [
          "payment_rail",
          "currency"
        ],
        "properties": {
          "payment_rail": {
            "$ref": "#/components/schemas/PaymentRail"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "to_address": {
            "description": "The crypto wallet address that the customer will ultimately receive funds at",
            "type": "string"
          },
          "blockchain_memo": {
            "description": "The memo to include in the transaction, for blockchains that support memos only",
            "type": "string"
          },
          "external_account_id": {
            "description": "External bank account to which Bridge will send the funds.",
            "$ref": "#/components/schemas/Id"
          },
          "wire_message": {
            "description": "A message to be sent with a wire transfer.",
            "$ref": "#/components/schemas/WireMessage"
          },
          "sepa_reference": {
            "$ref": "#/components/schemas/SepaReference"
          },
          "ach_reference": {
            "$ref": "#/components/schemas/AchReference"
          },
          "imad": {
            "$ref": "#/components/schemas/Imad"
          },
          "trace_number": {
            "$ref": "#/components/schemas/TraceNumber",
            "readOnly": true
          },
          "uetr": {
            "$ref": "#/components/schemas/Uetr"
          }
        }
      },
      "DrainReturnDetails": {
        "properties": {
          "reason": {
            "description": "The reason for the return, as given by the returning financial institution.",
            "type": "string"
          }
        }
      },
      "DepositInstructions": {
        "readOnly": true,
        "required": [
          "payment_rail",
          "amount",
          "currency"
        ],
        "properties": {
          "payment_rail": {
            "description": "The payment rail that Bridge is expecting funds to arrive on.  For a crypto based source on the transfer, this is the chain, i.e. ethereum or polygon",
            "$ref": "#/components/schemas/PaymentRail"
          },
          "amount": {
            "description": "Amount of the deposit, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "from_address": {
            "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
            "type": "string"
          },
          "to_address": {
            "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
            "type": "string"
          },
          "deposit_message": {
            "description": "The message that the customer MUST include in their wire memo/message or ach push description",
            "type": "string"
          },
          "bank_name": {
            "description": "The name of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_address": {
            "description": "The address of the bank that the customer should send the deposit to. For SEPA, the country in this address should be used for sending the deposit",
            "type": "string"
          },
          "bank_routing_number": {
            "description": "The routing number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_account_number": {
            "description": "The account number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_beneficiary_name": {
            "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
            "type": "string"
          },
          "bank_beneficiary_address": {
            "description": "The address of the beneficiary of the bank account that the customer should send the deposit to",
            "type": "string"
          },
          "iban": {
            "description": "For SEPA, the International Bank Account Number (IBAN) that the customer should use to send the deposit",
            "type": "string"
          },
          "bic": {
            "description": "For SEPA, the Bank Identifier Code (BIC) that the customer should use to send the deposit",
            "type": "string"
          },
          "clabe": {
            "description": "For SPEI, the CLABE (account number) that the customer should use to send the deposit",
            "type": "string"
          },
          "account_holder_name": {
            "description": "For SEPA, the name of the bank account holder that the customer should use to send the deposit",
            "type": "string"
          }
        }
      },
      "PrefundedAccount": {
        "required": [
          "id",
          "available_balance",
          "currency",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "available_balance": {
            "description": "Amount available for spending, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string",
            "readOnly": true
          },
          "currency": {
            "description": "currency associated with the bank account.",
            "$ref": "#/components/schemas/FiatCurrency",
            "readOnly": true
          },
          "name": {
            "description": "Serialized name of the account which identifies the counterparty.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "PrefundedAccountHistory": {
        "required": [
          "id",
          "amount",
          "available_balance",
          "currency",
          "name",
          "type",
          "created_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "amount": {
            "description": "Amount of the transaction, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string",
            "readOnly": true
          },
          "available_balance": {
            "description": "Amount available for spending, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string",
            "readOnly": true
          },
          "currency": {
            "description": "currency associated with the bank account.",
            "$ref": "#/components/schemas/FiatCurrency",
            "readOnly": true
          },
          "name": {
            "description": "Serialized name of the account.",
            "type": "string",
            "readOnly": true
          },
          "type": {
            "description": "The type of the transaction.",
            "type": "string",
            "enum": [
              "funding",
              "refunded transfer"
            ],
            "readOnly": true
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the External Account",
            "format": "date-time"
          },
          "withdrawal_id": {
            "readOnly": true,
            "type": "string",
            "description": "The ID of the transfer which created this event. Exclusive with deposit_id."
          },
          "deposit_id": {
            "readOnly": true,
            "type": "string",
            "description": "The ID of the transfer which created this event. Exclusive with withdrawal_id."
          }
        }
      },
      "ExternalAccount": {
        "required": [
          "account_owner_name",
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "customer_id": {
            "description": "The id of the Bridge customer that this External Account belongs to",
            "type": "string",
            "minLength": 1,
            "readOnly": true
          },
          "currency": {
            "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
            "$ref": "#/components/schemas/EuroInclusiveFiatCurrency"
          },
          "bank_name": {
            "description": "Bank name of the account (e.g. \"Chase\")",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "account_owner_name": {
            "description": "Owner of the account Bank Account (e.g. \"John Doe\"). For ach or wire transfers, this field must have 3 to 35 characters and follow either of the following regex patterns:\n- ach: `^(?!\\s*$)[\\x20-\\x7E]*$`\n- wire: ```^[ \\w!\"#$%&'()+,\\-./:;\u003C=\u003E?@\\\\_`~]*$```\n",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "last_4": {
            "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
            "type": "string",
            "minLength": 1,
            "readOnly": true,
            "deprecated": true
          },
          "account_number": {
            "writeOnly": true,
            "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
            "type": "string",
            "minLength": 12
          },
          "routing_number": {
            "writeOnly": true,
            "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
            "type": "string",
            "minLength": 9
          },
          "account_type": {
            "description": "Type of the bank account. The default is `us`",
            "$ref": "#/components/schemas/BankAccountNumberType"
          },
          "iban": {
            "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
            "$ref": "#/components/schemas/IbanBankAccount"
          },
          "account": {
            "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
            "$ref": "#/components/schemas/UsBankAccount"
          },
          "swift": {
            "description": "SWIFT bank account information. Required when using SWIFT payment rails. Supported account types are `iban` and `unknown`.",
            "$ref": "#/components/schemas/SwiftBankAccount"
          },
          "clabe": {
            "description": "Mexican CLABE bank account information for SPEI payment rails. Required when account type is `clabe`.",
            "$ref": "#/components/schemas/ClabeBankAccount"
          },
          "account_owner_type": {
            "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
            "$ref": "#/components/schemas/BankAccountOwnerType"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
          },
          "business_name": {
            "type": "string",
            "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
          },
          "address": {
            "writeOnly": true,
            "description": "Address of the beneficiary of this account. Please ensure the address is valid (Google Maps is good for this). US addresses used to receive wires must include a street number.",
            "$ref": "#/components/schemas/ExternalAccountAddress"
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the External Account",
            "format": "date-time"
          },
          "updated_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of last update of the External Account",
            "format": "date-time"
          },
          "active": {
            "readOnly": true,
            "type": "boolean",
            "description": "Whether or not this External Account is active"
          },
          "beneficiary_address_valid": {
            "readOnly": true,
            "type": "boolean",
            "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
          }
        },
        "oneOf": [
          {
            "required": [
              "iban"
            ]
          },
          {
            "required": [
              "account"
            ]
          },
          {
            "required": [
              "swift"
            ]
          },
          {
            "required": [
              "clabe"
            ]
          }
        ]
      },
      "ExternalAccountResponse": {
        "required": [
          "account_owner_name",
          "id",
          "currency",
          "customer_id",
          "account_type",
          "created_at",
          "updated_at",
          "active"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ExternalAccount"
          },
          {
            "properties": {
              "account": {
                "description": "US bank account information. It's populated when the `account_type` is `us`"
              },
              "currency": {
                "description": "Currency associated with the bank account."
              },
              "account_type": {
                "description": "Type of the bank account."
              },
              "account_owner_type": {
                "description": "Type of the account ownership"
              },
              "first_name": {
                "description": "First name of the individual account owner"
              },
              "last_name": {
                "description": "Last name of the individual account owner"
              },
              "business_name": {
                "description": "Business name of the business account owner"
              },
              "iban": {
                "description": "IBAN bank account information. It's populated when the `account_type` is `iban`."
              },
              "clabe": {
                "description": "CLABE bank account information for the SPEI (Mexican) payment rail. It's populated when the `account_type` is `clabe`."
              }
            }
          }
        ]
      },
      "UpdateExternalAccountInput": {
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "writeOnly": true,
            "description": "address of the beneficiary of this account",
            "$ref": "#/components/schemas/Address"
          },
          "account": {
            "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
            "$ref": "#/components/schemas/UsBankAccountUpdate"
          }
        }
      },
      "LiquidationAddress": {
        "required": [
          "id",
          "currency",
          "chain",
          "external_account_id",
          "address",
          "destination_payment_rail",
          "destination_currency",
          "customer_id",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "currency": {
            "$ref": "#/components/schemas/CryptoCurrency"
          },
          "chain": {
            "$ref": "#/components/schemas/OfframpChain"
          },
          "customer_id": {
            "description": "The ID of the customer who owns this liquidation address",
            "$ref": "#/components/schemas/Id"
          },
          "external_account_id": {
            "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
            "$ref": "#/components/schemas/Id"
          },
          "prefunded_account_id": {
            "description": "The developer's prefunded account to which Bridge will send the funds.",
            "$ref": "#/components/schemas/Id"
          },
          "destination_wire_message": {
            "description": "A message to be sent with a wire transfer.",
            "$ref": "#/components/schemas/WireMessage"
          },
          "destination_sepa_reference": {
            "$ref": "#/components/schemas/SepaReference"
          },
          "destination_spei_reference": {
            "$ref": "#/components/schemas/SpeiReference"
          },
          "destination_ach_reference": {
            "$ref": "#/components/schemas/AchReference"
          },
          "destination_payment_rail": {
            "description": "The payment rail that Bridge will use to send funds to the customer.",
            "$ref": "#/components/schemas/SepaSwiftInclusivePaymentRail"
          },
          "destination_currency": {
            "description": "The currency that Bridge will use to send funds to the customer.",
            "$ref": "#/components/schemas/EuroInclusiveCurrency"
          },
          "address": {
            "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
            "type": "string",
            "readOnly": true
          },
          "destination_address": {
            "type": "string",
            "description": "The crypto wallet address that Bridge will use to send funds to the customer."
          },
          "destination_blockchain_memo": {
            "type": "string",
            "description": "The memo to include in the transaction, for blockchains that support memos only"
          },
          "return_address": {
            "type": "string",
            "description": "The crypto wallet address that Bridge will use to return funds to the customer in case of a failed transaction. This address must be on the same chain specified for the liquidation address. Please note, this functionality is not supported on Stellar."
          },
          "state": {
            "type": "string",
            "description": "The state of the liquidation address. It could be \"active\" or \"deactivated\""
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the Liquidation Address",
            "format": "date-time"
          },
          "updated_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of last update of the Liquidation Address",
            "format": "date-time"
          }
        }
      },
      "CreateKycLinks": {
        "required": [
          "email",
          "type"
        ],
        "properties": {
          "full_name": {
            "description": "Full name of the customer, for a business, this would be the business entity's legal name",
            "type": "string",
            "minLength": 1
          },
          "email": {
            "description": "Email of the customer",
            "type": "string",
            "minLength": 1
          },
          "type": {
            "description": "Type of the customer (individual vs. business)",
            "type": "string",
            "minLength": 1,
            "enum": [
              "individual",
              "business"
            ]
          },
          "endorsements": {
            "description": "List of endorsements to request for the generated KYC link.\nFor example, `sepa` endorsement could be requested to allow an `individual` customer to submit `proof-of-address` documents in the KYC flow.",
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "enum": [
                "sepa"
              ]
            }
          },
          "redirect_uri": {
            "description": "The location where the customer should be redirected after completing the KYC flow. Must be in the form of http:// or https://.",
            "type": "string"
          }
        }
      },
      "CreateStaticMemo": {
        "required": [
          "source",
          "destination"
        ],
        "properties": {
          "developer_fee_percent": {
            "$ref": "#/components/schemas/StaticMemoDeveloperFeePercent"
          },
          "source": {
            "$ref": "#/components/schemas/StaticMemoSourceInput"
          },
          "destination": {
            "$ref": "#/components/schemas/StaticMemoDestination"
          }
        }
      },
      "UpdateStaticMemo": {
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/UpdateStaticMemoDestination"
          },
          "developer_fee_percent": {
            "$ref": "#/components/schemas/StaticMemoDeveloperFeePercent"
          }
        }
      },
      "UpdateStaticMemoDestination": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CryptoCurrency"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/OfframpChain"
          },
          "address": {
            "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
            "type": "string"
          }
        },
        "example": {
          "currency": "usdc",
          "payment_rail": "polygon",
          "address": "0xdeadbeef"
        }
      },
      "StaticMemoDeveloperFeePercent": {
        "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
        "type": "string",
        "format": "number",
        "minimum": 0,
        "maximum": 100,
        "exclusiveMaximum": true,
        "example": "0.1"
      },
      "StaticMemoSourceInput": {
        "required": [
          "currency"
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/FiatCurrency"
          },
          "payment_rail": {
            "description": "Static memos support both wire and ACH push regardless of this value.",
            "$ref": "#/components/schemas/PaymentRail"
          }
        },
        "example": {
          "currency": "usd",
          "payment_rail": "wire"
        }
      },
      "StaticMemoDestination": {
        "required": [
          "currency",
          "payment_rail",
          "address"
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CryptoCurrency"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/OfframpChain"
          },
          "address": {
            "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
            "type": "string"
          },
          "blockchain_memo": {
            "type": "string",
            "description": "The memo to include when sending funds on chain. Only allowed for blockchains that support memos such as Stellar"
          }
        },
        "example": {
          "currency": "usdc",
          "payment_rail": "polygon",
          "address": "0xdeadbeef"
        }
      },
      "StaticMemoResponse": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "developer_fee_percent": {
            "$ref": "#/components/schemas/StaticMemoDeveloperFeePercent"
          },
          "source_deposit_instructions": {
            "$ref": "#/components/schemas/StaticMemoSourceDepositInstructions"
          },
          "destination": {
            "$ref": "#/components/schemas/StaticMemoDestination"
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the static memo",
            "format": "date-time"
          }
        }
      },
      "StaticMemoSourceDepositInstructions": {
        "readOnly": true,
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/FiatCurrency"
          },
          "payment_rails": {
            "description": "All supported payment rails for deposits",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentRail"
            }
          },
          "deposit_message": {
            "description": "The message that the customer MUST include in their wire memo/message or ACH description.",
            "type": "string"
          },
          "bank_name": {
            "description": "The name of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_address": {
            "description": "The address of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_routing_number": {
            "description": "The routing number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_account_number": {
            "description": "The account number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_beneficiary_name": {
            "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
            "type": "string"
          },
          "bank_beneficiary_address": {
            "description": "The address of the beneficiary of the bank account that the customer should send the deposit to",
            "type": "string"
          }
        },
        "example": {
          "currency": "usd",
          "payment_rails": [
            "ach_push",
            "wire"
          ],
          "deposit_message": "EXAMPLE_MEMO_MESSAGE",
          "bank_name": "Lead Bank",
          "bank_address": "1801 Main St., Kansas City, MO 64108",
          "bank_beneficiary_name": "Bridge Ventures Inc",
          "bank_beneficiary_address": "21750 Hardy Oak Blvd, Ste 104 PMB 77950, San Antonio, Texas, 78258-4946",
          "bank_account_number": "123456789",
          "bank_routing_number": "87654321"
        }
      },
      "VirtualAccountEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of activity",
            "enum": [
              "funds_scheduled",
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "refund",
              "microdeposit",
              "account_update",
              "deactivation",
              "activation"
            ]
          },
          "customer_id": {
            "$ref": "#/components/schemas/Id",
            "description": "The id of the Bridge customer that this Virtual Account event belongs to",
            "type": "string",
            "minLength": 1,
            "readOnly": true
          },
          "virtual_account_id": {
            "$ref": "#/components/schemas/Id",
            "description": "The id of the Virtual Account that this Virtual Account event belongs to",
            "type": "string",
            "minLength": 1,
            "readOnly": true
          },
          "amount": {
            "type": "string",
            "description": "Amount for that event, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc. For \"incoming\" events such as funds_received or under_review, this is the initial amount received. For \"outgoing\" events such as payment_submitted and payment_processed, this is the amount of funds sent to the destination. For non-transactional events such as account_update, this will be zero."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "developer_fee_amount": {
            "type": "string",
            "description": "Amount of the developer fee if any, represented as a dollar denominated string. This is the final amount taken out of what is ultimately received by your customer, not a percentage. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "exchange_fee_amount": {
            "type": "string",
            "description": "Amount of the exchange fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "subtotal_amount": {
            "type": "string",
            "description": "Amount of the subtotal, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "gas_fee": {
            "type": "string",
            "description": "Amount of the gas fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "deposit_id": {
            "type": "string",
            "description": "The id of the deposit related to this event. This id can be used to link multiple events to the same transaction. Omitted for some `refund` cases."
          },
          "destination_tx_hash": {
            "type": "string",
            "description": "The hash of the on-chain transfer to the destination address"
          },
          "destination_payment_rail": {
            "type": "string",
            "description": "The destination payment rail where the funds are deposited to"
          },
          "source": {
            "$ref": "#/components/schemas/VirtualAccountEventSource"
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the event",
            "format": "date-time"
          },
          "receipt": {
            "readOnly": true,
            "description": "Receipt information of a virtual account event. Available for drain and payment_processed events.",
            "$ref": "#/components/schemas/Receipt"
          }
        }
      },
      "VirtualAccountEventSource": {
        "required": [
          "payment_rail"
        ],
        "properties": {
          "payment_rail": {
            "$ref": "#/components/schemas/VirtualAccountSourcePaymentRails"
          },
          "description": {
            "description": "(ACH and SPEI only) The description of the deposit that the customer sent",
            "type": "string",
            "readOnly": true
          },
          "sender_name": {
            "description": "(ACH, SEPA, and SPEI only) The name of the business or individual who initiated the transaction",
            "type": "string",
            "readOnly": true
          },
          "sender_bank_routing_number": {
            "description": "(ACH only) The routing number of the entity that initiated this ACH transaction",
            "type": "string",
            "readOnly": true
          },
          "trace_number": {
            "description": "(ACH only) The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions",
            "type": "string",
            "readOnly": true
          },
          "bank_routing_number": {
            "description": "(Wire only) The routing number of the bank that sent the wire to the Virtual Account",
            "type": "string",
            "readOnly": true
          },
          "bank_name": {
            "description": "(Wire only) The name of the bank that sent the wire",
            "type": "string",
            "readOnly": true
          },
          "bank_beneficiary_name": {
            "description": "(Wire only) The beneficiary name of this wire",
            "type": "string",
            "readOnly": true
          },
          "bank_beneficiary_address": {
            "description": "(Wire only) The beneficiary address of this wire",
            "type": "string",
            "readOnly": true
          },
          "originator_name": {
            "description": "(Wire only) The originator name of this wire",
            "type": "string",
            "readOnly": true
          },
          "originator_address": {
            "description": "(Wire only) The originator address of this wire",
            "type": "string",
            "readOnly": true
          },
          "wire_message": {
            "description": "(Wire only) The memo for this wire",
            "type": "string",
            "readOnly": true
          },
          "imad": {
            "$ref": "#/components/schemas/Imad",
            "readOnly": true
          },
          "bic": {
            "description": "(SEPA only) The BIC of the bank that initiated this transaction",
            "type": "string",
            "readOnly": true
          },
          "iban": {
            "description": "(SEPA only) The full IBAN of the account that initiated this transaction",
            "type": "string",
            "readOnly": true
          },
          "iban_last_4": {
            "description": "(SEPA only) The last 4 digits of the IBAN of the account that initiated this transaction",
            "type": "string",
            "readOnly": true
          },
          "clabe": {
            "description": "(SPEI only) The CLABE (account number) of the account that initiated this transaction",
            "type": "string",
            "readOnly": true
          },
          "reference": {
            "$ref": "#/components/schemas/SepaReference",
            "description": "(SEPA and SPEI only) The SEPA/SPEI (concepto de pago) reference field set by the initiator of this transaction",
            "readOnly": true
          },
          "tracking_number": {
            "description": "(SPEI only) The clave de rastreo or tracking number of the SPEI transaction",
            "type": "string",
            "readOnly": true
          },
          "payment_scheme": {
            "$ref": "#/components/schemas/PaymentScheme",
            "description": "(SEPA only) The payment scheme used for this transaction, such as SEPA Credit Transfer or SEPA Instant"
          },
          "uetr": {
            "$ref": "#/components/schemas/Uetr"
          }
        }
      },
      "CreateVirtualAccount": {
        "required": [
          "source",
          "destination"
        ],
        "properties": {
          "developer_fee_percent": {
            "$ref": "#/components/schemas/VirtualAccountDeveloperFeePercent"
          },
          "source": {
            "$ref": "#/components/schemas/VirtualAccountSourceInput"
          },
          "destination": {
            "$ref": "#/components/schemas/VirtualAccountDestination"
          }
        }
      },
      "UpdateVirtualAccount": {
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/UpdateVirtualAccountDestination"
          },
          "developer_fee_percent": {
            "$ref": "#/components/schemas/VirtualAccountDeveloperFeePercent"
          }
        }
      },
      "UpdateVirtualAccountDestination": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CryptoCurrency"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/OfframpChain"
          },
          "address": {
            "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
            "type": "string"
          },
          "blockchain_memo": {
            "type": "string",
            "description": "The memo to include when sending funds on chain. Only allowed for blockchains that support memos such as Stellar"
          },
          "bridge_wallet_id": {
            "description": "The Bridge Wallet to which Bridge will send the funds. The chain associated with the Bridge Wallet must match the payment rail.",
            "$ref": "#/components/schemas/Id"
          }
        },
        "example": {
          "currency": "usdc",
          "payment_rail": "polygon",
          "address": "0xdeadbeef",
          "blockchain_memo": "from_bridge"
        }
      },
      "VirtualAccountDeveloperFeePercent": {
        "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
        "type": "string",
        "format": "number",
        "minimum": 0,
        "maximum": 100,
        "exclusiveMaximum": true,
        "example": "0.1"
      },
      "VirtualAccountActivationStatus": {
        "description": "The activation status of the Virtual Account",
        "type": "string",
        "enum": [
          "activated",
          "deactivated"
        ]
      },
      "VirtualAccountSourceInput": {
        "required": [
          "currency"
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/EuroInclusiveFiatCurrency"
          }
        },
        "example": {
          "currency": "usd"
        }
      },
      "VirtualAccountDestination": {
        "required": [
          "currency",
          "payment_rail"
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CryptoCurrency"
          },
          "payment_rail": {
            "$ref": "#/components/schemas/OfframpChain"
          },
          "address": {
            "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
            "type": "string"
          },
          "blockchain_memo": {
            "type": "string",
            "description": "The memo to include when sending funds on chain. Only allowed for blockchains that support memos such as Stellar"
          },
          "bridge_wallet_id": {
            "description": "The Bridge Wallet to which Bridge will send the funds. The chain associated with the Bridge Wallet must match the payment rail.",
            "$ref": "#/components/schemas/Id"
          }
        },
        "example": {
          "currency": "usdc",
          "payment_rail": "polygon",
          "address": "0xdeadbeef"
        }
      },
      "VirtualAccountResponse": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/VirtualAccountActivationStatus"
          },
          "developer_fee_percent": {
            "$ref": "#/components/schemas/VirtualAccountDeveloperFeePercent"
          },
          "customer_id": {
            "$ref": "#/components/schemas/Id"
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the virtual account",
            "format": "date-time"
          },
          "source_deposit_instructions": {
            "$ref": "#/components/schemas/VirtualAccountSourceDepositInstructions"
          },
          "destination": {
            "$ref": "#/components/schemas/VirtualAccountDestination"
          }
        }
      },
      "VirtualAccountSourceDepositInstructions": {
        "readOnly": true,
        "properties": {
          "payment_rail": {
            "$ref": "#/components/schemas/VirtualAccountSourcePaymentRails",
            "deprecated": true
          },
          "payment_rails": {
            "description": "The payment rails supported by these deposit instructions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VirtualAccountSourcePaymentRails"
            }
          },
          "currency": {
            "$ref": "#/components/schemas/EuroInclusiveFiatCurrency"
          },
          "bank_name": {
            "description": "The name of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_address": {
            "description": "The address of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_routing_number": {
            "description": "The routing number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_account_number": {
            "description": "The account number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_beneficiary_name": {
            "description": "If available, the name of the beneficiary of the bank account that the customer should send the deposit to",
            "type": "string"
          },
          "bank_beneficiary_address": {
            "description": "If available, the address of the beneficiary of the bank account that the customer should send the deposit to",
            "type": "string"
          },
          "account_holder_name": {
            "description": "(For Virtual IBANs only) The name of the account holder that the deposit must be sent to",
            "type": "string"
          },
          "iban": {
            "description": "(For Virtual IBANs only) The IBAN of the account that the customer should send the deposit to",
            "type": "string"
          },
          "bic": {
            "description": "(For Virtual IBANs only) The BIC of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "clabe": {
            "description": "(For SPEI accounts only) The CLABE (account number) of the account that the customer should send the deposit to",
            "type": "string"
          }
        },
        "example": {
          "currency": "usd",
          "payment_rails": [
            "ach_push",
            "wire"
          ],
          "bank_name": "Lead Bank",
          "bank_address": "1801 Main St., Kansas City, MO 64108",
          "bank_beneficiary_name": "Customer Name",
          "bank_beneficiary_address": "1234 Main St., Kansas City, MO 64108",
          "bank_account_number": "123456789",
          "bank_routing_number": "87654321"
        }
      },
      "StaticMemoEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of activity",
            "enum": [
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "refunded",
              "account_update"
            ]
          },
          "customer_id": {
            "$ref": "#/components/schemas/Id",
            "description": "The id of the Bridge customer that this static memo event belongs to",
            "type": "string",
            "minLength": 1,
            "readOnly": true
          },
          "static_memo_id": {
            "$ref": "#/components/schemas/Id",
            "description": "The id of the Static Memo that this event belongs to",
            "type": "string",
            "minLength": 1,
            "readOnly": true
          },
          "amount": {
            "type": "string",
            "description": "Amount for that event, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc. For \"incoming\" events such as funds_received or under_review, this is the initial amount received. For \"outgoing\" events such as payment_submitted and payment_processed, this is the amount of funds sent to the destination. For non-transactional events such as account_update, this will be zero."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "developer_fee_amount": {
            "type": "string",
            "description": "Amount of the developer fee if any, represented as a dollar denominated string. This is the final amount taken out of what is ultimately received by your customer, not a percentage. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "exchange_fee_amount": {
            "type": "string",
            "description": "Amount of the exchange fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "subtotal_amount": {
            "type": "string",
            "description": "Amount of the subtotal, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "gas_fee": {
            "type": "string",
            "description": "Amount of the gas fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "deposit_id": {
            "type": "string",
            "description": "The id of the deposit related to this event. This id can be used to link multiple events to the same transaction"
          },
          "destination_tx_hash": {
            "type": "string",
            "description": "The hash of the on-chain transfer to the destination address"
          },
          "destination_payment_rail": {
            "type": "string",
            "description": "The destination payment rail where the funds are deposited to"
          },
          "source_deposit_instructions": {
            "$ref": "#/components/schemas/StaticMemoEventSourceDepositInstructions"
          },
          "source": {
            "$ref": "#/components/schemas/StaticMemoEventSource"
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the event",
            "format": "date-time"
          }
        }
      },
      "StaticMemoEventSourceDepositInstructions": {
        "required": [
          "deposit_message"
        ],
        "properties": {
          "deposit_message": {
            "description": "The message that the customer MUST include in their wire memo/message or ach push description",
            "type": "string"
          }
        }
      },
      "StaticMemoEventSource": {
        "required": [
          "payment_rail"
        ],
        "properties": {
          "payment_rail": {
            "$ref": "#/components/schemas/PaymentRail"
          },
          "description": {
            "description": "(ACH only) The description of the deposit that the customer sent",
            "type": "string"
          },
          "sender_name": {
            "description": "(ACH only) The name of the business or individual who initiated the transaction",
            "type": "string",
            "readOnly": true
          },
          "sender_bank_routing_number": {
            "description": "(ACH only) The routing number of the entity that initiated this ACH transaction",
            "type": "string",
            "readOnly": true
          },
          "trace_number": {
            "description": "(ACH only) The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions",
            "type": "string",
            "readOnly": true
          },
          "bank_routing_number": {
            "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "bank_name": {
            "description": "(Wire only) The name of the bank that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "bank_beneficiary_name": {
            "description": "(Wire only) The beneficiary name of this deposit",
            "type": "string",
            "readOnly": true
          },
          "bank_beneficiary_address": {
            "description": "(Wire only) The beneficiary address of this deposit",
            "type": "string",
            "readOnly": true
          },
          "originator_name": {
            "description": "(Wire only) The originator name of this deposit",
            "type": "string",
            "readOnly": true
          },
          "originator_address": {
            "description": "(Wire only) The originator address of this deposit",
            "type": "string",
            "readOnly": true
          },
          "wire_message": {
            "description": "(Wire only) The memo for this wire",
            "type": "string",
            "readOnly": true
          },
          "imad": {
            "$ref": "#/components/schemas/Imad"
          },
          "omad": {
            "$ref": "#/components/schemas/Omad"
          }
        }
      },
      "CreateBridgeWallet": {
        "required": [
          "chain"
        ],
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/BridgeWalletChain"
          }
        }
      },
      "CreateBatchSettlementSchedule": {
        "required": [
          "destination"
        ],
        "properties": {
          "destination": {
            "description": "The destination that Bridge will use to settle funds.",
            "$ref": "#/components/schemas/TransferDestination"
          }
        }
      },
      "CreateLiquidationAddress": {
        "required": [
          "currency",
          "chain"
        ],
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/OfframpChain"
          },
          "currency": {
            "$ref": "#/components/schemas/CryptoCurrency"
          },
          "external_account_id": {
            "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
            "$ref": "#/components/schemas/Id"
          },
          "prefunded_account_id": {
            "description": "The developer's prefunded account id that Bridge will send the funds to.",
            "$ref": "#/components/schemas/Id"
          },
          "bridge_wallet_id": {
            "description": "The Bridge Wallet to which Bridge will send the funds. The chain associated with the Bridge Wallet must match the payment rail.",
            "$ref": "#/components/schemas/Id"
          },
          "destination_wire_message": {
            "$ref": "#/components/schemas/WireMessage"
          },
          "destination_sepa_reference": {
            "$ref": "#/components/schemas/SepaReference"
          },
          "destination_ach_reference": {
            "$ref": "#/components/schemas/AchReference"
          },
          "destination_spei_reference": {
            "$ref": "#/components/schemas/SpeiReference"
          },
          "destination_payment_rail": {
            "$ref": "#/components/schemas/SepaSwiftInclusivePaymentRail",
            "description": "The payment rail that Bridge will use to send funds to the customer. Will default to ACH if not specified."
          },
          "destination_currency": {
            "$ref": "#/components/schemas/EuroInclusiveCurrency",
            "description": "The currency that Bridge will use to send funds to the customer. Will default to USD if not specified."
          },
          "destination_address": {
            "type": "string",
            "description": "The crypto wallet address that Bridge will use to send funds to the customer."
          },
          "destination_blockchain_memo": {
            "type": "string",
            "description": "The memo to include in the transaction, for blockchains that support memos only"
          },
          "return_address": {
            "type": "string",
            "description": "The crypto wallet address that Bridge will use to return funds to the customer in case of a failed transaction. This address must be on the same chain specified for the liquidation address. Please note, this functionality is not supported on Stellar."
          },
          "custom_developer_fee_percent": {
            "$ref": "#/components/schemas/LiquidationAddressCustomDeveloperFeePercent"
          }
        }
      },
      "UpdateLiquidationAddress": {
        "properties": {
          "external_account_id": {
            "type": "string",
            "description": "An optional identifier for the external account you wish to associate with this liquidation schedule.\n\n**Note**: Only one liquidation address can be associated with an external account per (customer, chain, currency).\n"
          },
          "custom_developer_fee_percent": {
            "$ref": "#/components/schemas/LiquidationAddressCustomDeveloperFeePercent"
          },
          "destination_ach_reference": {
            "$ref": "#/components/schemas/AchReference"
          },
          "destination_wire_message": {
            "$ref": "#/components/schemas/WireMessage"
          },
          "destination_sepa_reference": {
            "$ref": "#/components/schemas/SepaReference"
          },
          "destination_spei_reference": {
            "$ref": "#/components/schemas/SpeiReference"
          },
          "return_address": {
            "type": "string",
            "description": "The crypto wallet address that Bridge will use to return funds to the customer in case of a failed transaction. This address must be on the same chain specified for the liquidation address. Please note, this functionality is not supported on Stellar."
          }
        }
      },
      "LiquidationAddressCustomDeveloperFeePercent": {
        "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
        "type": "string",
        "nullable": true,
        "format": "number",
        "minimum": 0,
        "maximum": 100,
        "exclusiveMaximum": true,
        "example": "0.1"
      },
      "CreateBridgeWalletResponse": {
        "required": [
          "chain"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateBridgeWallet"
          },
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Id",
                "readOnly": true
              },
              "address": {
                "description": "The blockchain address of the Bridge Wallet",
                "type": "string",
                "readOnly": true
              },
              "created_at": {
                "readOnly": true,
                "type": "string",
                "description": "Time of creation of the Bridge Wallet",
                "format": "date-time"
              },
              "updated_at": {
                "readOnly": true,
                "type": "string",
                "description": "Time of most recent update of the Bridge Wallet",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "CreateLiquidationAddressResponse": {
        "required": [
          "currency",
          "chain",
          "destination_payment_rail",
          "destination_currency"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateLiquidationAddress"
          },
          {
            "properties": {
              "address": {
                "type": "string",
                "description": "The blockchain address the customer will send funds to."
              },
              "external_account_id": {
                "description": "External bank account to which Bridge will send the funds."
              },
              "prefunded_account_id": {
                "description": "The developer's prefunded account to which Bridge will send the funds."
              },
              "destination_wire_message": {
                "description": "A message to be sent with a wire transfer."
              },
              "destination_sepa_reference": {
                "description": "A reference message to be sent with a SEPA transaction."
              },
              "destination_payment_rail": {
                "description": "The payment rail that Bridge will use to send funds to the customer."
              },
              "destination_currency": {
                "description": "The currency that Bridge will use to send funds to the customer."
              },
              "state": {
                "type": "string",
                "description": "The state of the liquidation address. It could be \"active\" or \"deactivated\""
              },
              "custom_developer_fee_percent": {
                "$ref": "#/components/schemas/LiquidationAddressCustomDeveloperFeePercent"
              }
            }
          }
        ]
      },
      "Drain": {
        "required": [
          "id",
          "customer_id",
          "liquidation_address_id",
          "amount",
          "currency",
          "state"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "amount": {
            "description": "Amount of the drain, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string"
          },
          "customer_id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "liquidation_address_id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "currency": {
            "$ref": "#/components/schemas/EuroInclusiveCurrency"
          },
          "state": {
            "description": "Status of the drain",
            "readOnly": true,
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the drain",
            "format": "date-time"
          },
          "updated_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of last update of the drain",
            "format": "date-time"
          },
          "deposit_tx_hash": {
            "readOnly": true,
            "type": "string",
            "description": "Hash of the Liquidation Address deposit that triggered this drain"
          },
          "from_address": {
            "readOnly": true,
            "type": "string",
            "description": "The blockchain address that sent funds to the Liquidation Address"
          },
          "source_payment_rail": {
            "readOnly": true,
            "type": "string",
            "description": "The source payment rail where the funds originated from"
          },
          "destination": {
            "readOnly": true,
            "description": "Destination information of a drain.",
            "$ref": "#/components/schemas/DrainDestination"
          },
          "destination_tx_hash": {
            "readOnly": true,
            "type": "string",
            "description": "Hash of withdrawal of funds to the destination"
          },
          "refund_tx_hash": {
            "readOnly": true,
            "type": "string",
            "description": "Hash of refund, if the drain has been returned"
          },
          "return_details": {
            "readOnly": true,
            "description": "Return information, if the drain has been returned.",
            "$ref": "#/components/schemas/DrainReturnDetails"
          },
          "receipt": {
            "readOnly": true,
            "description": "Receipt information of a drain.",
            "$ref": "#/components/schemas/DrainReceipt"
          }
        }
      },
      "Balance": {
        "deprecated": true,
        "properties": {
          "active_balance": {
            "description": "Active Balance (Money currently not being processed) of a Liquidation Address",
            "type": "string"
          },
          "pending_balance": {
            "description": "Pending Balance (Money being processed) of a Liquidation Address",
            "type": "string"
          }
        }
      },
      "BankAccountNumberType": {
        "type": "string",
        "enum": [
          "us",
          "iban",
          "clabe",
          "unknown"
        ]
      },
      "CheckingOrSavingsType": {
        "description": "Determines whether the US account is treated as checking or savings. All US accounts will be treated as checking by default.",
        "type": "string",
        "enum": [
          "checking",
          "savings"
        ]
      },
      "BankAccountOwnerType": {
        "type": "string",
        "enum": [
          "individual",
          "business"
        ]
      },
      "FiatCurrency": {
        "type": "string",
        "enum": [
          "usd"
        ]
      },
      "EuroInclusiveFiatCurrency": {
        "type": "string",
        "enum": [
          "usd",
          "eur",
          "mxn"
        ]
      },
      "Currency": {
        "type": "string",
        "enum": [
          "usdb",
          "usdc",
          "usdt",
          "dai",
          "usd",
          "pyusd"
        ]
      },
      "EuroInclusiveCurrency": {
        "type": "string",
        "enum": [
          "dai",
          "eur",
          "eurc",
          "mxn",
          "pyusd",
          "usd",
          "usdb",
          "usdc",
          "usdt"
        ]
      },
      "CryptoCurrency": {
        "type": "string",
        "enum": [
          "usdb",
          "usdc",
          "usdt",
          "dai",
          "pyusd",
          "eurc"
        ]
      },
      "CardsCryptoCurrency": {
        "type": "string",
        "enum": [
          "usdc"
        ]
      },
      "DeveloperFees": {
        "required": [
          "default_liquidation_address_fee_percent"
        ],
        "properties": {
          "default_liquidation_address_fee_percent": {
            "description": "The default fee percent that will be applied to all your Liquidation Addresses. The value is a base 100 percentage, i.e. 10.2% is \"10.2\" in the API.",
            "type": "string",
            "format": "float",
            "minimum": 0,
            "maximum": 1,
            "example": "0.5",
            "exclusiveMaximum": true
          }
        }
      },
      "BridgeWalletChain": {
        "type": "string",
        "enum": [
          "base",
          "solana"
        ]
      },
      "OfframpChain": {
        "type": "string",
        "enum": [
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "optimism",
          "polygon",
          "solana",
          "stellar",
          "tron"
        ]
      },
      "OfframpChainForCards": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfframpChain"
          },
          {
            "not": {
              "enum": [
                "tron"
              ]
            }
          }
        ]
      },
      "PaymentRail": {
        "type": "string",
        "enum": [
          "ach",
          "wire",
          "ach_push",
          "ach_same_day",
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "optimism",
          "polygon",
          "solana",
          "spei",
          "stellar"
        ]
      },
      "VirtualAccountSourcePaymentRails": {
        "type": "string",
        "enum": [
          "ach_push",
          "pix",
          "sepa",
          "spei",
          "wire"
        ]
      },
      "PaymentScheme": {
        "type": "string",
        "enum": [
          "reversed_payment",
          "sepa_credit",
          "sepa_instant"
        ]
      },
      "SepaSwiftInclusivePaymentRail": {
        "type": "string",
        "enum": [
          "ach",
          "wire",
          "ach_push",
          "ach_same_day",
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "fiat_deposit_return",
          "optimism",
          "polygon",
          "sepa",
          "solana",
          "spei",
          "stellar",
          "swift",
          "tron"
        ]
      },
      "BridgeWalletSepaSwiftInclusivePaymentRail": {
        "type": "string",
        "enum": [
          "ach",
          "wire",
          "ach_push",
          "ach_same_day",
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "bridge_wallet",
          "ethereum",
          "optimism",
          "polygon",
          "sepa",
          "solana",
          "spei",
          "stellar",
          "swift",
          "tron"
        ]
      },
      "OfframpPaymentRail": {
        "type": "string",
        "enum": [
          "ach",
          "wire",
          "ach_push",
          "ach_same_day",
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "optimism",
          "polygon",
          "solana",
          "spei",
          "stellar",
          "swift",
          "tron"
        ]
      },
      "SepaSwiftInclusiveOfframpPaymentRail": {
        "type": "string",
        "enum": [
          "ach",
          "wire",
          "ach_push",
          "ach_same_day",
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "fiat_deposit_return",
          "optimism",
          "polygon",
          "sepa",
          "solana",
          "spei",
          "stellar",
          "swift",
          "tron"
        ]
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "message": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "source": {
            "title": "ErrorSource",
            "required": [
              "location",
              "key"
            ],
            "properties": {
              "location": {
                "type": "string",
                "enum": [
                  "path",
                  "query",
                  "body",
                  "header"
                ]
              },
              "key": {
                "type": "string",
                "description": "Comma separated names of the properties or parameters causing the error"
              }
            }
          }
        }
      },
      "PlaidLinkRequest": {
        "properties": {
          "link_token": {
            "type": "string",
            "description": "Link token generated via the Plaid Link SDK"
          },
          "link_token_expires_at": {
            "type": "string",
            "description": "Expiration time of the link token",
            "format": "date-time"
          },
          "callback_url": {
            "type": "string",
            "description": "URL to call through Plaid Link Flow's onSuccess callback with the public token passed in the body of the request"
          }
        }
      },
      "IndividualKycLinkResponse": {
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the KYC link"
          },
          "type": {
            "type": "string",
            "description": "Type of the KYC link",
            "enum": [
              "individual",
              "business"
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "ID of the customer."
          },
          "full_name": {
            "type": "string",
            "description": "Full name of the customer, for a business, this would be the business entity's legal name"
          },
          "email": {
            "type": "string",
            "description": "Email of the customer"
          },
          "kyc_link": {
            "type": "string",
            "description": "Link to the KYC flow"
          },
          "kyc_status": {
            "type": "string",
            "$ref": "#/components/schemas/KycStatus"
          },
          "rejection_reasons": {
            "readOnly": true,
            "description": "Reasons why a customer KYC was rejected",
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/RejectionReason"
            }
          },
          "tos_link": {
            "type": "string",
            "description": "Link to the TOS flow"
          },
          "tos_status": {
            "type": "string",
            "$ref": "#/components/schemas/TosStatus"
          },
          "created_at": {
            "type": "string",
            "description": "Time of creation of the KYC link",
            "format": "date-time"
          }
        }
      },
      "PlaidExchangePublicToken": {
        "required": [
          "public_token"
        ],
        "properties": {
          "public_token": {
            "type": "string",
            "description": "Public token generated via the Plaid Link SDK"
          }
        }
      },
      "TransactionStatus": {
        "type": "string",
        "enum": [
          "awaiting_funds",
          "in_review",
          "funds_received",
          "payment_submitted",
          "payment_processed",
          "canceled",
          "error",
          "undeliverable",
          "returned",
          "refunded"
        ]
      },
      "CustomerStatus": {
        "type": "string",
        "description": "`offboarded`: represents a customer's account that was internally reviewed and closed due to suspicious activity.\n`paused`: represents a customer's account that is currently under review because of activity on the platform.\n",
        "enum": [
          "active",
          "awaiting_questionnaire",
          "awaiting_ubo",
          "incomplete",
          "not_started",
          "offboarded",
          "paused",
          "rejected",
          "under_review"
        ]
      },
      "CustomerCapabilityState": {
        "type": "string",
        "description": "State of the customer capability",
        "enum": [
          "pending",
          "active",
          "inactive",
          "rejected"
        ]
      },
      "KycStatus": {
        "type": "string",
        "description": "Status of the KYC flow.",
        "enum": [
          "not_started",
          "incomplete",
          "awaiting_ubo",
          "under_review",
          "approved",
          "rejected",
          "paused",
          "offboarded"
        ]
      },
      "RejectionReason": {
        "description": "Reason why the kyc_status was rejected",
        "properties": {
          "developer_reason": {
            "type": "string",
            "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
          },
          "reason": {
            "type": "string",
            "description": "Reason for why a customer was rejected. To be shared with the customer."
          },
          "created_at": {
            "type": "string",
            "description": "Time of creation of the rejection reason"
          }
        }
      },
      "TosStatus": {
        "type": "string",
        "description": "Status of the TOS flow",
        "enum": [
          "pending",
          "approved"
        ]
      },
      "WebhookEventCategory": {
        "type": "string",
        "description": "The category of the webhook event",
        "enum": [
          "customer",
          "kyc_link",
          "liquidation_address.drain",
          "static_memo.activity",
          "transfer",
          "virtual_account.activity",
          "card_account",
          "card_transaction",
          "card_withdrawal",
          "posted_card_account_transaction"
        ]
      },
      "Webhook": {
        "required": [
          "id",
          "url",
          "status",
          "public_key"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "The URL that the webhook will send events to"
          },
          "status": {
            "type": "string",
            "description": "The status of the webhook. Only active webhooks will receive events automatically.",
            "enum": [
              "active",
              "disabled",
              "deleted"
            ]
          },
          "public_key": {
            "type": "string",
            "description": "The public key (in PEM format) that should be used to verify the authenticity of webhook events"
          },
          "event_categories": {
            "type": "array",
            "description": "The list of event categories that the webhook endpoint will receive",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/WebhookEventCategory"
            }
          }
        }
      },
      "WebhookEvent": {
        "required": [
          "api_version",
          "event_id",
          "event_developer_id",
          "event_category",
          "event_type",
          "event_object_id",
          "event_object",
          "event_object_changes",
          "event_created_at"
        ],
        "properties": {
          "api_version": {
            "type": "string",
            "readOnly": true
          },
          "event_id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "event_developer_id": {
            "type": "string",
            "readOnly": true,
            "description": "The developer ID of the developer"
          },
          "event_sequence": {
            "type": "integer",
            "readOnly": true
          },
          "event_category": {
            "$ref": "#/components/schemas/WebhookEventCategory"
          },
          "event_type": {
            "type": "string",
            "description": "The values here will be prefixed with the event_category. For example, a customer created event will be `customer.created`",
            "enum": [
              "created",
              "updated",
              "updated.status_transitioned",
              "deleted",
              "canceled"
            ]
          },
          "event_object_id": {
            "$ref": "#/components/schemas/Id",
            "readOnly": true
          },
          "event_object_status": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "not_started",
              "incomplete",
              "active",
              "rejected",
              "under_review",
              "manual_review",
              "awaiting_ubo",
              "approved",
              "awaiting_funds",
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "canceled",
              "error",
              "returned",
              "refunded",
              "undeliverable"
            ]
          },
          "event_object": {
            "type": "object",
            "description": "The object that was affected by the event",
            "readOnly": true
          },
          "event_object_changes": {
            "type": "object",
            "description": "The changes that were made to the object",
            "readOnly": true
          },
          "event_created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "WebhookEventDeliveryLog": {
        "required": [
          "status",
          "event_id",
          "response_body",
          "created_at"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "description": "The status code of the delivery"
          },
          "event_id": {
            "$ref": "#/components/schemas/Id",
            "description": "The id of the event for the delivery"
          },
          "response_body": {
            "type": "string",
            "description": "The response body of the delivery"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time of the delivery"
          }
        }
      },
      "CreateWebhook": {
        "required": [
          "url",
          "event_epoch"
        ],
        "properties": {
          "url": {
            "description": "The URL that the webhook will send events to. It must use the HTTPS scheme and have a valid X.509 certificate. The URL doesn't need to be live, but the host must be reachable.",
            "type": "string",
            "minLength": 1
          },
          "event_epoch": {
            "description": "Specifies the starting point from which this webhook will receive events. This should usually be set to \"webhook_creation\", unless there is a reason why this webhook needs to process events from before its creation. When this value is set to \"webhook_creation\", the webhook will receive a small number of events preceding its creation for convenience.",
            "type": "string",
            "enum": [
              "webhook_creation",
              "beginning_of_time"
            ]
          },
          "event_categories": {
            "type": "array",
            "description": "The list of event categories that the webhook endpoint will receive",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/WebhookEventCategory"
            }
          }
        }
      },
      "CryptoReturnPolicy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "developer_id": {
            "type": "string"
          },
          "refund_destination_address": {
            "type": "string"
          },
          "refund_destination_blockchain_memo": {
            "type": "string"
          },
          "refund_destination_chain": {
            "type": "string"
          },
          "refund_destination_currency": {
            "type": "string"
          },
          "strategy": {
            "type": "string"
          }
        }
      },
      "PostCryptoReturnPoliciesInput": {
        "type": "object",
        "properties": {
          "refund_destination_address": {
            "type": "string",
            "description": "The address to which the refund will be sent. Required if the strategy is `static_address`, but must be unset if the strategy is `refund_to_sender`."
          },
          "refund_destination_blockchain_memo": {
            "type": "string",
            "description": "The memo to include with the refund transaction. Must be unset if the strategy is `refund_to_sender`."
          },
          "refund_destination_chain": {
            "type": "string",
            "description": "The blockchain on which the refund will be sent. Required if the strategy is `static_address`, but must be unset if the strategy is `refund_to_sender`."
          },
          "refund_destination_currency": {
            "type": "string",
            "description": "The currency to which the refund will be sent. Required if the strategy is `static_address`, but must be unset if the strategy is `refund_to_sender`."
          },
          "strategy": {
            "type": "string",
            "description": "The strategy to use for the refund. Can be `refund_to_sender` or `static_address`. We only support multiple policies for `static_address`; different strategies cannot have multiple policies. If multiple `static_address` policies exist, the policy that matches both the currency and chain will be used first. If no such policy is found, the policy that matches only the currency will be used instead."
          }
        }
      },
      "PostCardAccountsInput": {
        "required": [
          "currency",
          "chain"
        ],
        "properties": {
          "client_reference_id": {
            "type": "string",
            "description": "An optional client-provided reference ID that uniquely identifies the card account in the client's system"
          },
          "currency": {
            "$ref": "#/components/schemas/CardsCryptoCurrency",
            "description": "Crypto currency used by the card account being created"
          },
          "chain": {
            "$ref": "#/components/schemas/OfframpChainForCards",
            "description": "Chain used by the card account being created"
          },
          "crypto_account": {
            "$ref": "#/components/schemas/CardCryptoAccount"
          }
        }
      },
      "PostCardFreezeInput": {
        "required": [
          "initiator",
          "reason"
        ],
        "properties": {
          "initiator": {
            "$ref": "#/components/schemas/CardFreezeInitiator"
          },
          "reason": {
            "$ref": "#/components/schemas/CardFreezeReason"
          },
          "reason_detail": {
            "type": "string",
            "description": "A more detailed reason for the freeze"
          },
          "starting_at": {
            "type": "string",
            "description": "An optional starting time in ISO8601 format. It defaults to the current date-time if unspecified"
          },
          "ending_at": {
            "type": "string",
            "description": "An optional ending time in ISO8601 format. If this ending time is not specified, the card account will stay frozen indefinitely until it gets unfrozen by another request"
          }
        }
      },
      "PostCardUnfreezeInput": {
        "required": [
          "initiator"
        ],
        "properties": {
          "initiator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardFreezeInitiator"
              }
            ],
            "description": "The party of the freeze to be removed"
          }
        }
      },
      "CardUnfreezeResponse": {
        "description": "Card unfreeze response",
        "required": [
          "card_account_id",
          "initiator",
          "reason",
          "created_at",
          "status"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/CardFreeze"
          },
          {
            "properties": {
              "initiator": {
                "description": "The initiator of the removed freeze"
              },
              "reason": {
                "description": "The reason of the removed freeze"
              },
              "reason_detail": {
                "description": "The reason detail of the removed freeze"
              },
              "starting_at": {
                "description": "The start time of the removed freeze, in ISO8601 format"
              },
              "ending_at": {
                "description": "The end time of the removed freeze, in ISO8601 format"
              },
              "created_at": {
                "description": "The creation time of the removed freeze, in ISO8601 format"
              },
              "status": {
                "type": "string",
                "description": "The processing status of the unfreeze request",
                "readOnly": true,
                "enum": [
                  "freeze_removed"
                ]
              }
            }
          }
        ]
      },
      "PostCardPushProvisioningInput": {
        "required": [
          "initiator"
        ],
        "properties": {
          "wallet_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardWalletProvider"
              }
            ],
            "description": "The wallet provider of the push provisioning request"
          },
          "apple_pay": {
            "description": "Apple Pay specific provisioning request data. Required for `apple_pay` wallet provider.",
            "required": [
              "leaf_cert",
              "subordinate_cert",
              "nonce",
              "nonce_signature"
            ],
            "properties": {
              "encoding": {
                "type": "string",
                "description": "Specifies the encoding of each field in the Apple Pay provisioning request. Defaults to `hex` if unspecified.",
                "enum": [
                  "base64",
                  "hex"
                ]
              },
              "leaf_cert": {
                "type": "string",
                "description": "The leaf certificate returned by the wallet provider that was signed using the subordinate cert. The binary data of this certificate should be hex (case-insensitive) or base64 encoded, as specified by the encoding field"
              },
              "subordinate_cert": {
                "type": "string",
                "description": "The subordinate certificate returned by the wallet provider that was signed using the wallet provider's Certificate Authority (CA) certificate. The binary data of this certificate should be hex (case-insensitive) or base64 encoded, as specified by the encoding field"
              },
              "nonce": {
                "type": "string",
                "description": "The nonce value returned by Apple Pay. It should be hex (case-insensitive) or base64 encoded, as specified by the encoding field"
              },
              "nonce_signature": {
                "type": "string",
                "description": "The nonce signature value returned by Apple Pay. It should be hex (case-insensitive) or base64 encoded, as specified by the encoding field"
              }
            }
          },
          "google_pay": {
            "description": "Google Pay specific push provisioning request data. Required for `google_pay` wallet provider.",
            "required": [
              "client_wallet_account_id",
              "client_device_id"
            ],
            "properties": {
              "client_wallet_account_id": {
                "type": "string",
                "description": "Value returned by Google Pay for use with Visa"
              },
              "client_device_id": {
                "type": "string",
                "description": "Value returned by Google Pay for use with Visa"
              }
            }
          }
        }
      },
      "CardPushProvisioningResponse": {
        "description": "The mobile wallet push provisioning response",
        "required": [
          "card_account_id",
          "initiator",
          "reason",
          "created_at",
          "status"
        ],
        "properties": {
          "wallet_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardWalletProvider"
              }
            ],
            "description": "The wallet provider of the push provisioning request"
          },
          "apple_pay": {
            "description": "The detailed provisioning request data that need to be sent directly to the `apple_pay` wallet provider",
            "properties": {
              "activation_data": {
                "type": "string",
                "description": "The request's activation data. This field is always Base64-encoded"
              },
              "encrypted_pass_data": {
                "type": "string",
                "description": "An encrypted JSON file containing the sensitive information needed to add a card to a wallet. This field is always Base64-encoded"
              },
              "ephemeral_public_key": {
                "type": "string",
                "description": "A generated key that is combined with a private key. This field is always Base64-encoded"
              }
            }
          },
          "google_pay": {
            "description": "The detailed provisioning request data that need to be sent directly to the `google_pay` wallet provider",
            "properties": {
              "opaque_payment_card": {
                "type": "string",
                "description": "A Base64-encoded or Base64url-encoded opaque string"
              }
            }
          }
        }
      },
      "PostCardAccountEphemeralKeyInput": {
        "description": "The request to create an ephemeral key to reveal card details",
        "required": [
          "client_nonce"
        ],
        "properties": {
          "client_nonce": {
            "type": "string",
            "description": "The client-side nonce that will be associated with the ephemeral key. This must be generated from the client secret and timestamp as per the [integration guide](https://apidocs.bridge.xyz/docs/safely-reveal-card-details-to-customers) in order to be usable for revealing card details."
          }
        }
      },
      "CardAccountEphemeralKeyResponse": {
        "description": "A response containing the ephemeral key to reveal card details",
        "required": [
          "ephemeral_key"
        ],
        "properties": {
          "ephemeral_key": {
            "type": "string",
            "description": "The ephemeral key to reveal card details. This key is only valid for 5 minutes. Your backend should return this key to the frontend instead of directly using it, to avoid putting your backend in PCI compliance scope. Please see the integration guide on [safely revealing card details](https://apidocs.bridge.xyz/docs/safely-reveal-card-details-to-customers) for more information."
          }
        }
      },
      "CardAccount": {
        "type": "object",
        "required": [
          "id",
          "customer_id",
          "card_image_url",
          "status",
          "balances",
          "freezes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "ID of the card account"
          },
          "client_reference_id": {
            "type": "string",
            "description": "The client-provided reference ID"
          },
          "customer_id": {
            "$ref": "#/components/schemas/Id",
            "description": "ID of the customer"
          },
          "card_image_url": {
            "type": "string",
            "description": "An expiring URL used to render the card image, with a validity period of 5 minutes"
          },
          "status": {
            "type": "string",
            "description": "Status of the card account",
            "enum": [
              "active",
              "pending",
              "inactive",
              "frozen"
            ]
          },
          "status_reason": {
            "type": "string",
            "description": "An optional detailed explanation for the card account status"
          },
          "card_details": {
            "type": "object",
            "$ref": "#/components/schemas/CardDetails"
          },
          "balances": {
            "type": "object",
            "$ref": "#/components/schemas/CardBalances"
          },
          "freezes": {
            "type": "array",
            "minItems": 0,
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CardFreeze"
                }
              ],
              "properties": {
                "initiator": {
                  "description": "The party that initiated the freeze. A freeze can be initiated by the customer, the developer, or Bridge. Only one freeze per initiator can be active at a time. If a new freeze is initiated by the same party, it overwrites any existing freeze",
                  "enum": [
                    "bridge"
                  ]
                }
              }
            }
          },
          "crypto_account": {
            "type": "object",
            "$ref": "#/components/schemas/CardCryptoAccount"
          },
          "funding_instructions": {
            "$ref": "#/components/schemas/CardAccountFundingInstructions"
          },
          "additional_funding_instructions": {
            "type": "array",
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/CardAccountFundingInstructions"
            }
          }
        }
      },
      "CardBalances": {
        "description": "Balances of the card account",
        "type": "object",
        "required": [
          "available",
          "hold"
        ],
        "properties": {
          "available": {
            "description": "The available balance of the card account",
            "type": "object",
            "$ref": "#/components/schemas/CardBalance"
          },
          "hold": {
            "description": "The balance tha is placed on hold for pending authorizations",
            "type": "object",
            "$ref": "#/components/schemas/CardBalance"
          }
        }
      },
      "CardBalance": {
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/CardsCryptoCurrency"
          }
        }
      },
      "CardDetails": {
        "description": "Details of the issued card. This object contains enough payment card details to identify the issued card, but only provides the last four digits of the card number to maintain security.",
        "type": "object",
        "required": [
          "last_4",
          "expiry",
          "bin"
        ],
        "properties": {
          "last_4": {
            "description": "The last four digits of the card number",
            "type": "string",
            "example": "1264"
          },
          "expiry": {
            "description": "The expiration date of the card, in MM/YY format",
            "type": "string",
            "example": "10/24"
          },
          "bin": {
            "description": "The BIN of the card, including the first 8 digits",
            "type": "string",
            "example": "44325280"
          }
        }
      },
      "CardFreezeInitiator": {
        "type": "string",
        "description": "The party that initiated the freeze. A freeze can be initiated by either the customer or developer. Only one freeze per initiator can be active at a time. If a new freeze is initiated by the same party, it overwrites any existing freeze",
        "enum": [
          "developer",
          "customer"
        ]
      },
      "CardFreezeReason": {
        "type": "string",
        "description": "The reason of the freeze",
        "enum": [
          "lost_or_stolen",
          "suspicious_activity",
          "planned_inactivity",
          "suspected_fraud",
          "other"
        ]
      },
      "CardFreeze": {
        "description": "Card freeze",
        "required": [
          "card_account_id",
          "initiator",
          "reason",
          "created_at",
          "status"
        ],
        "properties": {
          "card_account_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Card account ID"
          },
          "initiator": {
            "$ref": "#/components/schemas/CardFreezeInitiator"
          },
          "reason": {
            "$ref": "#/components/schemas/CardFreezeReason"
          },
          "reason_detail": {
            "type": "string",
            "description": "A more detailed reason for the freeze"
          },
          "starting_at": {
            "type": "string",
            "description": "The start time of the freeze, in ISO8601 format"
          },
          "ending_at": {
            "type": "string",
            "description": "The end time of the freeze, in ISO8601 format"
          },
          "created_at": {
            "type": "string",
            "description": "The creation time of the freeze, in ISO8601 format",
            "readOnly": true
          }
        }
      },
      "CardCryptoAccount": {
        "description": "The crypto account for a self-custodial card account. This field is not supported for a Bridge-custodial card funding setup (note that if you are on cards trial, you are automatically on a custodial funding setup).",
        "required": [
          "type",
          "address"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the crypto account",
            "enum": [
              "standard",
              "squads",
              "bridge_wallet"
            ]
          },
          "address": {
            "type": "string",
            "description": "The public address of the crypto account"
          }
        }
      },
      "CardAccountFundingInstructions": {
        "description": "Funding instructions applicable only to the top-up card funding strategy, which is configured at the developer level",
        "required": [
          "currency",
          "chain",
          "address"
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CardsCryptoCurrency",
            "description": "The crypto currency used by the card account"
          },
          "chain": {
            "$ref": "#/components/schemas/OfframpChainForCards",
            "description": "The chain used by the card account"
          },
          "address": {
            "type": "string",
            "description": "The deposit address provided by Bridge to fund the card account"
          },
          "memo": {
            "type": "string",
            "description": "If present, this is the message that the customer MUST include in their on-chain funding transfers. It is only applicable to memo-based blockchains such as Stellar and Tron"
          }
        }
      },
      "CardWalletProvider": {
        "type": "string",
        "description": "The mobile wallet provider",
        "enum": [
          "apple_pay",
          "google_pay"
        ]
      },
      "CardAuthorization": {
        "description": "A pending card authorization",
        "required": [
          "id",
          "amount",
          "currency",
          "merchant_category_code",
          "description",
          "authorized_at",
          "details"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "ID of the pending authorization"
          },
          "amount": {
            "type": "string",
            "description": "The amount represented as a decimal string"
          },
          "billing_amount": {
            "type": "string",
            "description": "The billing amount, represented as a decimal string. The billing amount is the amount of the transaction excluding any additional hold. This amount should be present on all purchases, but will only differ from the amount field for some merchant categories in which an upcharge is involved (e.g. gas stations, hotels)."
          },
          "currency": {
            "$ref": "#/components/schemas/FiatCurrency",
            "description": "The currency of the transaction"
          },
          "merchant_category_code": {
            "type": "string",
            "description": "A merchant category code for card transactions (e.g., '5712')"
          },
          "description": {
            "type": "string",
            "description": "A description of the card transaction, including the merchant's name and location information"
          },
          "authorized_at": {
            "type": "string",
            "description": "Timestamp when the card transaction was authorized, in ISO8601 format"
          },
          "details": {
            "properties": {
              "vendor_auth_id": {
                "type": "string",
                "description": "ID in the vendor system used to identify this authorized card transaction"
              }
            }
          },
          "local_transaction_details": {
            "$ref": "#/components/schemas/CardLocalTransactionDetails"
          },
          "verification_data": {
            "$ref": "#/components/schemas/CardAuthorizationVerificationData"
          }
        }
      },
      "CardTransaction": {
        "description": "A posted transaction",
        "required": [
          "id",
          "category",
          "amount",
          "currency",
          "description",
          "posted_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "ID of the transaction"
          },
          "category": {
            "type": "string",
            "description": "The category of the transaction",
            "enum": [
              "adjustment",
              "fee",
              "purchase",
              "refund",
              "crypto_funding",
              "crypto_return",
              "crypto_withdrawal"
            ]
          },
          "amount": {
            "type": "string",
            "description": "The amount represented as a decimal string"
          },
          "billing_amount": {
            "type": "string",
            "description": "The billing amount, represented as a decimal string. The billing amount is the amount of the transaction excluding any additional hold. This amount should be present on all purchases, but will only differ from the amount field for some merchant categories in which an upcharge is involved (e.g. gas stations, hotels)."
          },
          "currency": {
            "type": "string",
            "description": "The currency of the transaction",
            "enum": [
              "usd",
              "usdc"
            ]
          },
          "merchant_category_code": {
            "type": "string",
            "description": "The merchant category code, if applicable (e.g., '5712'). Always returned for transactions with category `purchase` or `refund`"
          },
          "merchant_name": {
            "type": "string",
            "description": "The merchant name, if applicable. Always returned for transactions with category `purchase` or `refund`"
          },
          "merchant_location": {
            "type": "string",
            "description": "The merchant location, if applicable. Always returned for transactions with category `purchase` or `refund`"
          },
          "description": {
            "type": "string",
            "description": "The transaction description. It includes the merchant's name and location information for card transactions"
          },
          "local_transaction_details": {
            "$ref": "#/components/schemas/CardLocalTransactionDetails"
          },
          "posted_at": {
            "type": "string",
            "description": "Timestamp when the transaction was posted, in ISO8601 format"
          },
          "authorized_at": {
            "type": "string",
            "description": "Timestamp when the transaction was authorized, in ISO8601 format. Applicable only to transactions with category `purchase` or `refund` and always returned when applicable"
          }
        }
      },
      "CardLocalTransactionDetails": {
        "description": "Details of a transaction processed in a local currency other than USD, with currency conversion applied",
        "required": [
          "amount",
          "currency",
          "exchange_rate"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount in local currency, represented as a decimal string"
          },
          "currency": {
            "type": "string",
            "description": "The transaction's local currency"
          },
          "exchange_rate": {
            "type": "string",
            "description": "The exchange rate applied to convert the local currency amount into USD for the transaction"
          }
        }
      },
      "CardAuthorizationVerificationData": {
        "description": "Information on verifications that were performed on information that the cardholder provided to the merchant.",
        "type": "object",
        "properties": {
          "address_check": {
            "type": "string",
            "description": "Whether the cardholder provided an address and if it matched the cardholder’s address on file.",
            "enum": [
              "match",
              "not_provided",
              "mismatch"
            ]
          },
          "address_postal_code_check": {
            "type": "string",
            "description": "Whether the cardholder provided a postal code and if it matched the cardholder’s postal code on file.",
            "enum": [
              "match",
              "not_provided",
              "mismatch"
            ]
          },
          "cvv_check": {
            "type": "string",
            "description": "Whether the cardholder provided a CVV and if it matched the CVV on record.",
            "enum": [
              "match",
              "not_provided",
              "mismatch"
            ]
          }
        }
      },
      "CardWithdrawalDestination": {
        "required": [
          "chain",
          "address"
        ],
        "properties": {
          "chain": {
            "type": "string",
            "description": "The chain of the wallet the withdrawn crypto funds should be transferred to"
          },
          "address": {
            "type": "string",
            "description": "The address of the wallet the withdrawn crypto funds should be transferred to"
          },
          "memo": {
            "type": "string",
            "description": "The memo to attach to the withdrawal transaction. Will be transmitted for blockchains that support memos only."
          },
          "tx_hash": {
            "type": "string",
            "description": "The crypto transaction hash for the withdrawal once it's confirmed on the chain",
            "readOnly": true
          },
          "gas_fee": {
            "$ref": "#/components/schemas/GasFee",
            "description": "The gas fee for the withdrawal transaction. Note that this is the representation of the native gas fee of the onchain transaction, which may be different from the fiat-converted gas fee charged on the invoice."
          }
        }
      },
      "GasFee": {
        "description": "The gas fee for a crypto transaction",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of the gas fee represented as a decimal string",
            "readOnly": true
          },
          "currency": {
            "type": "string",
            "description": "The currency of the gas fee.",
            "readOnly": true
          }
        }
      },
      "CardSpendingLimit": {
        "description": "A spending limit for a card account",
        "required": [
          "period",
          "total_amount",
          "remaining_amount"
        ],
        "properties": {
          "period": {
            "type": "string",
            "description": "The period of the spending limit",
            "enum": [
              "daily",
              "trial_lifetime"
            ]
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the spending limit, only applicable to spending limits that have a `next_reset_at`"
          },
          "next_reset_at": {
            "type": "string",
            "description": "The next reset time of the spending limit, in ISO8601 format"
          },
          "total_amount": {
            "type": "string",
            "description": "The total amount of the spending limit"
          },
          "remaining_amount": {
            "type": "string",
            "description": "The remaining amount of the spending limit"
          },
          "currency": {
            "$ref": "#/components/schemas/FiatCurrency",
            "description": "The currency of the spending limit"
          }
        }
      },
      "PostCardAccountDepositAddressInput": {
        "description": "The details of the new deposit address to be provisioned.",
        "required": [
          "chain"
        ],
        "properties": {
          "chain": {
            "type": "string",
            "description": "The chain to provision the new deposit address on.",
            "$ref": "#/components/schemas/OfframpChainForCards"
          }
        }
      },
      "CardWithdrawal": {
        "description": "A card funds withdrawal",
        "required": [
          "id",
          "amount",
          "currency",
          "destination",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "ID of the withdrawal",
            "readOnly": true
          },
          "amount": {
            "type": "string",
            "description": "The amount represented as a decimal string"
          },
          "type": {
            "type": "string",
            "description": "The type of the withdrawal. Defaults to `top_up_balance_withdrawal`.",
            "enum": [
              "top_up_balance_withdrawal",
              "fee"
            ]
          },
          "currency": {
            "$ref": "#/components/schemas/CardsCryptoCurrency",
            "description": "The currency of the withdrawal, which is the crypto currency on the card account",
            "readOnly": true
          },
          "destination": {
            "$ref": "#/components/schemas/CardWithdrawalDestination"
          },
          "client_note": {
            "type": "string",
            "description": "An optional client-provided note for the withdrawal"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the withdrawal was created, in ISO8601 format",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the withdrawal was last updated, in ISO8601 format",
            "readOnly": true
          }
        }
      },
      "CardPinUpdateResponse": {
        "description": "Response containing a secure URL to update a card's PIN",
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Single-use, time-limited URL that can be used to securely update the card PIN in an iframe",
            "example": "https://secure.example.com/update-pin?token=xyz789"
          }
        }
      },
      "CardProgramSummary": {
        "description": "The summary of a card program for a given period",
        "type": "object",
        "properties": {
          "period": {
            "type": "string",
            "description": "The period type of the card program summary",
            "enum": [
              "year",
              "month",
              "week",
              "day",
              "lifetime"
            ]
          },
          "period_starting": {
            "type": "string",
            "description": "The starting date of the period, in ISO8601 format",
            "example": "2025-01-01"
          },
          "cards_provisioned_count": {
            "type": "integer",
            "description": "The number of cards provisioned during the period",
            "example": 1123
          },
          "card_transactions_count": {
            "type": "integer",
            "description": "The number of card transactions during the period, excluding refunds.",
            "example": 31415
          },
          "provisioned_cards_by_country": {
            "type": "object",
            "description": "The number of cards provisioned during the period, by issuing country. The key is the ISO-3166-1 alpha-3 country code, and the value is the number of cards provisioned for that issuing country.",
            "example": {
              "USA": 123,
              "MEX": 45
            }
          },
          "transaction_volume": {
            "type": "string",
            "description": "The total transaction volume during the period, in USD",
            "example": "-100.0"
          },
          "transacting_card_accounts_count": {
            "type": "integer",
            "description": "The number of card accounts that transacted during the period",
            "example": 2047
          }
        }
      },
      "RewardRate": {
        "title": "Reward Rate for a given stablecoin",
        "type": "object",
        "properties": {
          "rate": {
            "type": "string",
            "description": "The reward rate for the given stablecoin"
          },
          "effective_at": {
            "type": "string",
            "description": "The effective date of the reward rate, in ISO8601 format"
          },
          "expires_at": {
            "type": "string",
            "description": "The expiration date of the reward rate, in ISO8601 format"
          }
        }
      },
      "CustomerRewardSummary": {
        "title": "Customer Reward Summary for a given stablecoin",
        "type": "object",
        "properties": {
          "developer_id": {
            "type": "string",
            "description": "The developer ID of the customer"
          },
          "customer_id": {
            "type": "string",
            "description": "The customer ID of the customer"
          },
          "currency": {
            "type": "string",
            "description": "The stablecoin symbol for the reward summary"
          },
          "balance": {
            "type": "string",
            "description": "The balance of the customer in the given stablecoin"
          },
          "rewards": {
            "type": "string",
            "description": "The rewards of the customer in the given stablecoin"
          },
          "updated_at": {
            "type": "string",
            "description": "The timestamp of the last update to the reward summary, in ISO8601 format"
          }
        }
      },
      "DeveloperRewardSummary": {
        "title": "Reward Summary for a given stablecoin",
        "type": "object",
        "properties": {
          "developer_id": {
            "type": "string",
            "description": "The developer ID of the developer"
          },
          "currency": {
            "type": "string",
            "description": "The stablecoin symbol for the reward summary"
          },
          "balance": {
            "type": "string",
            "description": "The balance of the developer in the given stablecoin"
          },
          "rewards": {
            "type": "string",
            "description": "The rewards of the developer in the given stablecoin"
          },
          "updated_at": {
            "type": "string",
            "description": "The timestamp of the last update to the reward summary, in ISO8601 format"
          }
        }
      },
      "CustomerRewardHistory": {
        "title": "Customer Reward History for a given stablecoin",
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The customer ID of the customer"
          },
          "rewards": {
            "type": "array",
            "description": "The rewards of the customer in the given stablecoin",
            "items": {
              "type": "object",
              "properties": {
                "balance": {
                  "type": "string",
                  "description": "The balance of the customer in the given stablecoin"
                },
                "amount": {
                  "type": "string",
                  "description": "The amount of the reward"
                },
                "currency": {
                  "type": "string",
                  "description": "The stablecoin symbol for the reward summary"
                },
                "date": {
                  "type": "string",
                  "description": "The date of the calculated reward"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "AssociatedPersonIDParameter": {
        "name": "associatedPersonID",
        "in": "path",
        "description": "Unique identifier for an associated person",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "BridgeWalletIDParameter": {
        "name": "bridgeWalletID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "CustomerIDParameter": {
        "name": "customerID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "TemplateIDParameter": {
        "name": "template_id",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Id"
        },
        "description": "This is a template id. If this is specified, the transfers with the specified template id will be returned."
      },
      "TransferIDParameter": {
        "name": "transferID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "TransferStateParameter": {
        "name": "state",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "awaiting_funds",
            "funds_received",
            "payment_submitted",
            "payment_processed",
            "in_review",
            "kyc_required",
            "kyc_in_review",
            "developer_kyb_required",
            "canceled",
            "error",
            "returned",
            "refunded",
            "undeliverable"
          ]
        },
        "description": "Filter transfers by their external state. See [Transfer States](https://apidocs.bridge.xyz/docs/transfers-1#transfer-states) for more details."
      },
      "VirtualAccountIDParameter": {
        "name": "virtualAccountID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "StaticMemoIDParameter": {
        "name": "staticMemoID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "PrefundedAccountIDParameter": {
        "name": "prefundedAccountID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "TxHashParameter": {
        "name": "tx_hash",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The hash of the transaction"
      },
      "EventTypeParameter": {
        "name": "event_type",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "funds_received",
            "payment_submitted",
            "payment_processed",
            "in_review",
            "refund",
            "microdeposit",
            "account_update",
            "deactivation",
            "activation"
          ]
        },
        "description": "Filter history by event type"
      },
      "PayinIDParameter": {
        "name": "payinID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "PayoutIDParameter": {
        "name": "payoutID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "ExternalAccountIDParameter": {
        "name": "externalAccountID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "LiquidationAddressIDParameter": {
        "name": "liquidationAddressID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "IdempotencyKeyParameter": {
        "in": "header",
        "name": "Idempotency-Key",
        "schema": {
          "type": "string"
        }
      },
      "LimitParameter": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer"
        },
        "description": "The number of items to return (default of 10, max of 100)"
      },
      "TransferStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a transfer id. If this is specified, the next page that starts with a transfer right AFTER the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers older than the specified transfer id will be returned (shouldn't be set if ending_before is set)"
      },
      "TransferEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a transfer id. If this is specified, the previous page that ends with a transfer right BEFORE the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers newer than the specified transfer id will be returned (shouldn't be set if starting_after is set)"
      },
      "LiquidationScheduleStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a liquidation address id. If this is specified, the next page that starts with a liquidation address right AFTER the specified liquidation address id on the liquidation address timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that liquidation address older than the specified liquidation address id will be returned (shouldn't be set if ending_before is set)"
      },
      "LiquidationScheduleEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a liquidation address id. If this is specified, the previous page that ends with a liquidation address right BEFORE the specified liquidation address id on the liquidation address timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that liquidation address newer than the specified liquidation address id will be returned (shouldn't be set if starting_after is set)"
      },
      "StaticMemoStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a static memo id. If this is specified, the next page that starts with a static memo right AFTER the specified static memo id on the static memo timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that static memo older than the specified static memo id will be returned (shouldn't be set if ending_before is set)"
      },
      "StaticMemoEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a static memo id. If this is specified, the previous page that ends with a static memo right BEFORE the specified static memo id on the static memo timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that static memo newer than the specified static memo id will be returned (shouldn't be set if starting_after is set)"
      },
      "VirtualAccountStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a virtual account id. If this is specified, the next page that starts with a virtual account right AFTER the specified virtual account id on the virtual account timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that virtual account older than the specified virtual account id will be returned (shouldn't be set if ending_before is set)"
      },
      "VirtualAccountEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a virtual account id. If this is specified, the previous page that ends with a virtual account right BEFORE the specified virtual account id on the virtual account timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that virtual account newer than the specified virtual account id will be returned (shouldn't be set if starting_after is set)"
      },
      "UpdatedAfterMsParameter": {
        "in": "query",
        "name": "updated_after_ms",
        "schema": {
          "type": "integer"
        },
        "description": "This is a unix timestamp in milliseconds. If this is specified, objects updated AFTER the specified timestamp will be returned"
      },
      "UpdatedBeforeMsParameter": {
        "in": "query",
        "name": "updated_before_ms",
        "schema": {
          "type": "integer"
        },
        "description": "This is a unix timestamp in milliseconds. If this is specified, objects updated BEFORE the specified timestamp will be returned"
      },
      "CustomerStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a customer id. If this is specified, the next page that starts with a customer right AFTER the specified customer id on the customer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that customers older than the specified customer id will be returned (shouldn't be set if ending_before is set)"
      },
      "CustomerEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a customer id. If this is specified, the previous page that ends with a customer right BEFORE the specified customer id on the customer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that customers newer than the specified customer id will be returned (shouldn't be set if starting_after is set)"
      },
      "DrainStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a drain id. If this is specified, the next page that starts with a drain right AFTER the specified drain id on the drain timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that drains older than the specified drain id will be returned (shouldn't be set if ending_before is set)"
      },
      "DrainEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a drain id. If this is specified, the previous page that ends with a drain right BEFORE the specified drain id on the drain timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that drains newer than the specified drain id will be returned (shouldn't be set if starting_after is set)"
      },
      "EventStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is an event id. If this is specified, the next page that starts with an event right AFTER the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events older than the specified event id will be returned (shouldn't be set if ending_before is set)"
      },
      "EventEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is an event id. If this is specified, the previous page that ends with an event right BEFORE the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events newer than the specified event id will be returned (shouldn't be set if starting_after is set)"
      },
      "PrefundedAccountHistoryStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a prefunded event id. If this is specified, the next page that starts with an event right AFTER the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events older than the specified event id will be returned (shouldn't be set if ending_before is set)"
      },
      "PrefundedAccountHistoryEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a prefunded event id. If this is specified, the previous page that ends with an event right BEFORE the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events newer than the specified event id will be returned (shouldn't be set if starting_after is set)"
      },
      "WithdrawalStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a withdrawal id. If this is specified, the next page that starts with a withdrawal right AFTER the specified id on the timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that withdrawals older than the specified id will be returned (shouldn't be set if `ending_before` is set)"
      },
      "WithdrawalEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a withdrawal id. If this is specified, the previous page that ends with a withdrawal right BEFORE the specified id on the timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that withdrawals newer than the specified id will be returned (shouldn't be set if `starting_after` is set)"
      },
      "EndorsementParameter": {
        "in": "query",
        "name": "endorsement",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "sepa",
            "spei"
          ]
        },
        "description": "An endorsement is the approval required for a customer to use a particular product or service offered by Bridge"
      },
      "RedirectUriParameter": {
        "in": "query",
        "name": "redirect_uri",
        "required": false,
        "schema": {
          "type": "string",
          "example": "http%3A%2F%2Fexample.com%2Fredirect"
        },
        "description": "An optional url encoded link that users will be redirected to after completing the hosted KYC flow."
      },
      "WebhookIDParameter": {
        "name": "webhookID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "KycLinkIDParameter": {
        "name": "kycLinkID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "KycLinksEmailParameter": {
        "name": "email",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "If included, filters to KYC links for the customer with the given email"
      },
      "KycLinksCustomerIDParameter": {
        "name": "customer_id",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "If included, filters to KYC links for the customer with the given id"
      },
      "FiatInstructionsActivationStatusParameter": {
        "in": "query",
        "required": false,
        "name": "status",
        "description": "Limit results to those with the given activation status",
        "example": "activated",
        "schema": {
          "$ref": "#/components/schemas/VirtualAccountActivationStatus"
        }
      },
      "CardAccountIDParameter": {
        "name": "cardAccountID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "CardTransactionIDParameter": {
        "name": "transactionID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "CardWithdrawalIDParameter": {
        "name": "cardWithdrawalID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "StartingTimeParameter": {
        "in": "query",
        "name": "starting_time",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The starting time in ISO8601 format"
      },
      "EndingTimeParameter": {
        "in": "query",
        "name": "ending_time",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The exclusive ending time in ISO8601 format"
      },
      "PageSizeParameter": {
        "in": "query",
        "name": "page_size",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The max number of items to return for the requested page, with a max of 200. The default is 100"
      },
      "PageNumberParameter": {
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "A specific page to fetch. If omitted, the first page (starting at 1) will be returned. Note that this is only supported for navigating posted transactions."
      },
      "CardTransactionStatusParameter": {
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "pending",
              "posted"
            ]
          }
        },
        "style": "form",
        "explode": true,
        "description": "A status to filter the transactions by. If not provided, will default to `posted`."
      },
      "CardTransactionPaginationTokenParameter": {
        "in": "query",
        "name": "pagination_token",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "A pagination token to fetch the next page of transactions."
      },
      "CardTransactionCategoryFamilyParameter": {
        "in": "query",
        "name": "category_family",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "cards",
            "crypto"
          ]
        },
        "description": "A category family to filter the transactions by. If set to `cards`, only card purchase related transactions will be returned. If set to `crypto`, only funding related transactions will be returned.` If not provided, all posted transactions will be returned."
      },
      "CardAuthorizationLimitParameter": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer"
        },
        "description": "The number of pending card authorizations to return, with a max of 200. The default is 100"
      },
      "CardTransactionLimitParameter": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer"
        },
        "description": "The number of transactions to return, with a max of 200. The default is 100"
      },
      "CardStatementPeriodParameter": {
        "in": "path",
        "name": "period",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "A string in the `YYYYMM` format representing a card statement period"
      },
      "CardProgramSummaryPeriodParameter": {
        "in": "query",
        "name": "period",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "year",
            "month",
            "week",
            "day",
            "lifetime"
          ]
        },
        "description": "The type of period to summarize the card program by. If `lifetime` is specified, the `period_key` is not required."
      },
      "CardProgramSummaryPeriodKeyParameter": {
        "in": "query",
        "name": "period_key",
        "schema": {
          "type": "string"
        },
        "description": "A string to indicate the period to retrieve the card program summary for.\n- For `year`, the period key should be in the `YYYY` format\n- For `month`, the period key should be in the `YYYYMM` format\n- For `week`, the period key should be in the `YYYYMMDD` format indicating the beginning day of the week.\n- For `day`, the period key should be in the `YYYYMMDD` format\n- For `lifetime`, the period key is not required\nNote that if a specific period is specified, this endpoint currently only supports fetching for periods with complete data (e.g. only up to the previous year, month, week, or day).\n"
      },
      "BridgeWalletStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a bridge wallet id. If this is specified, the next page that starts with a bridge wallet right AFTER the specified bridge wallet id on the bridge wallet timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that bridge wallets older than the specified bridge wallet id will be returned (shouldn't be set if ending_before is set)"
      },
      "BridgeWalletEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a bridge wallet id. If this is specified, the previous page that ends with a bridge wallet right BEFORE the specified bridge wallet id on the bridge wallet timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that bridge wallets newer than the specified bridge wallet id will be returned (shouldn't be set if starting_after is set)"
      },
      "RewardRateSinceParameter": {
        "in": "query",
        "name": "since",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The starting time in ISO8601 format"
      },
      "RewardCurrencyParameter": {
        "in": "path",
        "name": "currency",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The stablecoin symbol"
      }
    },
    "responses": {
      "BadRequestError": {
        "description": "Request containing missing or invalid parameters.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "BadCustomerRequestErrorExample": {
                "summary": "Bad customer request",
                "value": {
                  "code": "bad_customer_request",
                  "message": "fields missing from customer body.",
                  "name": "first_name,ssn"
                }
              }
            }
          }
        }
      },
      "TransferAmlError": {
        "description": "The transfer has failed due to an AML violation (anti-money laundering).  Reach out to Bridge for more information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "TransferAmlErrorExample": {
                "summary": "An AML violation error response",
                "value": {
                  "code": "aml_violation",
                  "message": "Failed AML Screening"
                }
              }
            }
          }
        }
      },
      "UnverifiableInputError": {
        "description": "Request parameters not verified",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "No resource found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "NotFoundErrorExample": {
                "summary": "Invalid customer id",
                "value": {
                  "code": "Invalid",
                  "message": "Unknown customer id"
                }
              }
            }
          }
        }
      },
      "UnexpectedError": {
        "description": "Unexpected error. User may try and send the request again.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "UnexpectedError": {
                "summary": "An unexpected error",
                "value": {
                  "errors": [
                    {
                      "code": "unexpected",
                      "message": "An expected error occurred, you may try again later"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "AuthenticationError": {
        "description": "Missing or invalid API key",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "MissingTokenError": {
                "summary": "No Api-Key header",
                "description": "The header may be missing or misspelled.",
                "value": {
                  "code": "required",
                  "location": "header",
                  "name": "Api-Key",
                  "message": "Missing Api-Key header"
                }
              },
              "InvalidTokenError": {
                "summary": "Invalid key in Api-Key header",
                "value": {
                  "code": "invalid",
                  "location": "header",
                  "name": "Api-Key",
                  "message": "Invalid Api-Key header"
                }
              }
            }
          }
        }
      },
      "BadExternalAccountUpdateError": {
        "description": "Request containing missing or invalid parameters.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "BeneficiaryAddressAlreadyExistsExample": {
                "summary": "Beneficiary address already exists",
                "value": {
                  "code": "invalid_parameters",
                  "message": "Please resubmit the following parameters that are either missing or invalid.",
                  "source": {
                    "key": {
                      "address": "Beneficiary address already exists"
                    }
                  }
                }
              },
              "InvalidrequestExample": {
                "summary": "Bad External Account request",
                "value": {
                  "code": "invalid_parameters",
                  "message": "Please resubmit the following parameters that are either missing or invalid.",
                  "source": {
                    "key": {
                      "address.city": "must be set"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BadExternalAccountReactivateError": {
        "description": "Request containing missing or invalid parameters.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "ExternalAccountAlreadyActiveExample": {
                "summary": "External account already active",
                "value": {
                  "code": "invalid_parameters",
                  "message": "Please resubmit the following parameters that are either missing or invalid.",
                  "source": {
                    "key": {
                      "status": "External account already active"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "name": "Api-Key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ],
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true
  }
}